// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action_server/action_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_action_5fserver_2faction_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_action_5fserver_2faction_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/extension_set.h> // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_action_5fserver_2faction_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
} // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_action_5fserver_2faction_5fserver_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
        entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField
        aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable
        schema[27] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_action_5fserver_2faction_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace action_server {
class ActionServerResult;
class ActionServerResultDefaultTypeInternal;
extern ActionServerResultDefaultTypeInternal _ActionServerResult_default_instance_;
class AllowableFlightModes;
class AllowableFlightModesDefaultTypeInternal;
extern AllowableFlightModesDefaultTypeInternal _AllowableFlightModes_default_instance_;
class ArmDisarm;
class ArmDisarmDefaultTypeInternal;
extern ArmDisarmDefaultTypeInternal _ArmDisarm_default_instance_;
class ArmDisarmResponse;
class ArmDisarmResponseDefaultTypeInternal;
extern ArmDisarmResponseDefaultTypeInternal _ArmDisarmResponse_default_instance_;
class FlightModeChangeResponse;
class FlightModeChangeResponseDefaultTypeInternal;
extern FlightModeChangeResponseDefaultTypeInternal _FlightModeChangeResponse_default_instance_;
class GetAllowableFlightModesRequest;
class GetAllowableFlightModesRequestDefaultTypeInternal;
extern GetAllowableFlightModesRequestDefaultTypeInternal
    _GetAllowableFlightModesRequest_default_instance_;
class GetAllowableFlightModesResponse;
class GetAllowableFlightModesResponseDefaultTypeInternal;
extern GetAllowableFlightModesResponseDefaultTypeInternal
    _GetAllowableFlightModesResponse_default_instance_;
class LandResponse;
class LandResponseDefaultTypeInternal;
extern LandResponseDefaultTypeInternal _LandResponse_default_instance_;
class RebootResponse;
class RebootResponseDefaultTypeInternal;
extern RebootResponseDefaultTypeInternal _RebootResponse_default_instance_;
class SetAllowTakeoffRequest;
class SetAllowTakeoffRequestDefaultTypeInternal;
extern SetAllowTakeoffRequestDefaultTypeInternal _SetAllowTakeoffRequest_default_instance_;
class SetAllowTakeoffResponse;
class SetAllowTakeoffResponseDefaultTypeInternal;
extern SetAllowTakeoffResponseDefaultTypeInternal _SetAllowTakeoffResponse_default_instance_;
class SetAllowableFlightModesRequest;
class SetAllowableFlightModesRequestDefaultTypeInternal;
extern SetAllowableFlightModesRequestDefaultTypeInternal
    _SetAllowableFlightModesRequest_default_instance_;
class SetAllowableFlightModesResponse;
class SetAllowableFlightModesResponseDefaultTypeInternal;
extern SetAllowableFlightModesResponseDefaultTypeInternal
    _SetAllowableFlightModesResponse_default_instance_;
class SetArmableRequest;
class SetArmableRequestDefaultTypeInternal;
extern SetArmableRequestDefaultTypeInternal _SetArmableRequest_default_instance_;
class SetArmableResponse;
class SetArmableResponseDefaultTypeInternal;
extern SetArmableResponseDefaultTypeInternal _SetArmableResponse_default_instance_;
class SetDisarmableRequest;
class SetDisarmableRequestDefaultTypeInternal;
extern SetDisarmableRequestDefaultTypeInternal _SetDisarmableRequest_default_instance_;
class SetDisarmableResponse;
class SetDisarmableResponseDefaultTypeInternal;
extern SetDisarmableResponseDefaultTypeInternal _SetDisarmableResponse_default_instance_;
class ShutdownResponse;
class ShutdownResponseDefaultTypeInternal;
extern ShutdownResponseDefaultTypeInternal _ShutdownResponse_default_instance_;
class SubscribeArmDisarmRequest;
class SubscribeArmDisarmRequestDefaultTypeInternal;
extern SubscribeArmDisarmRequestDefaultTypeInternal _SubscribeArmDisarmRequest_default_instance_;
class SubscribeFlightModeChangeRequest;
class SubscribeFlightModeChangeRequestDefaultTypeInternal;
extern SubscribeFlightModeChangeRequestDefaultTypeInternal
    _SubscribeFlightModeChangeRequest_default_instance_;
class SubscribeLandRequest;
class SubscribeLandRequestDefaultTypeInternal;
extern SubscribeLandRequestDefaultTypeInternal _SubscribeLandRequest_default_instance_;
class SubscribeRebootRequest;
class SubscribeRebootRequestDefaultTypeInternal;
extern SubscribeRebootRequestDefaultTypeInternal _SubscribeRebootRequest_default_instance_;
class SubscribeShutdownRequest;
class SubscribeShutdownRequestDefaultTypeInternal;
extern SubscribeShutdownRequestDefaultTypeInternal _SubscribeShutdownRequest_default_instance_;
class SubscribeTakeoffRequest;
class SubscribeTakeoffRequestDefaultTypeInternal;
extern SubscribeTakeoffRequestDefaultTypeInternal _SubscribeTakeoffRequest_default_instance_;
class SubscribeTerminateRequest;
class SubscribeTerminateRequestDefaultTypeInternal;
extern SubscribeTerminateRequestDefaultTypeInternal _SubscribeTerminateRequest_default_instance_;
class TakeoffResponse;
class TakeoffResponseDefaultTypeInternal;
extern TakeoffResponseDefaultTypeInternal _TakeoffResponse_default_instance_;
class TerminateResponse;
class TerminateResponseDefaultTypeInternal;
extern TerminateResponseDefaultTypeInternal _TerminateResponse_default_instance_;
} // namespace action_server
} // namespace rpc
} // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<>
::mavsdk::rpc::action_server::ActionServerResult*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::ActionServerResult>(Arena*);
template<>
::mavsdk::rpc::action_server::AllowableFlightModes*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::AllowableFlightModes>(Arena*);
template<>
::mavsdk::rpc::action_server::ArmDisarm*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::ArmDisarm>(Arena*);
template<>
::mavsdk::rpc::action_server::ArmDisarmResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::ArmDisarmResponse>(Arena*);
template<>
::mavsdk::rpc::action_server::FlightModeChangeResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::FlightModeChangeResponse>(Arena*);
template<>
::mavsdk::rpc::action_server::GetAllowableFlightModesRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::GetAllowableFlightModesRequest>(Arena*);
template<>
::mavsdk::rpc::action_server::GetAllowableFlightModesResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>(Arena*);
template<>
::mavsdk::rpc::action_server::LandResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::LandResponse>(Arena*);
template<>
::mavsdk::rpc::action_server::RebootResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::RebootResponse>(Arena*);
template<>
::mavsdk::rpc::action_server::SetAllowTakeoffRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SetAllowTakeoffRequest>(Arena*);
template<>
::mavsdk::rpc::action_server::SetAllowTakeoffResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SetAllowTakeoffResponse>(Arena*);
template<>
::mavsdk::rpc::action_server::SetAllowableFlightModesRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SetAllowableFlightModesRequest>(Arena*);
template<>
::mavsdk::rpc::action_server::SetAllowableFlightModesResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>(Arena*);
template<>
::mavsdk::rpc::action_server::SetArmableRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SetArmableRequest>(Arena*);
template<>
::mavsdk::rpc::action_server::SetArmableResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SetArmableResponse>(Arena*);
template<>
::mavsdk::rpc::action_server::SetDisarmableRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SetDisarmableRequest>(Arena*);
template<>
::mavsdk::rpc::action_server::SetDisarmableResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SetDisarmableResponse>(Arena*);
template<>
::mavsdk::rpc::action_server::ShutdownResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::ShutdownResponse>(Arena*);
template<>
::mavsdk::rpc::action_server::SubscribeArmDisarmRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SubscribeArmDisarmRequest>(Arena*);
template<>
::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest>(Arena*);
template<>
::mavsdk::rpc::action_server::SubscribeLandRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SubscribeLandRequest>(Arena*);
template<>
::mavsdk::rpc::action_server::SubscribeRebootRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SubscribeRebootRequest>(Arena*);
template<>
::mavsdk::rpc::action_server::SubscribeShutdownRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SubscribeShutdownRequest>(Arena*);
template<>
::mavsdk::rpc::action_server::SubscribeTakeoffRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SubscribeTakeoffRequest>(Arena*);
template<>
::mavsdk::rpc::action_server::SubscribeTerminateRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::SubscribeTerminateRequest>(Arena*);
template<>
::mavsdk::rpc::action_server::TakeoffResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::TakeoffResponse>(Arena*);
template<>
::mavsdk::rpc::action_server::TerminateResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::action_server::TerminateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace action_server {

enum ActionServerResult_Result : int {
    ActionServerResult_Result_RESULT_UNKNOWN = 0,
    ActionServerResult_Result_RESULT_SUCCESS = 1,
    ActionServerResult_Result_RESULT_NO_SYSTEM = 2,
    ActionServerResult_Result_RESULT_CONNECTION_ERROR = 3,
    ActionServerResult_Result_RESULT_BUSY = 4,
    ActionServerResult_Result_RESULT_COMMAND_DENIED = 5,
    ActionServerResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN = 6,
    ActionServerResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED = 7,
    ActionServerResult_Result_RESULT_TIMEOUT = 8,
    ActionServerResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN = 9,
    ActionServerResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT = 10,
    ActionServerResult_Result_RESULT_PARAMETER_ERROR = 11,
    ActionServerResult_Result_RESULT_NEXT = 12,
    ActionServerResult_Result_ActionServerResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    ActionServerResult_Result_ActionServerResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActionServerResult_Result_IsValid(int value);
constexpr ActionServerResult_Result ActionServerResult_Result_Result_MIN =
    ActionServerResult_Result_RESULT_UNKNOWN;
constexpr ActionServerResult_Result ActionServerResult_Result_Result_MAX =
    ActionServerResult_Result_RESULT_NEXT;
constexpr int ActionServerResult_Result_Result_ARRAYSIZE = ActionServerResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionServerResult_Result_descriptor();
template<typename T> inline const std::string& ActionServerResult_Result_Name(T enum_t_value)
{
    static_assert(
        ::std::is_same<T, ActionServerResult_Result>::value || ::std::is_integral<T>::value,
        "Incorrect type passed to function ActionServerResult_Result_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
        ActionServerResult_Result_descriptor(), enum_t_value);
}
inline bool
ActionServerResult_Result_Parse(const std::string& name, ActionServerResult_Result* value)
{
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionServerResult_Result>(
        ActionServerResult_Result_descriptor(), name, value);
}
enum FlightMode : int {
    FLIGHT_MODE_UNKNOWN = 0,
    FLIGHT_MODE_READY = 1,
    FLIGHT_MODE_TAKEOFF = 2,
    FLIGHT_MODE_HOLD = 3,
    FLIGHT_MODE_MISSION = 4,
    FLIGHT_MODE_RETURN_TO_LAUNCH = 5,
    FLIGHT_MODE_LAND = 6,
    FLIGHT_MODE_OFFBOARD = 7,
    FLIGHT_MODE_FOLLOW_ME = 8,
    FLIGHT_MODE_MANUAL = 9,
    FLIGHT_MODE_ALTCTL = 10,
    FLIGHT_MODE_POSCTL = 11,
    FLIGHT_MODE_ACRO = 12,
    FLIGHT_MODE_STABILIZED = 13,
    FlightMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    FlightMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FlightMode_IsValid(int value);
constexpr FlightMode FlightMode_MIN = FLIGHT_MODE_UNKNOWN;
constexpr FlightMode FlightMode_MAX = FLIGHT_MODE_STABILIZED;
constexpr int FlightMode_ARRAYSIZE = FlightMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlightMode_descriptor();
template<typename T> inline const std::string& FlightMode_Name(T enum_t_value)
{
    static_assert(
        ::std::is_same<T, FlightMode>::value || ::std::is_integral<T>::value,
        "Incorrect type passed to function FlightMode_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(FlightMode_descriptor(), enum_t_value);
}
inline bool FlightMode_Parse(const std::string& name, FlightMode* value)
{
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FlightMode>(
        FlightMode_descriptor(), name, value);
}
// ===================================================================

class SetAllowTakeoffRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SetAllowTakeoffRequest)
                                                                                       */
{
public:
    inline SetAllowTakeoffRequest() : SetAllowTakeoffRequest(nullptr){};
    virtual ~SetAllowTakeoffRequest();

    SetAllowTakeoffRequest(const SetAllowTakeoffRequest& from);
    SetAllowTakeoffRequest(SetAllowTakeoffRequest&& from) noexcept : SetAllowTakeoffRequest()
    {
        *this = ::std::move(from);
    }

    inline SetAllowTakeoffRequest& operator=(const SetAllowTakeoffRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SetAllowTakeoffRequest& operator=(SetAllowTakeoffRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SetAllowTakeoffRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SetAllowTakeoffRequest* internal_default_instance()
    {
        return reinterpret_cast<const SetAllowTakeoffRequest*>(
            &_SetAllowTakeoffRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;

    friend void swap(SetAllowTakeoffRequest& a, SetAllowTakeoffRequest& b) { a.Swap(&b); }
    inline void Swap(SetAllowTakeoffRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetAllowTakeoffRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetAllowTakeoffRequest* New() const final
    {
        return CreateMaybeMessage<SetAllowTakeoffRequest>(nullptr);
    }

    SetAllowTakeoffRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SetAllowTakeoffRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SetAllowTakeoffRequest& from);
    void MergeFrom(const SetAllowTakeoffRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetAllowTakeoffRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SetAllowTakeoffRequest";
    }

protected:
    explicit SetAllowTakeoffRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kAllowTakeoffFieldNumber = 1,
    };
    // bool allow_takeoff = 1;
    void clear_allow_takeoff();
    bool allow_takeoff() const;
    void set_allow_takeoff(bool value);

private:
    bool _internal_allow_takeoff() const;
    void _internal_set_allow_takeoff(bool value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SetAllowTakeoffRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    bool allow_takeoff_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetArmableRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SetArmableRequest)
                                                                                  */
{
public:
    inline SetArmableRequest() : SetArmableRequest(nullptr){};
    virtual ~SetArmableRequest();

    SetArmableRequest(const SetArmableRequest& from);
    SetArmableRequest(SetArmableRequest&& from) noexcept : SetArmableRequest()
    {
        *this = ::std::move(from);
    }

    inline SetArmableRequest& operator=(const SetArmableRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SetArmableRequest& operator=(SetArmableRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SetArmableRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SetArmableRequest* internal_default_instance()
    {
        return reinterpret_cast<const SetArmableRequest*>(&_SetArmableRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;

    friend void swap(SetArmableRequest& a, SetArmableRequest& b) { a.Swap(&b); }
    inline void Swap(SetArmableRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetArmableRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetArmableRequest* New() const final
    {
        return CreateMaybeMessage<SetArmableRequest>(nullptr);
    }

    SetArmableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SetArmableRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SetArmableRequest& from);
    void MergeFrom(const SetArmableRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetArmableRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SetArmableRequest";
    }

protected:
    explicit SetArmableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kArmableFieldNumber = 1,
        kForceArmableFieldNumber = 2,
    };
    // bool armable = 1;
    void clear_armable();
    bool armable() const;
    void set_armable(bool value);

private:
    bool _internal_armable() const;
    void _internal_set_armable(bool value);

public:
    // bool force_armable = 2;
    void clear_force_armable();
    bool force_armable() const;
    void set_force_armable(bool value);

private:
    bool _internal_force_armable() const;
    void _internal_set_force_armable(bool value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SetArmableRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    bool armable_;
    bool force_armable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetDisarmableRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SetDisarmableRequest)
                                                                                     */
{
public:
    inline SetDisarmableRequest() : SetDisarmableRequest(nullptr){};
    virtual ~SetDisarmableRequest();

    SetDisarmableRequest(const SetDisarmableRequest& from);
    SetDisarmableRequest(SetDisarmableRequest&& from) noexcept : SetDisarmableRequest()
    {
        *this = ::std::move(from);
    }

    inline SetDisarmableRequest& operator=(const SetDisarmableRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SetDisarmableRequest& operator=(SetDisarmableRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SetDisarmableRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SetDisarmableRequest* internal_default_instance()
    {
        return reinterpret_cast<const SetDisarmableRequest*>(
            &_SetDisarmableRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 2;

    friend void swap(SetDisarmableRequest& a, SetDisarmableRequest& b) { a.Swap(&b); }
    inline void Swap(SetDisarmableRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetDisarmableRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetDisarmableRequest* New() const final
    {
        return CreateMaybeMessage<SetDisarmableRequest>(nullptr);
    }

    SetDisarmableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SetDisarmableRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SetDisarmableRequest& from);
    void MergeFrom(const SetDisarmableRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetDisarmableRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SetDisarmableRequest";
    }

protected:
    explicit SetDisarmableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kDisarmableFieldNumber = 1,
        kForceDisarmableFieldNumber = 2,
    };
    // bool disarmable = 1;
    void clear_disarmable();
    bool disarmable() const;
    void set_disarmable(bool value);

private:
    bool _internal_disarmable() const;
    void _internal_set_disarmable(bool value);

public:
    // bool force_disarmable = 2;
    void clear_force_disarmable();
    bool force_disarmable() const;
    void set_force_disarmable(bool value);

private:
    bool _internal_force_disarmable() const;
    void _internal_set_force_disarmable(bool value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SetDisarmableRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    bool disarmable_;
    bool force_disarmable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetAllowableFlightModesRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SetAllowableFlightModesRequest)
                                                                                               */
{
public:
    inline SetAllowableFlightModesRequest() : SetAllowableFlightModesRequest(nullptr){};
    virtual ~SetAllowableFlightModesRequest();

    SetAllowableFlightModesRequest(const SetAllowableFlightModesRequest& from);
    SetAllowableFlightModesRequest(SetAllowableFlightModesRequest&& from) noexcept :
        SetAllowableFlightModesRequest()
    {
        *this = ::std::move(from);
    }

    inline SetAllowableFlightModesRequest& operator=(const SetAllowableFlightModesRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SetAllowableFlightModesRequest& operator=(SetAllowableFlightModesRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SetAllowableFlightModesRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SetAllowableFlightModesRequest* internal_default_instance()
    {
        return reinterpret_cast<const SetAllowableFlightModesRequest*>(
            &_SetAllowableFlightModesRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 3;

    friend void swap(SetAllowableFlightModesRequest& a, SetAllowableFlightModesRequest& b)
    {
        a.Swap(&b);
    }
    inline void Swap(SetAllowableFlightModesRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetAllowableFlightModesRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetAllowableFlightModesRequest* New() const final
    {
        return CreateMaybeMessage<SetAllowableFlightModesRequest>(nullptr);
    }

    SetAllowableFlightModesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SetAllowableFlightModesRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SetAllowableFlightModesRequest& from);
    void MergeFrom(const SetAllowableFlightModesRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetAllowableFlightModesRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SetAllowableFlightModesRequest";
    }

protected:
    explicit SetAllowableFlightModesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kFlightModesFieldNumber = 1,
    };
    // .mavsdk.rpc.action_server.AllowableFlightModes flight_modes = 1;
    bool has_flight_modes() const;

private:
    bool _internal_has_flight_modes() const;

public:
    void clear_flight_modes();
    const ::mavsdk::rpc::action_server::AllowableFlightModes& flight_modes() const;
    ::mavsdk::rpc::action_server::AllowableFlightModes* release_flight_modes();
    ::mavsdk::rpc::action_server::AllowableFlightModes* mutable_flight_modes();
    void
    set_allocated_flight_modes(::mavsdk::rpc::action_server::AllowableFlightModes* flight_modes);

private:
    const ::mavsdk::rpc::action_server::AllowableFlightModes& _internal_flight_modes() const;
    ::mavsdk::rpc::action_server::AllowableFlightModes* _internal_mutable_flight_modes();

public:
    void unsafe_arena_set_allocated_flight_modes(
        ::mavsdk::rpc::action_server::AllowableFlightModes* flight_modes);
    ::mavsdk::rpc::action_server::AllowableFlightModes* unsafe_arena_release_flight_modes();

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SetAllowableFlightModesRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::action_server::AllowableFlightModes* flight_modes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GetAllowableFlightModesRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.GetAllowableFlightModesRequest)
                                                                                               */
{
public:
    inline GetAllowableFlightModesRequest() : GetAllowableFlightModesRequest(nullptr){};
    virtual ~GetAllowableFlightModesRequest();

    GetAllowableFlightModesRequest(const GetAllowableFlightModesRequest& from);
    GetAllowableFlightModesRequest(GetAllowableFlightModesRequest&& from) noexcept :
        GetAllowableFlightModesRequest()
    {
        *this = ::std::move(from);
    }

    inline GetAllowableFlightModesRequest& operator=(const GetAllowableFlightModesRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline GetAllowableFlightModesRequest& operator=(GetAllowableFlightModesRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const GetAllowableFlightModesRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const GetAllowableFlightModesRequest* internal_default_instance()
    {
        return reinterpret_cast<const GetAllowableFlightModesRequest*>(
            &_GetAllowableFlightModesRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 4;

    friend void swap(GetAllowableFlightModesRequest& a, GetAllowableFlightModesRequest& b)
    {
        a.Swap(&b);
    }
    inline void Swap(GetAllowableFlightModesRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(GetAllowableFlightModesRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline GetAllowableFlightModesRequest* New() const final
    {
        return CreateMaybeMessage<GetAllowableFlightModesRequest>(nullptr);
    }

    GetAllowableFlightModesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<GetAllowableFlightModesRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const GetAllowableFlightModesRequest& from);
    void MergeFrom(const GetAllowableFlightModesRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(GetAllowableFlightModesRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.GetAllowableFlightModesRequest";
    }

protected:
    explicit GetAllowableFlightModesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.GetAllowableFlightModesRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeArmDisarmRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SubscribeArmDisarmRequest)
                                                                                          */
{
public:
    inline SubscribeArmDisarmRequest() : SubscribeArmDisarmRequest(nullptr){};
    virtual ~SubscribeArmDisarmRequest();

    SubscribeArmDisarmRequest(const SubscribeArmDisarmRequest& from);
    SubscribeArmDisarmRequest(SubscribeArmDisarmRequest&& from) noexcept :
        SubscribeArmDisarmRequest()
    {
        *this = ::std::move(from);
    }

    inline SubscribeArmDisarmRequest& operator=(const SubscribeArmDisarmRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SubscribeArmDisarmRequest& operator=(SubscribeArmDisarmRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SubscribeArmDisarmRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SubscribeArmDisarmRequest* internal_default_instance()
    {
        return reinterpret_cast<const SubscribeArmDisarmRequest*>(
            &_SubscribeArmDisarmRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 5;

    friend void swap(SubscribeArmDisarmRequest& a, SubscribeArmDisarmRequest& b) { a.Swap(&b); }
    inline void Swap(SubscribeArmDisarmRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SubscribeArmDisarmRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SubscribeArmDisarmRequest* New() const final
    {
        return CreateMaybeMessage<SubscribeArmDisarmRequest>(nullptr);
    }

    SubscribeArmDisarmRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SubscribeArmDisarmRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SubscribeArmDisarmRequest& from);
    void MergeFrom(const SubscribeArmDisarmRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SubscribeArmDisarmRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SubscribeArmDisarmRequest";
    }

protected:
    explicit SubscribeArmDisarmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SubscribeArmDisarmRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeFlightModeChangeRequest PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SubscribeFlightModeChangeRequest)
                                               */
{
public:
    inline SubscribeFlightModeChangeRequest() : SubscribeFlightModeChangeRequest(nullptr){};
    virtual ~SubscribeFlightModeChangeRequest();

    SubscribeFlightModeChangeRequest(const SubscribeFlightModeChangeRequest& from);
    SubscribeFlightModeChangeRequest(SubscribeFlightModeChangeRequest&& from) noexcept :
        SubscribeFlightModeChangeRequest()
    {
        *this = ::std::move(from);
    }

    inline SubscribeFlightModeChangeRequest& operator=(const SubscribeFlightModeChangeRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SubscribeFlightModeChangeRequest&
    operator=(SubscribeFlightModeChangeRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SubscribeFlightModeChangeRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SubscribeFlightModeChangeRequest* internal_default_instance()
    {
        return reinterpret_cast<const SubscribeFlightModeChangeRequest*>(
            &_SubscribeFlightModeChangeRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 6;

    friend void swap(SubscribeFlightModeChangeRequest& a, SubscribeFlightModeChangeRequest& b)
    {
        a.Swap(&b);
    }
    inline void Swap(SubscribeFlightModeChangeRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SubscribeFlightModeChangeRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SubscribeFlightModeChangeRequest* New() const final
    {
        return CreateMaybeMessage<SubscribeFlightModeChangeRequest>(nullptr);
    }

    SubscribeFlightModeChangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SubscribeFlightModeChangeRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SubscribeFlightModeChangeRequest& from);
    void MergeFrom(const SubscribeFlightModeChangeRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SubscribeFlightModeChangeRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SubscribeFlightModeChangeRequest";
    }

protected:
    explicit SubscribeFlightModeChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SubscribeFlightModeChangeRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTakeoffRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SubscribeTakeoffRequest)
                                                                                        */
{
public:
    inline SubscribeTakeoffRequest() : SubscribeTakeoffRequest(nullptr){};
    virtual ~SubscribeTakeoffRequest();

    SubscribeTakeoffRequest(const SubscribeTakeoffRequest& from);
    SubscribeTakeoffRequest(SubscribeTakeoffRequest&& from) noexcept : SubscribeTakeoffRequest()
    {
        *this = ::std::move(from);
    }

    inline SubscribeTakeoffRequest& operator=(const SubscribeTakeoffRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SubscribeTakeoffRequest& operator=(SubscribeTakeoffRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SubscribeTakeoffRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SubscribeTakeoffRequest* internal_default_instance()
    {
        return reinterpret_cast<const SubscribeTakeoffRequest*>(
            &_SubscribeTakeoffRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 7;

    friend void swap(SubscribeTakeoffRequest& a, SubscribeTakeoffRequest& b) { a.Swap(&b); }
    inline void Swap(SubscribeTakeoffRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SubscribeTakeoffRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SubscribeTakeoffRequest* New() const final
    {
        return CreateMaybeMessage<SubscribeTakeoffRequest>(nullptr);
    }

    SubscribeTakeoffRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SubscribeTakeoffRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SubscribeTakeoffRequest& from);
    void MergeFrom(const SubscribeTakeoffRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SubscribeTakeoffRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SubscribeTakeoffRequest";
    }

protected:
    explicit SubscribeTakeoffRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SubscribeTakeoffRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeLandRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SubscribeLandRequest)
                                                                                     */
{
public:
    inline SubscribeLandRequest() : SubscribeLandRequest(nullptr){};
    virtual ~SubscribeLandRequest();

    SubscribeLandRequest(const SubscribeLandRequest& from);
    SubscribeLandRequest(SubscribeLandRequest&& from) noexcept : SubscribeLandRequest()
    {
        *this = ::std::move(from);
    }

    inline SubscribeLandRequest& operator=(const SubscribeLandRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SubscribeLandRequest& operator=(SubscribeLandRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SubscribeLandRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SubscribeLandRequest* internal_default_instance()
    {
        return reinterpret_cast<const SubscribeLandRequest*>(
            &_SubscribeLandRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 8;

    friend void swap(SubscribeLandRequest& a, SubscribeLandRequest& b) { a.Swap(&b); }
    inline void Swap(SubscribeLandRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SubscribeLandRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SubscribeLandRequest* New() const final
    {
        return CreateMaybeMessage<SubscribeLandRequest>(nullptr);
    }

    SubscribeLandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SubscribeLandRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SubscribeLandRequest& from);
    void MergeFrom(const SubscribeLandRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SubscribeLandRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SubscribeLandRequest";
    }

protected:
    explicit SubscribeLandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SubscribeLandRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeRebootRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SubscribeRebootRequest)
                                                                                       */
{
public:
    inline SubscribeRebootRequest() : SubscribeRebootRequest(nullptr){};
    virtual ~SubscribeRebootRequest();

    SubscribeRebootRequest(const SubscribeRebootRequest& from);
    SubscribeRebootRequest(SubscribeRebootRequest&& from) noexcept : SubscribeRebootRequest()
    {
        *this = ::std::move(from);
    }

    inline SubscribeRebootRequest& operator=(const SubscribeRebootRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SubscribeRebootRequest& operator=(SubscribeRebootRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SubscribeRebootRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SubscribeRebootRequest* internal_default_instance()
    {
        return reinterpret_cast<const SubscribeRebootRequest*>(
            &_SubscribeRebootRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 9;

    friend void swap(SubscribeRebootRequest& a, SubscribeRebootRequest& b) { a.Swap(&b); }
    inline void Swap(SubscribeRebootRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SubscribeRebootRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SubscribeRebootRequest* New() const final
    {
        return CreateMaybeMessage<SubscribeRebootRequest>(nullptr);
    }

    SubscribeRebootRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SubscribeRebootRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SubscribeRebootRequest& from);
    void MergeFrom(const SubscribeRebootRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SubscribeRebootRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SubscribeRebootRequest";
    }

protected:
    explicit SubscribeRebootRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SubscribeRebootRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeShutdownRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SubscribeShutdownRequest)
                                                                                         */
{
public:
    inline SubscribeShutdownRequest() : SubscribeShutdownRequest(nullptr){};
    virtual ~SubscribeShutdownRequest();

    SubscribeShutdownRequest(const SubscribeShutdownRequest& from);
    SubscribeShutdownRequest(SubscribeShutdownRequest&& from) noexcept : SubscribeShutdownRequest()
    {
        *this = ::std::move(from);
    }

    inline SubscribeShutdownRequest& operator=(const SubscribeShutdownRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SubscribeShutdownRequest& operator=(SubscribeShutdownRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SubscribeShutdownRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SubscribeShutdownRequest* internal_default_instance()
    {
        return reinterpret_cast<const SubscribeShutdownRequest*>(
            &_SubscribeShutdownRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 10;

    friend void swap(SubscribeShutdownRequest& a, SubscribeShutdownRequest& b) { a.Swap(&b); }
    inline void Swap(SubscribeShutdownRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SubscribeShutdownRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SubscribeShutdownRequest* New() const final
    {
        return CreateMaybeMessage<SubscribeShutdownRequest>(nullptr);
    }

    SubscribeShutdownRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SubscribeShutdownRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SubscribeShutdownRequest& from);
    void MergeFrom(const SubscribeShutdownRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SubscribeShutdownRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SubscribeShutdownRequest";
    }

protected:
    explicit SubscribeShutdownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SubscribeShutdownRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTerminateRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SubscribeTerminateRequest)
                                                                                          */
{
public:
    inline SubscribeTerminateRequest() : SubscribeTerminateRequest(nullptr){};
    virtual ~SubscribeTerminateRequest();

    SubscribeTerminateRequest(const SubscribeTerminateRequest& from);
    SubscribeTerminateRequest(SubscribeTerminateRequest&& from) noexcept :
        SubscribeTerminateRequest()
    {
        *this = ::std::move(from);
    }

    inline SubscribeTerminateRequest& operator=(const SubscribeTerminateRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SubscribeTerminateRequest& operator=(SubscribeTerminateRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SubscribeTerminateRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SubscribeTerminateRequest* internal_default_instance()
    {
        return reinterpret_cast<const SubscribeTerminateRequest*>(
            &_SubscribeTerminateRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 11;

    friend void swap(SubscribeTerminateRequest& a, SubscribeTerminateRequest& b) { a.Swap(&b); }
    inline void Swap(SubscribeTerminateRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SubscribeTerminateRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SubscribeTerminateRequest* New() const final
    {
        return CreateMaybeMessage<SubscribeTerminateRequest>(nullptr);
    }

    SubscribeTerminateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SubscribeTerminateRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SubscribeTerminateRequest& from);
    void MergeFrom(const SubscribeTerminateRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SubscribeTerminateRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SubscribeTerminateRequest";
    }

protected:
    explicit SubscribeTerminateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SubscribeTerminateRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ArmDisarmResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.ArmDisarmResponse)
                                                                                  */
{
public:
    inline ArmDisarmResponse() : ArmDisarmResponse(nullptr){};
    virtual ~ArmDisarmResponse();

    ArmDisarmResponse(const ArmDisarmResponse& from);
    ArmDisarmResponse(ArmDisarmResponse&& from) noexcept : ArmDisarmResponse()
    {
        *this = ::std::move(from);
    }

    inline ArmDisarmResponse& operator=(const ArmDisarmResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ArmDisarmResponse& operator=(ArmDisarmResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const ArmDisarmResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const ArmDisarmResponse* internal_default_instance()
    {
        return reinterpret_cast<const ArmDisarmResponse*>(&_ArmDisarmResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 12;

    friend void swap(ArmDisarmResponse& a, ArmDisarmResponse& b) { a.Swap(&b); }
    inline void Swap(ArmDisarmResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ArmDisarmResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ArmDisarmResponse* New() const final
    {
        return CreateMaybeMessage<ArmDisarmResponse>(nullptr);
    }

    ArmDisarmResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<ArmDisarmResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const ArmDisarmResponse& from);
    void MergeFrom(const ArmDisarmResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ArmDisarmResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.ArmDisarmResponse";
    }

protected:
    explicit ArmDisarmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionServerResultFieldNumber = 1,
        kArmFieldNumber = 2,
    };
    // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
    bool has_action_server_result() const;

private:
    bool _internal_has_action_server_result() const;

public:
    void clear_action_server_result();
    const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* release_action_server_result();
    ::mavsdk::rpc::action_server::ActionServerResult* mutable_action_server_result();
    void set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);

private:
    const ::mavsdk::rpc::action_server::ActionServerResult& _internal_action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* _internal_mutable_action_server_result();

public:
    void unsafe_arena_set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);
    ::mavsdk::rpc::action_server::ActionServerResult* unsafe_arena_release_action_server_result();

    // .mavsdk.rpc.action_server.ArmDisarm arm = 2;
    bool has_arm() const;

private:
    bool _internal_has_arm() const;

public:
    void clear_arm();
    const ::mavsdk::rpc::action_server::ArmDisarm& arm() const;
    ::mavsdk::rpc::action_server::ArmDisarm* release_arm();
    ::mavsdk::rpc::action_server::ArmDisarm* mutable_arm();
    void set_allocated_arm(::mavsdk::rpc::action_server::ArmDisarm* arm);

private:
    const ::mavsdk::rpc::action_server::ArmDisarm& _internal_arm() const;
    ::mavsdk::rpc::action_server::ArmDisarm* _internal_mutable_arm();

public:
    void unsafe_arena_set_allocated_arm(::mavsdk::rpc::action_server::ArmDisarm* arm);
    ::mavsdk::rpc::action_server::ArmDisarm* unsafe_arena_release_arm();

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.ArmDisarmResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result_;
    ::mavsdk::rpc::action_server::ArmDisarm* arm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class FlightModeChangeResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.FlightModeChangeResponse)
                                                                                         */
{
public:
    inline FlightModeChangeResponse() : FlightModeChangeResponse(nullptr){};
    virtual ~FlightModeChangeResponse();

    FlightModeChangeResponse(const FlightModeChangeResponse& from);
    FlightModeChangeResponse(FlightModeChangeResponse&& from) noexcept : FlightModeChangeResponse()
    {
        *this = ::std::move(from);
    }

    inline FlightModeChangeResponse& operator=(const FlightModeChangeResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline FlightModeChangeResponse& operator=(FlightModeChangeResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const FlightModeChangeResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const FlightModeChangeResponse* internal_default_instance()
    {
        return reinterpret_cast<const FlightModeChangeResponse*>(
            &_FlightModeChangeResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 13;

    friend void swap(FlightModeChangeResponse& a, FlightModeChangeResponse& b) { a.Swap(&b); }
    inline void Swap(FlightModeChangeResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(FlightModeChangeResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline FlightModeChangeResponse* New() const final
    {
        return CreateMaybeMessage<FlightModeChangeResponse>(nullptr);
    }

    FlightModeChangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<FlightModeChangeResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const FlightModeChangeResponse& from);
    void MergeFrom(const FlightModeChangeResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(FlightModeChangeResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.FlightModeChangeResponse";
    }

protected:
    explicit FlightModeChangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionServerResultFieldNumber = 1,
        kFlightModeFieldNumber = 2,
    };
    // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
    bool has_action_server_result() const;

private:
    bool _internal_has_action_server_result() const;

public:
    void clear_action_server_result();
    const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* release_action_server_result();
    ::mavsdk::rpc::action_server::ActionServerResult* mutable_action_server_result();
    void set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);

private:
    const ::mavsdk::rpc::action_server::ActionServerResult& _internal_action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* _internal_mutable_action_server_result();

public:
    void unsafe_arena_set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);
    ::mavsdk::rpc::action_server::ActionServerResult* unsafe_arena_release_action_server_result();

    // .mavsdk.rpc.action_server.FlightMode flight_mode = 2;
    void clear_flight_mode();
    ::mavsdk::rpc::action_server::FlightMode flight_mode() const;
    void set_flight_mode(::mavsdk::rpc::action_server::FlightMode value);

private:
    ::mavsdk::rpc::action_server::FlightMode _internal_flight_mode() const;
    void _internal_set_flight_mode(::mavsdk::rpc::action_server::FlightMode value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.FlightModeChangeResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result_;
    int flight_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TakeoffResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.TakeoffResponse)
                                                                                */
{
public:
    inline TakeoffResponse() : TakeoffResponse(nullptr){};
    virtual ~TakeoffResponse();

    TakeoffResponse(const TakeoffResponse& from);
    TakeoffResponse(TakeoffResponse&& from) noexcept : TakeoffResponse()
    {
        *this = ::std::move(from);
    }

    inline TakeoffResponse& operator=(const TakeoffResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline TakeoffResponse& operator=(TakeoffResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const TakeoffResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const TakeoffResponse* internal_default_instance()
    {
        return reinterpret_cast<const TakeoffResponse*>(&_TakeoffResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 14;

    friend void swap(TakeoffResponse& a, TakeoffResponse& b) { a.Swap(&b); }
    inline void Swap(TakeoffResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(TakeoffResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline TakeoffResponse* New() const final
    {
        return CreateMaybeMessage<TakeoffResponse>(nullptr);
    }

    TakeoffResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<TakeoffResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const TakeoffResponse& from);
    void MergeFrom(const TakeoffResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(TakeoffResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.TakeoffResponse";
    }

protected:
    explicit TakeoffResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionServerResultFieldNumber = 1,
        kTakeoffFieldNumber = 2,
    };
    // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
    bool has_action_server_result() const;

private:
    bool _internal_has_action_server_result() const;

public:
    void clear_action_server_result();
    const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* release_action_server_result();
    ::mavsdk::rpc::action_server::ActionServerResult* mutable_action_server_result();
    void set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);

private:
    const ::mavsdk::rpc::action_server::ActionServerResult& _internal_action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* _internal_mutable_action_server_result();

public:
    void unsafe_arena_set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);
    ::mavsdk::rpc::action_server::ActionServerResult* unsafe_arena_release_action_server_result();

    // bool takeoff = 2;
    void clear_takeoff();
    bool takeoff() const;
    void set_takeoff(bool value);

private:
    bool _internal_takeoff() const;
    void _internal_set_takeoff(bool value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.TakeoffResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result_;
    bool takeoff_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class LandResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.LandResponse)
                                                                             */
{
public:
    inline LandResponse() : LandResponse(nullptr){};
    virtual ~LandResponse();

    LandResponse(const LandResponse& from);
    LandResponse(LandResponse&& from) noexcept : LandResponse() { *this = ::std::move(from); }

    inline LandResponse& operator=(const LandResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline LandResponse& operator=(LandResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const LandResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const LandResponse* internal_default_instance()
    {
        return reinterpret_cast<const LandResponse*>(&_LandResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 15;

    friend void swap(LandResponse& a, LandResponse& b) { a.Swap(&b); }
    inline void Swap(LandResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(LandResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline LandResponse* New() const final { return CreateMaybeMessage<LandResponse>(nullptr); }

    LandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<LandResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const LandResponse& from);
    void MergeFrom(const LandResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(LandResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.LandResponse";
    }

protected:
    explicit LandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionServerResultFieldNumber = 1,
        kLandFieldNumber = 2,
    };
    // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
    bool has_action_server_result() const;

private:
    bool _internal_has_action_server_result() const;

public:
    void clear_action_server_result();
    const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* release_action_server_result();
    ::mavsdk::rpc::action_server::ActionServerResult* mutable_action_server_result();
    void set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);

private:
    const ::mavsdk::rpc::action_server::ActionServerResult& _internal_action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* _internal_mutable_action_server_result();

public:
    void unsafe_arena_set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);
    ::mavsdk::rpc::action_server::ActionServerResult* unsafe_arena_release_action_server_result();

    // bool land = 2;
    void clear_land();
    bool land() const;
    void set_land(bool value);

private:
    bool _internal_land() const;
    void _internal_set_land(bool value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.LandResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result_;
    bool land_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RebootResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.RebootResponse)
                                                                               */
{
public:
    inline RebootResponse() : RebootResponse(nullptr){};
    virtual ~RebootResponse();

    RebootResponse(const RebootResponse& from);
    RebootResponse(RebootResponse&& from) noexcept : RebootResponse() { *this = ::std::move(from); }

    inline RebootResponse& operator=(const RebootResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline RebootResponse& operator=(RebootResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const RebootResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const RebootResponse* internal_default_instance()
    {
        return reinterpret_cast<const RebootResponse*>(&_RebootResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 16;

    friend void swap(RebootResponse& a, RebootResponse& b) { a.Swap(&b); }
    inline void Swap(RebootResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(RebootResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline RebootResponse* New() const final { return CreateMaybeMessage<RebootResponse>(nullptr); }

    RebootResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<RebootResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const RebootResponse& from);
    void MergeFrom(const RebootResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(RebootResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.RebootResponse";
    }

protected:
    explicit RebootResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionServerResultFieldNumber = 1,
        kRebootFieldNumber = 2,
    };
    // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
    bool has_action_server_result() const;

private:
    bool _internal_has_action_server_result() const;

public:
    void clear_action_server_result();
    const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* release_action_server_result();
    ::mavsdk::rpc::action_server::ActionServerResult* mutable_action_server_result();
    void set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);

private:
    const ::mavsdk::rpc::action_server::ActionServerResult& _internal_action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* _internal_mutable_action_server_result();

public:
    void unsafe_arena_set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);
    ::mavsdk::rpc::action_server::ActionServerResult* unsafe_arena_release_action_server_result();

    // bool reboot = 2;
    void clear_reboot();
    bool reboot() const;
    void set_reboot(bool value);

private:
    bool _internal_reboot() const;
    void _internal_set_reboot(bool value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.RebootResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result_;
    bool reboot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ShutdownResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.ShutdownResponse)
                                                                                 */
{
public:
    inline ShutdownResponse() : ShutdownResponse(nullptr){};
    virtual ~ShutdownResponse();

    ShutdownResponse(const ShutdownResponse& from);
    ShutdownResponse(ShutdownResponse&& from) noexcept : ShutdownResponse()
    {
        *this = ::std::move(from);
    }

    inline ShutdownResponse& operator=(const ShutdownResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ShutdownResponse& operator=(ShutdownResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const ShutdownResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const ShutdownResponse* internal_default_instance()
    {
        return reinterpret_cast<const ShutdownResponse*>(&_ShutdownResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 17;

    friend void swap(ShutdownResponse& a, ShutdownResponse& b) { a.Swap(&b); }
    inline void Swap(ShutdownResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ShutdownResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ShutdownResponse* New() const final
    {
        return CreateMaybeMessage<ShutdownResponse>(nullptr);
    }

    ShutdownResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<ShutdownResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const ShutdownResponse& from);
    void MergeFrom(const ShutdownResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ShutdownResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.ShutdownResponse";
    }

protected:
    explicit ShutdownResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionServerResultFieldNumber = 1,
        kShutdownFieldNumber = 2,
    };
    // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
    bool has_action_server_result() const;

private:
    bool _internal_has_action_server_result() const;

public:
    void clear_action_server_result();
    const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* release_action_server_result();
    ::mavsdk::rpc::action_server::ActionServerResult* mutable_action_server_result();
    void set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);

private:
    const ::mavsdk::rpc::action_server::ActionServerResult& _internal_action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* _internal_mutable_action_server_result();

public:
    void unsafe_arena_set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);
    ::mavsdk::rpc::action_server::ActionServerResult* unsafe_arena_release_action_server_result();

    // bool shutdown = 2;
    void clear_shutdown();
    bool shutdown() const;
    void set_shutdown(bool value);

private:
    bool _internal_shutdown() const;
    void _internal_set_shutdown(bool value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.ShutdownResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result_;
    bool shutdown_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TerminateResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.TerminateResponse)
                                                                                  */
{
public:
    inline TerminateResponse() : TerminateResponse(nullptr){};
    virtual ~TerminateResponse();

    TerminateResponse(const TerminateResponse& from);
    TerminateResponse(TerminateResponse&& from) noexcept : TerminateResponse()
    {
        *this = ::std::move(from);
    }

    inline TerminateResponse& operator=(const TerminateResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline TerminateResponse& operator=(TerminateResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const TerminateResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const TerminateResponse* internal_default_instance()
    {
        return reinterpret_cast<const TerminateResponse*>(&_TerminateResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 18;

    friend void swap(TerminateResponse& a, TerminateResponse& b) { a.Swap(&b); }
    inline void Swap(TerminateResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(TerminateResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline TerminateResponse* New() const final
    {
        return CreateMaybeMessage<TerminateResponse>(nullptr);
    }

    TerminateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<TerminateResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const TerminateResponse& from);
    void MergeFrom(const TerminateResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(TerminateResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.TerminateResponse";
    }

protected:
    explicit TerminateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionServerResultFieldNumber = 1,
        kTerminateFieldNumber = 2,
    };
    // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
    bool has_action_server_result() const;

private:
    bool _internal_has_action_server_result() const;

public:
    void clear_action_server_result();
    const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* release_action_server_result();
    ::mavsdk::rpc::action_server::ActionServerResult* mutable_action_server_result();
    void set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);

private:
    const ::mavsdk::rpc::action_server::ActionServerResult& _internal_action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* _internal_mutable_action_server_result();

public:
    void unsafe_arena_set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);
    ::mavsdk::rpc::action_server::ActionServerResult* unsafe_arena_release_action_server_result();

    // bool terminate = 2;
    void clear_terminate();
    bool terminate() const;
    void set_terminate(bool value);

private:
    bool _internal_terminate() const;
    void _internal_set_terminate(bool value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.TerminateResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result_;
    bool terminate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetArmableResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SetArmableResponse)
                                                                                   */
{
public:
    inline SetArmableResponse() : SetArmableResponse(nullptr){};
    virtual ~SetArmableResponse();

    SetArmableResponse(const SetArmableResponse& from);
    SetArmableResponse(SetArmableResponse&& from) noexcept : SetArmableResponse()
    {
        *this = ::std::move(from);
    }

    inline SetArmableResponse& operator=(const SetArmableResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SetArmableResponse& operator=(SetArmableResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SetArmableResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SetArmableResponse* internal_default_instance()
    {
        return reinterpret_cast<const SetArmableResponse*>(&_SetArmableResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 19;

    friend void swap(SetArmableResponse& a, SetArmableResponse& b) { a.Swap(&b); }
    inline void Swap(SetArmableResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetArmableResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetArmableResponse* New() const final
    {
        return CreateMaybeMessage<SetArmableResponse>(nullptr);
    }

    SetArmableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SetArmableResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SetArmableResponse& from);
    void MergeFrom(const SetArmableResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetArmableResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SetArmableResponse";
    }

protected:
    explicit SetArmableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionServerResultFieldNumber = 1,
    };
    // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
    bool has_action_server_result() const;

private:
    bool _internal_has_action_server_result() const;

public:
    void clear_action_server_result();
    const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* release_action_server_result();
    ::mavsdk::rpc::action_server::ActionServerResult* mutable_action_server_result();
    void set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);

private:
    const ::mavsdk::rpc::action_server::ActionServerResult& _internal_action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* _internal_mutable_action_server_result();

public:
    void unsafe_arena_set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);
    ::mavsdk::rpc::action_server::ActionServerResult* unsafe_arena_release_action_server_result();

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SetArmableResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetDisarmableResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SetDisarmableResponse)
                                                                                      */
{
public:
    inline SetDisarmableResponse() : SetDisarmableResponse(nullptr){};
    virtual ~SetDisarmableResponse();

    SetDisarmableResponse(const SetDisarmableResponse& from);
    SetDisarmableResponse(SetDisarmableResponse&& from) noexcept : SetDisarmableResponse()
    {
        *this = ::std::move(from);
    }

    inline SetDisarmableResponse& operator=(const SetDisarmableResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SetDisarmableResponse& operator=(SetDisarmableResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SetDisarmableResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SetDisarmableResponse* internal_default_instance()
    {
        return reinterpret_cast<const SetDisarmableResponse*>(
            &_SetDisarmableResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 20;

    friend void swap(SetDisarmableResponse& a, SetDisarmableResponse& b) { a.Swap(&b); }
    inline void Swap(SetDisarmableResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetDisarmableResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetDisarmableResponse* New() const final
    {
        return CreateMaybeMessage<SetDisarmableResponse>(nullptr);
    }

    SetDisarmableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SetDisarmableResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SetDisarmableResponse& from);
    void MergeFrom(const SetDisarmableResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetDisarmableResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SetDisarmableResponse";
    }

protected:
    explicit SetDisarmableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionServerResultFieldNumber = 1,
    };
    // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
    bool has_action_server_result() const;

private:
    bool _internal_has_action_server_result() const;

public:
    void clear_action_server_result();
    const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* release_action_server_result();
    ::mavsdk::rpc::action_server::ActionServerResult* mutable_action_server_result();
    void set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);

private:
    const ::mavsdk::rpc::action_server::ActionServerResult& _internal_action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* _internal_mutable_action_server_result();

public:
    void unsafe_arena_set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);
    ::mavsdk::rpc::action_server::ActionServerResult* unsafe_arena_release_action_server_result();

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SetDisarmableResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetAllowableFlightModesResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SetAllowableFlightModesResponse)
                                                                                                */
{
public:
    inline SetAllowableFlightModesResponse() : SetAllowableFlightModesResponse(nullptr){};
    virtual ~SetAllowableFlightModesResponse();

    SetAllowableFlightModesResponse(const SetAllowableFlightModesResponse& from);
    SetAllowableFlightModesResponse(SetAllowableFlightModesResponse&& from) noexcept :
        SetAllowableFlightModesResponse()
    {
        *this = ::std::move(from);
    }

    inline SetAllowableFlightModesResponse& operator=(const SetAllowableFlightModesResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SetAllowableFlightModesResponse&
    operator=(SetAllowableFlightModesResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SetAllowableFlightModesResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SetAllowableFlightModesResponse* internal_default_instance()
    {
        return reinterpret_cast<const SetAllowableFlightModesResponse*>(
            &_SetAllowableFlightModesResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 21;

    friend void swap(SetAllowableFlightModesResponse& a, SetAllowableFlightModesResponse& b)
    {
        a.Swap(&b);
    }
    inline void Swap(SetAllowableFlightModesResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetAllowableFlightModesResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetAllowableFlightModesResponse* New() const final
    {
        return CreateMaybeMessage<SetAllowableFlightModesResponse>(nullptr);
    }

    SetAllowableFlightModesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SetAllowableFlightModesResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SetAllowableFlightModesResponse& from);
    void MergeFrom(const SetAllowableFlightModesResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetAllowableFlightModesResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SetAllowableFlightModesResponse";
    }

protected:
    explicit SetAllowableFlightModesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionServerResultFieldNumber = 1,
    };
    // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
    bool has_action_server_result() const;

private:
    bool _internal_has_action_server_result() const;

public:
    void clear_action_server_result();
    const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* release_action_server_result();
    ::mavsdk::rpc::action_server::ActionServerResult* mutable_action_server_result();
    void set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);

private:
    const ::mavsdk::rpc::action_server::ActionServerResult& _internal_action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* _internal_mutable_action_server_result();

public:
    void unsafe_arena_set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);
    ::mavsdk::rpc::action_server::ActionServerResult* unsafe_arena_release_action_server_result();

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SetAllowableFlightModesResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetAllowTakeoffResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.SetAllowTakeoffResponse)
                                                                                        */
{
public:
    inline SetAllowTakeoffResponse() : SetAllowTakeoffResponse(nullptr){};
    virtual ~SetAllowTakeoffResponse();

    SetAllowTakeoffResponse(const SetAllowTakeoffResponse& from);
    SetAllowTakeoffResponse(SetAllowTakeoffResponse&& from) noexcept : SetAllowTakeoffResponse()
    {
        *this = ::std::move(from);
    }

    inline SetAllowTakeoffResponse& operator=(const SetAllowTakeoffResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SetAllowTakeoffResponse& operator=(SetAllowTakeoffResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SetAllowTakeoffResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SetAllowTakeoffResponse* internal_default_instance()
    {
        return reinterpret_cast<const SetAllowTakeoffResponse*>(
            &_SetAllowTakeoffResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 22;

    friend void swap(SetAllowTakeoffResponse& a, SetAllowTakeoffResponse& b) { a.Swap(&b); }
    inline void Swap(SetAllowTakeoffResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetAllowTakeoffResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetAllowTakeoffResponse* New() const final
    {
        return CreateMaybeMessage<SetAllowTakeoffResponse>(nullptr);
    }

    SetAllowTakeoffResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SetAllowTakeoffResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SetAllowTakeoffResponse& from);
    void MergeFrom(const SetAllowTakeoffResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetAllowTakeoffResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.SetAllowTakeoffResponse";
    }

protected:
    explicit SetAllowTakeoffResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionServerResultFieldNumber = 1,
    };
    // .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
    bool has_action_server_result() const;

private:
    bool _internal_has_action_server_result() const;

public:
    void clear_action_server_result();
    const ::mavsdk::rpc::action_server::ActionServerResult& action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* release_action_server_result();
    ::mavsdk::rpc::action_server::ActionServerResult* mutable_action_server_result();
    void set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);

private:
    const ::mavsdk::rpc::action_server::ActionServerResult& _internal_action_server_result() const;
    ::mavsdk::rpc::action_server::ActionServerResult* _internal_mutable_action_server_result();

public:
    void unsafe_arena_set_allocated_action_server_result(
        ::mavsdk::rpc::action_server::ActionServerResult* action_server_result);
    ::mavsdk::rpc::action_server::ActionServerResult* unsafe_arena_release_action_server_result();

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.SetAllowTakeoffResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GetAllowableFlightModesResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.GetAllowableFlightModesResponse)
                                                                                                */
{
public:
    inline GetAllowableFlightModesResponse() : GetAllowableFlightModesResponse(nullptr){};
    virtual ~GetAllowableFlightModesResponse();

    GetAllowableFlightModesResponse(const GetAllowableFlightModesResponse& from);
    GetAllowableFlightModesResponse(GetAllowableFlightModesResponse&& from) noexcept :
        GetAllowableFlightModesResponse()
    {
        *this = ::std::move(from);
    }

    inline GetAllowableFlightModesResponse& operator=(const GetAllowableFlightModesResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline GetAllowableFlightModesResponse&
    operator=(GetAllowableFlightModesResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const GetAllowableFlightModesResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const GetAllowableFlightModesResponse* internal_default_instance()
    {
        return reinterpret_cast<const GetAllowableFlightModesResponse*>(
            &_GetAllowableFlightModesResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 23;

    friend void swap(GetAllowableFlightModesResponse& a, GetAllowableFlightModesResponse& b)
    {
        a.Swap(&b);
    }
    inline void Swap(GetAllowableFlightModesResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(GetAllowableFlightModesResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline GetAllowableFlightModesResponse* New() const final
    {
        return CreateMaybeMessage<GetAllowableFlightModesResponse>(nullptr);
    }

    GetAllowableFlightModesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<GetAllowableFlightModesResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const GetAllowableFlightModesResponse& from);
    void MergeFrom(const GetAllowableFlightModesResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(GetAllowableFlightModesResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.GetAllowableFlightModesResponse";
    }

protected:
    explicit GetAllowableFlightModesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kFlightModesFieldNumber = 1,
    };
    // .mavsdk.rpc.action_server.AllowableFlightModes flight_modes = 1;
    bool has_flight_modes() const;

private:
    bool _internal_has_flight_modes() const;

public:
    void clear_flight_modes();
    const ::mavsdk::rpc::action_server::AllowableFlightModes& flight_modes() const;
    ::mavsdk::rpc::action_server::AllowableFlightModes* release_flight_modes();
    ::mavsdk::rpc::action_server::AllowableFlightModes* mutable_flight_modes();
    void
    set_allocated_flight_modes(::mavsdk::rpc::action_server::AllowableFlightModes* flight_modes);

private:
    const ::mavsdk::rpc::action_server::AllowableFlightModes& _internal_flight_modes() const;
    ::mavsdk::rpc::action_server::AllowableFlightModes* _internal_mutable_flight_modes();

public:
    void unsafe_arena_set_allocated_flight_modes(
        ::mavsdk::rpc::action_server::AllowableFlightModes* flight_modes);
    ::mavsdk::rpc::action_server::AllowableFlightModes* unsafe_arena_release_flight_modes();

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.GetAllowableFlightModesResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::action_server::AllowableFlightModes* flight_modes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class AllowableFlightModes PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.AllowableFlightModes)
                                                                                     */
{
public:
    inline AllowableFlightModes() : AllowableFlightModes(nullptr){};
    virtual ~AllowableFlightModes();

    AllowableFlightModes(const AllowableFlightModes& from);
    AllowableFlightModes(AllowableFlightModes&& from) noexcept : AllowableFlightModes()
    {
        *this = ::std::move(from);
    }

    inline AllowableFlightModes& operator=(const AllowableFlightModes& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline AllowableFlightModes& operator=(AllowableFlightModes&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const AllowableFlightModes& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const AllowableFlightModes* internal_default_instance()
    {
        return reinterpret_cast<const AllowableFlightModes*>(
            &_AllowableFlightModes_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 24;

    friend void swap(AllowableFlightModes& a, AllowableFlightModes& b) { a.Swap(&b); }
    inline void Swap(AllowableFlightModes* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(AllowableFlightModes* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline AllowableFlightModes* New() const final
    {
        return CreateMaybeMessage<AllowableFlightModes>(nullptr);
    }

    AllowableFlightModes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<AllowableFlightModes>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const AllowableFlightModes& from);
    void MergeFrom(const AllowableFlightModes& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(AllowableFlightModes* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.AllowableFlightModes";
    }

protected:
    explicit AllowableFlightModes(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kCanAutoModeFieldNumber = 1,
        kCanGuidedModeFieldNumber = 2,
        kCanStabilizeModeFieldNumber = 3,
    };
    // bool can_auto_mode = 1;
    void clear_can_auto_mode();
    bool can_auto_mode() const;
    void set_can_auto_mode(bool value);

private:
    bool _internal_can_auto_mode() const;
    void _internal_set_can_auto_mode(bool value);

public:
    // bool can_guided_mode = 2;
    void clear_can_guided_mode();
    bool can_guided_mode() const;
    void set_can_guided_mode(bool value);

private:
    bool _internal_can_guided_mode() const;
    void _internal_set_can_guided_mode(bool value);

public:
    // bool can_stabilize_mode = 3;
    void clear_can_stabilize_mode();
    bool can_stabilize_mode() const;
    void set_can_stabilize_mode(bool value);

private:
    bool _internal_can_stabilize_mode() const;
    void _internal_set_can_stabilize_mode(bool value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.AllowableFlightModes)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    bool can_auto_mode_;
    bool can_guided_mode_;
    bool can_stabilize_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ArmDisarm PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.ArmDisarm)
                                                                          */
{
public:
    inline ArmDisarm() : ArmDisarm(nullptr){};
    virtual ~ArmDisarm();

    ArmDisarm(const ArmDisarm& from);
    ArmDisarm(ArmDisarm&& from) noexcept : ArmDisarm() { *this = ::std::move(from); }

    inline ArmDisarm& operator=(const ArmDisarm& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ArmDisarm& operator=(ArmDisarm&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const ArmDisarm& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const ArmDisarm* internal_default_instance()
    {
        return reinterpret_cast<const ArmDisarm*>(&_ArmDisarm_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 25;

    friend void swap(ArmDisarm& a, ArmDisarm& b) { a.Swap(&b); }
    inline void Swap(ArmDisarm* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ArmDisarm* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ArmDisarm* New() const final { return CreateMaybeMessage<ArmDisarm>(nullptr); }

    ArmDisarm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<ArmDisarm>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const ArmDisarm& from);
    void MergeFrom(const ArmDisarm& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ArmDisarm* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.ArmDisarm";
    }

protected:
    explicit ArmDisarm(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kArmFieldNumber = 1,
        kForceFieldNumber = 2,
    };
    // bool arm = 1;
    void clear_arm();
    bool arm() const;
    void set_arm(bool value);

private:
    bool _internal_arm() const;
    void _internal_set_arm(bool value);

public:
    // bool force = 2;
    void clear_force();
    bool force() const;
    void set_force(bool value);

private:
    bool _internal_force() const;
    void _internal_set_force(bool value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.ArmDisarm)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    bool arm_;
    bool force_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ActionServerResult PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.action_server.ActionServerResult)
                                                                                   */
{
public:
    inline ActionServerResult() : ActionServerResult(nullptr){};
    virtual ~ActionServerResult();

    ActionServerResult(const ActionServerResult& from);
    ActionServerResult(ActionServerResult&& from) noexcept : ActionServerResult()
    {
        *this = ::std::move(from);
    }

    inline ActionServerResult& operator=(const ActionServerResult& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ActionServerResult& operator=(ActionServerResult&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const ActionServerResult& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const ActionServerResult* internal_default_instance()
    {
        return reinterpret_cast<const ActionServerResult*>(&_ActionServerResult_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 26;

    friend void swap(ActionServerResult& a, ActionServerResult& b) { a.Swap(&b); }
    inline void Swap(ActionServerResult* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ActionServerResult* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ActionServerResult* New() const final
    {
        return CreateMaybeMessage<ActionServerResult>(nullptr);
    }

    ActionServerResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<ActionServerResult>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const ActionServerResult& from);
    void MergeFrom(const ActionServerResult& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ActionServerResult* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.action_server.ActionServerResult";
    }

protected:
    explicit ActionServerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_action_5fserver_2faction_5fserver_2eproto);
        return ::descriptor_table_action_5fserver_2faction_5fserver_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    typedef ActionServerResult_Result Result;
    static constexpr Result RESULT_UNKNOWN = ActionServerResult_Result_RESULT_UNKNOWN;
    static constexpr Result RESULT_SUCCESS = ActionServerResult_Result_RESULT_SUCCESS;
    static constexpr Result RESULT_NO_SYSTEM = ActionServerResult_Result_RESULT_NO_SYSTEM;
    static constexpr Result RESULT_CONNECTION_ERROR =
        ActionServerResult_Result_RESULT_CONNECTION_ERROR;
    static constexpr Result RESULT_BUSY = ActionServerResult_Result_RESULT_BUSY;
    static constexpr Result RESULT_COMMAND_DENIED = ActionServerResult_Result_RESULT_COMMAND_DENIED;
    static constexpr Result RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN =
        ActionServerResult_Result_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN;
    static constexpr Result RESULT_COMMAND_DENIED_NOT_LANDED =
        ActionServerResult_Result_RESULT_COMMAND_DENIED_NOT_LANDED;
    static constexpr Result RESULT_TIMEOUT = ActionServerResult_Result_RESULT_TIMEOUT;
    static constexpr Result RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN =
        ActionServerResult_Result_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN;
    static constexpr Result RESULT_NO_VTOL_TRANSITION_SUPPORT =
        ActionServerResult_Result_RESULT_NO_VTOL_TRANSITION_SUPPORT;
    static constexpr Result RESULT_PARAMETER_ERROR =
        ActionServerResult_Result_RESULT_PARAMETER_ERROR;
    static constexpr Result RESULT_NEXT = ActionServerResult_Result_RESULT_NEXT;
    static inline bool Result_IsValid(int value)
    {
        return ActionServerResult_Result_IsValid(value);
    }
    static constexpr Result Result_MIN = ActionServerResult_Result_Result_MIN;
    static constexpr Result Result_MAX = ActionServerResult_Result_Result_MAX;
    static constexpr int Result_ARRAYSIZE = ActionServerResult_Result_Result_ARRAYSIZE;
    static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor()
    {
        return ActionServerResult_Result_descriptor();
    }
    template<typename T> static inline const std::string& Result_Name(T enum_t_value)
    {
        static_assert(
            ::std::is_same<T, Result>::value || ::std::is_integral<T>::value,
            "Incorrect type passed to function Result_Name.");
        return ActionServerResult_Result_Name(enum_t_value);
    }
    static inline bool Result_Parse(const std::string& name, Result* value)
    {
        return ActionServerResult_Result_Parse(name, value);
    }

    // accessors -------------------------------------------------------

    enum : int {
        kResultStrFieldNumber = 2,
        kResultFieldNumber = 1,
    };
    // string result_str = 2;
    void clear_result_str();
    const std::string& result_str() const;
    void set_result_str(const std::string& value);
    void set_result_str(std::string&& value);
    void set_result_str(const char* value);
    void set_result_str(const char* value, size_t size);
    std::string* mutable_result_str();
    std::string* release_result_str();
    void set_allocated_result_str(std::string* result_str);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_result_str();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_result_str(std::string* result_str);

private:
    const std::string& _internal_result_str() const;
    void _internal_set_result_str(const std::string& value);
    std::string* _internal_mutable_result_str();

public:
    // .mavsdk.rpc.action_server.ActionServerResult.Result result = 1;
    void clear_result();
    ::mavsdk::rpc::action_server::ActionServerResult_Result result() const;
    void set_result(::mavsdk::rpc::action_server::ActionServerResult_Result value);

private:
    ::mavsdk::rpc::action_server::ActionServerResult_Result _internal_result() const;
    void _internal_set_result(::mavsdk::rpc::action_server::ActionServerResult_Result value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.action_server.ActionServerResult)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_action_5fserver_2faction_5fserver_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// SetAllowTakeoffRequest

// bool allow_takeoff = 1;
inline void SetAllowTakeoffRequest::clear_allow_takeoff()
{
    allow_takeoff_ = false;
}
inline bool SetAllowTakeoffRequest::_internal_allow_takeoff() const
{
    return allow_takeoff_;
}
inline bool SetAllowTakeoffRequest::allow_takeoff() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.SetAllowTakeoffRequest.allow_takeoff)
    return _internal_allow_takeoff();
}
inline void SetAllowTakeoffRequest::_internal_set_allow_takeoff(bool value)
{
    allow_takeoff_ = value;
}
inline void SetAllowTakeoffRequest::set_allow_takeoff(bool value)
{
    _internal_set_allow_takeoff(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.SetAllowTakeoffRequest.allow_takeoff)
}

// -------------------------------------------------------------------

// SetArmableRequest

// bool armable = 1;
inline void SetArmableRequest::clear_armable()
{
    armable_ = false;
}
inline bool SetArmableRequest::_internal_armable() const
{
    return armable_;
}
inline bool SetArmableRequest::armable() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.SetArmableRequest.armable)
    return _internal_armable();
}
inline void SetArmableRequest::_internal_set_armable(bool value)
{
    armable_ = value;
}
inline void SetArmableRequest::set_armable(bool value)
{
    _internal_set_armable(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.SetArmableRequest.armable)
}

// bool force_armable = 2;
inline void SetArmableRequest::clear_force_armable()
{
    force_armable_ = false;
}
inline bool SetArmableRequest::_internal_force_armable() const
{
    return force_armable_;
}
inline bool SetArmableRequest::force_armable() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.SetArmableRequest.force_armable)
    return _internal_force_armable();
}
inline void SetArmableRequest::_internal_set_force_armable(bool value)
{
    force_armable_ = value;
}
inline void SetArmableRequest::set_force_armable(bool value)
{
    _internal_set_force_armable(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.SetArmableRequest.force_armable)
}

// -------------------------------------------------------------------

// SetDisarmableRequest

// bool disarmable = 1;
inline void SetDisarmableRequest::clear_disarmable()
{
    disarmable_ = false;
}
inline bool SetDisarmableRequest::_internal_disarmable() const
{
    return disarmable_;
}
inline bool SetDisarmableRequest::disarmable() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.SetDisarmableRequest.disarmable)
    return _internal_disarmable();
}
inline void SetDisarmableRequest::_internal_set_disarmable(bool value)
{
    disarmable_ = value;
}
inline void SetDisarmableRequest::set_disarmable(bool value)
{
    _internal_set_disarmable(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.SetDisarmableRequest.disarmable)
}

// bool force_disarmable = 2;
inline void SetDisarmableRequest::clear_force_disarmable()
{
    force_disarmable_ = false;
}
inline bool SetDisarmableRequest::_internal_force_disarmable() const
{
    return force_disarmable_;
}
inline bool SetDisarmableRequest::force_disarmable() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.SetDisarmableRequest.force_disarmable)
    return _internal_force_disarmable();
}
inline void SetDisarmableRequest::_internal_set_force_disarmable(bool value)
{
    force_disarmable_ = value;
}
inline void SetDisarmableRequest::set_force_disarmable(bool value)
{
    _internal_set_force_disarmable(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.SetDisarmableRequest.force_disarmable)
}

// -------------------------------------------------------------------

// SetAllowableFlightModesRequest

// .mavsdk.rpc.action_server.AllowableFlightModes flight_modes = 1;
inline bool SetAllowableFlightModesRequest::_internal_has_flight_modes() const
{
    return this != internal_default_instance() && flight_modes_ != nullptr;
}
inline bool SetAllowableFlightModesRequest::has_flight_modes() const
{
    return _internal_has_flight_modes();
}
inline void SetAllowableFlightModesRequest::clear_flight_modes()
{
    if (GetArena() == nullptr && flight_modes_ != nullptr) {
        delete flight_modes_;
    }
    flight_modes_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::AllowableFlightModes&
SetAllowableFlightModesRequest::_internal_flight_modes() const
{
    const ::mavsdk::rpc::action_server::AllowableFlightModes* p = flight_modes_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::action_server::AllowableFlightModes*>(
                   &::mavsdk::rpc::action_server::_AllowableFlightModes_default_instance_);
}
inline const ::mavsdk::rpc::action_server::AllowableFlightModes&
SetAllowableFlightModesRequest::flight_modes() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.SetAllowableFlightModesRequest.flight_modes)
    return _internal_flight_modes();
}
inline void SetAllowableFlightModesRequest::unsafe_arena_set_allocated_flight_modes(
    ::mavsdk::rpc::action_server::AllowableFlightModes* flight_modes)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flight_modes_);
    }
    flight_modes_ = flight_modes;
    if (flight_modes) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.SetAllowableFlightModesRequest.flight_modes)
}
inline ::mavsdk::rpc::action_server::AllowableFlightModes*
SetAllowableFlightModesRequest::release_flight_modes()
{
    auto temp = unsafe_arena_release_flight_modes();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::AllowableFlightModes*
SetAllowableFlightModesRequest::unsafe_arena_release_flight_modes()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.SetAllowableFlightModesRequest.flight_modes)

    ::mavsdk::rpc::action_server::AllowableFlightModes* temp = flight_modes_;
    flight_modes_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::AllowableFlightModes*
SetAllowableFlightModesRequest::_internal_mutable_flight_modes()
{
    if (flight_modes_ == nullptr) {
        auto* p =
            CreateMaybeMessage<::mavsdk::rpc::action_server::AllowableFlightModes>(GetArena());
        flight_modes_ = p;
    }
    return flight_modes_;
}
inline ::mavsdk::rpc::action_server::AllowableFlightModes*
SetAllowableFlightModesRequest::mutable_flight_modes()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.SetAllowableFlightModesRequest.flight_modes)
    return _internal_mutable_flight_modes();
}
inline void SetAllowableFlightModesRequest::set_allocated_flight_modes(
    ::mavsdk::rpc::action_server::AllowableFlightModes* flight_modes)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete flight_modes_;
    }
    if (flight_modes) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flight_modes);
        if (message_arena != submessage_arena) {
            flight_modes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, flight_modes, submessage_arena);
        }

    } else {
    }
    flight_modes_ = flight_modes;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.SetAllowableFlightModesRequest.flight_modes)
}

// -------------------------------------------------------------------

// GetAllowableFlightModesRequest

// -------------------------------------------------------------------

// SubscribeArmDisarmRequest

// -------------------------------------------------------------------

// SubscribeFlightModeChangeRequest

// -------------------------------------------------------------------

// SubscribeTakeoffRequest

// -------------------------------------------------------------------

// SubscribeLandRequest

// -------------------------------------------------------------------

// SubscribeRebootRequest

// -------------------------------------------------------------------

// SubscribeShutdownRequest

// -------------------------------------------------------------------

// SubscribeTerminateRequest

// -------------------------------------------------------------------

// ArmDisarmResponse

// .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
inline bool ArmDisarmResponse::_internal_has_action_server_result() const
{
    return this != internal_default_instance() && action_server_result_ != nullptr;
}
inline bool ArmDisarmResponse::has_action_server_result() const
{
    return _internal_has_action_server_result();
}
inline void ArmDisarmResponse::clear_action_server_result()
{
    if (GetArena() == nullptr && action_server_result_ != nullptr) {
        delete action_server_result_;
    }
    action_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
ArmDisarmResponse::_internal_action_server_result() const
{
    const ::mavsdk::rpc::action_server::ActionServerResult* p = action_server_result_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::action_server::ActionServerResult*>(
                   &::mavsdk::rpc::action_server::_ActionServerResult_default_instance_);
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
ArmDisarmResponse::action_server_result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.ArmDisarmResponse.action_server_result)
    return _internal_action_server_result();
}
inline void ArmDisarmResponse::unsafe_arena_set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_server_result_);
    }
    action_server_result_ = action_server_result;
    if (action_server_result) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.ArmDisarmResponse.action_server_result)
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
ArmDisarmResponse::release_action_server_result()
{
    auto temp = unsafe_arena_release_action_server_result();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
ArmDisarmResponse::unsafe_arena_release_action_server_result()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.ArmDisarmResponse.action_server_result)

    ::mavsdk::rpc::action_server::ActionServerResult* temp = action_server_result_;
    action_server_result_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
ArmDisarmResponse::_internal_mutable_action_server_result()
{
    if (action_server_result_ == nullptr) {
        auto* p = CreateMaybeMessage<::mavsdk::rpc::action_server::ActionServerResult>(GetArena());
        action_server_result_ = p;
    }
    return action_server_result_;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
ArmDisarmResponse::mutable_action_server_result()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.ArmDisarmResponse.action_server_result)
    return _internal_mutable_action_server_result();
}
inline void ArmDisarmResponse::set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete action_server_result_;
    }
    if (action_server_result) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_server_result);
        if (message_arena != submessage_arena) {
            action_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, action_server_result, submessage_arena);
        }

    } else {
    }
    action_server_result_ = action_server_result;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.ArmDisarmResponse.action_server_result)
}

// .mavsdk.rpc.action_server.ArmDisarm arm = 2;
inline bool ArmDisarmResponse::_internal_has_arm() const
{
    return this != internal_default_instance() && arm_ != nullptr;
}
inline bool ArmDisarmResponse::has_arm() const
{
    return _internal_has_arm();
}
inline void ArmDisarmResponse::clear_arm()
{
    if (GetArena() == nullptr && arm_ != nullptr) {
        delete arm_;
    }
    arm_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::ArmDisarm& ArmDisarmResponse::_internal_arm() const
{
    const ::mavsdk::rpc::action_server::ArmDisarm* p = arm_;
    return p != nullptr ? *p :
                          *reinterpret_cast<const ::mavsdk::rpc::action_server::ArmDisarm*>(
                              &::mavsdk::rpc::action_server::_ArmDisarm_default_instance_);
}
inline const ::mavsdk::rpc::action_server::ArmDisarm& ArmDisarmResponse::arm() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.ArmDisarmResponse.arm)
    return _internal_arm();
}
inline void
ArmDisarmResponse::unsafe_arena_set_allocated_arm(::mavsdk::rpc::action_server::ArmDisarm* arm)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arm_);
    }
    arm_ = arm;
    if (arm) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.ArmDisarmResponse.arm)
}
inline ::mavsdk::rpc::action_server::ArmDisarm* ArmDisarmResponse::release_arm()
{
    auto temp = unsafe_arena_release_arm();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::ArmDisarm* ArmDisarmResponse::unsafe_arena_release_arm()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.ArmDisarmResponse.arm)

    ::mavsdk::rpc::action_server::ArmDisarm* temp = arm_;
    arm_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::ArmDisarm* ArmDisarmResponse::_internal_mutable_arm()
{
    if (arm_ == nullptr) {
        auto* p = CreateMaybeMessage<::mavsdk::rpc::action_server::ArmDisarm>(GetArena());
        arm_ = p;
    }
    return arm_;
}
inline ::mavsdk::rpc::action_server::ArmDisarm* ArmDisarmResponse::mutable_arm()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.ArmDisarmResponse.arm)
    return _internal_mutable_arm();
}
inline void ArmDisarmResponse::set_allocated_arm(::mavsdk::rpc::action_server::ArmDisarm* arm)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete arm_;
    }
    if (arm) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(arm);
        if (message_arena != submessage_arena) {
            arm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, arm, submessage_arena);
        }

    } else {
    }
    arm_ = arm;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.ArmDisarmResponse.arm)
}

// -------------------------------------------------------------------

// FlightModeChangeResponse

// .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
inline bool FlightModeChangeResponse::_internal_has_action_server_result() const
{
    return this != internal_default_instance() && action_server_result_ != nullptr;
}
inline bool FlightModeChangeResponse::has_action_server_result() const
{
    return _internal_has_action_server_result();
}
inline void FlightModeChangeResponse::clear_action_server_result()
{
    if (GetArena() == nullptr && action_server_result_ != nullptr) {
        delete action_server_result_;
    }
    action_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
FlightModeChangeResponse::_internal_action_server_result() const
{
    const ::mavsdk::rpc::action_server::ActionServerResult* p = action_server_result_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::action_server::ActionServerResult*>(
                   &::mavsdk::rpc::action_server::_ActionServerResult_default_instance_);
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
FlightModeChangeResponse::action_server_result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.FlightModeChangeResponse.action_server_result)
    return _internal_action_server_result();
}
inline void FlightModeChangeResponse::unsafe_arena_set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_server_result_);
    }
    action_server_result_ = action_server_result;
    if (action_server_result) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.FlightModeChangeResponse.action_server_result)
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
FlightModeChangeResponse::release_action_server_result()
{
    auto temp = unsafe_arena_release_action_server_result();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
FlightModeChangeResponse::unsafe_arena_release_action_server_result()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.FlightModeChangeResponse.action_server_result)

    ::mavsdk::rpc::action_server::ActionServerResult* temp = action_server_result_;
    action_server_result_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
FlightModeChangeResponse::_internal_mutable_action_server_result()
{
    if (action_server_result_ == nullptr) {
        auto* p = CreateMaybeMessage<::mavsdk::rpc::action_server::ActionServerResult>(GetArena());
        action_server_result_ = p;
    }
    return action_server_result_;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
FlightModeChangeResponse::mutable_action_server_result()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.FlightModeChangeResponse.action_server_result)
    return _internal_mutable_action_server_result();
}
inline void FlightModeChangeResponse::set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete action_server_result_;
    }
    if (action_server_result) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_server_result);
        if (message_arena != submessage_arena) {
            action_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, action_server_result, submessage_arena);
        }

    } else {
    }
    action_server_result_ = action_server_result;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.FlightModeChangeResponse.action_server_result)
}

// .mavsdk.rpc.action_server.FlightMode flight_mode = 2;
inline void FlightModeChangeResponse::clear_flight_mode()
{
    flight_mode_ = 0;
}
inline ::mavsdk::rpc::action_server::FlightMode
FlightModeChangeResponse::_internal_flight_mode() const
{
    return static_cast<::mavsdk::rpc::action_server::FlightMode>(flight_mode_);
}
inline ::mavsdk::rpc::action_server::FlightMode FlightModeChangeResponse::flight_mode() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.FlightModeChangeResponse.flight_mode)
    return _internal_flight_mode();
}
inline void
FlightModeChangeResponse::_internal_set_flight_mode(::mavsdk::rpc::action_server::FlightMode value)
{
    flight_mode_ = value;
}
inline void
FlightModeChangeResponse::set_flight_mode(::mavsdk::rpc::action_server::FlightMode value)
{
    _internal_set_flight_mode(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.FlightModeChangeResponse.flight_mode)
}

// -------------------------------------------------------------------

// TakeoffResponse

// .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
inline bool TakeoffResponse::_internal_has_action_server_result() const
{
    return this != internal_default_instance() && action_server_result_ != nullptr;
}
inline bool TakeoffResponse::has_action_server_result() const
{
    return _internal_has_action_server_result();
}
inline void TakeoffResponse::clear_action_server_result()
{
    if (GetArena() == nullptr && action_server_result_ != nullptr) {
        delete action_server_result_;
    }
    action_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
TakeoffResponse::_internal_action_server_result() const
{
    const ::mavsdk::rpc::action_server::ActionServerResult* p = action_server_result_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::action_server::ActionServerResult*>(
                   &::mavsdk::rpc::action_server::_ActionServerResult_default_instance_);
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
TakeoffResponse::action_server_result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.TakeoffResponse.action_server_result)
    return _internal_action_server_result();
}
inline void TakeoffResponse::unsafe_arena_set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_server_result_);
    }
    action_server_result_ = action_server_result;
    if (action_server_result) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.TakeoffResponse.action_server_result)
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
TakeoffResponse::release_action_server_result()
{
    auto temp = unsafe_arena_release_action_server_result();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
TakeoffResponse::unsafe_arena_release_action_server_result()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.TakeoffResponse.action_server_result)

    ::mavsdk::rpc::action_server::ActionServerResult* temp = action_server_result_;
    action_server_result_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
TakeoffResponse::_internal_mutable_action_server_result()
{
    if (action_server_result_ == nullptr) {
        auto* p = CreateMaybeMessage<::mavsdk::rpc::action_server::ActionServerResult>(GetArena());
        action_server_result_ = p;
    }
    return action_server_result_;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
TakeoffResponse::mutable_action_server_result()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.TakeoffResponse.action_server_result)
    return _internal_mutable_action_server_result();
}
inline void TakeoffResponse::set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete action_server_result_;
    }
    if (action_server_result) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_server_result);
        if (message_arena != submessage_arena) {
            action_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, action_server_result, submessage_arena);
        }

    } else {
    }
    action_server_result_ = action_server_result;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.TakeoffResponse.action_server_result)
}

// bool takeoff = 2;
inline void TakeoffResponse::clear_takeoff()
{
    takeoff_ = false;
}
inline bool TakeoffResponse::_internal_takeoff() const
{
    return takeoff_;
}
inline bool TakeoffResponse::takeoff() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.TakeoffResponse.takeoff)
    return _internal_takeoff();
}
inline void TakeoffResponse::_internal_set_takeoff(bool value)
{
    takeoff_ = value;
}
inline void TakeoffResponse::set_takeoff(bool value)
{
    _internal_set_takeoff(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.TakeoffResponse.takeoff)
}

// -------------------------------------------------------------------

// LandResponse

// .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
inline bool LandResponse::_internal_has_action_server_result() const
{
    return this != internal_default_instance() && action_server_result_ != nullptr;
}
inline bool LandResponse::has_action_server_result() const
{
    return _internal_has_action_server_result();
}
inline void LandResponse::clear_action_server_result()
{
    if (GetArena() == nullptr && action_server_result_ != nullptr) {
        delete action_server_result_;
    }
    action_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
LandResponse::_internal_action_server_result() const
{
    const ::mavsdk::rpc::action_server::ActionServerResult* p = action_server_result_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::action_server::ActionServerResult*>(
                   &::mavsdk::rpc::action_server::_ActionServerResult_default_instance_);
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
LandResponse::action_server_result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.LandResponse.action_server_result)
    return _internal_action_server_result();
}
inline void LandResponse::unsafe_arena_set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_server_result_);
    }
    action_server_result_ = action_server_result;
    if (action_server_result) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.LandResponse.action_server_result)
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
LandResponse::release_action_server_result()
{
    auto temp = unsafe_arena_release_action_server_result();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
LandResponse::unsafe_arena_release_action_server_result()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.LandResponse.action_server_result)

    ::mavsdk::rpc::action_server::ActionServerResult* temp = action_server_result_;
    action_server_result_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
LandResponse::_internal_mutable_action_server_result()
{
    if (action_server_result_ == nullptr) {
        auto* p = CreateMaybeMessage<::mavsdk::rpc::action_server::ActionServerResult>(GetArena());
        action_server_result_ = p;
    }
    return action_server_result_;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
LandResponse::mutable_action_server_result()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.LandResponse.action_server_result)
    return _internal_mutable_action_server_result();
}
inline void LandResponse::set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete action_server_result_;
    }
    if (action_server_result) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_server_result);
        if (message_arena != submessage_arena) {
            action_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, action_server_result, submessage_arena);
        }

    } else {
    }
    action_server_result_ = action_server_result;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.LandResponse.action_server_result)
}

// bool land = 2;
inline void LandResponse::clear_land()
{
    land_ = false;
}
inline bool LandResponse::_internal_land() const
{
    return land_;
}
inline bool LandResponse::land() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.LandResponse.land)
    return _internal_land();
}
inline void LandResponse::_internal_set_land(bool value)
{
    land_ = value;
}
inline void LandResponse::set_land(bool value)
{
    _internal_set_land(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.LandResponse.land)
}

// -------------------------------------------------------------------

// RebootResponse

// .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
inline bool RebootResponse::_internal_has_action_server_result() const
{
    return this != internal_default_instance() && action_server_result_ != nullptr;
}
inline bool RebootResponse::has_action_server_result() const
{
    return _internal_has_action_server_result();
}
inline void RebootResponse::clear_action_server_result()
{
    if (GetArena() == nullptr && action_server_result_ != nullptr) {
        delete action_server_result_;
    }
    action_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
RebootResponse::_internal_action_server_result() const
{
    const ::mavsdk::rpc::action_server::ActionServerResult* p = action_server_result_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::action_server::ActionServerResult*>(
                   &::mavsdk::rpc::action_server::_ActionServerResult_default_instance_);
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
RebootResponse::action_server_result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.RebootResponse.action_server_result)
    return _internal_action_server_result();
}
inline void RebootResponse::unsafe_arena_set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_server_result_);
    }
    action_server_result_ = action_server_result;
    if (action_server_result) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.RebootResponse.action_server_result)
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
RebootResponse::release_action_server_result()
{
    auto temp = unsafe_arena_release_action_server_result();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
RebootResponse::unsafe_arena_release_action_server_result()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.RebootResponse.action_server_result)

    ::mavsdk::rpc::action_server::ActionServerResult* temp = action_server_result_;
    action_server_result_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
RebootResponse::_internal_mutable_action_server_result()
{
    if (action_server_result_ == nullptr) {
        auto* p = CreateMaybeMessage<::mavsdk::rpc::action_server::ActionServerResult>(GetArena());
        action_server_result_ = p;
    }
    return action_server_result_;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
RebootResponse::mutable_action_server_result()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.RebootResponse.action_server_result)
    return _internal_mutable_action_server_result();
}
inline void RebootResponse::set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete action_server_result_;
    }
    if (action_server_result) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_server_result);
        if (message_arena != submessage_arena) {
            action_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, action_server_result, submessage_arena);
        }

    } else {
    }
    action_server_result_ = action_server_result;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.RebootResponse.action_server_result)
}

// bool reboot = 2;
inline void RebootResponse::clear_reboot()
{
    reboot_ = false;
}
inline bool RebootResponse::_internal_reboot() const
{
    return reboot_;
}
inline bool RebootResponse::reboot() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.RebootResponse.reboot)
    return _internal_reboot();
}
inline void RebootResponse::_internal_set_reboot(bool value)
{
    reboot_ = value;
}
inline void RebootResponse::set_reboot(bool value)
{
    _internal_set_reboot(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.RebootResponse.reboot)
}

// -------------------------------------------------------------------

// ShutdownResponse

// .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
inline bool ShutdownResponse::_internal_has_action_server_result() const
{
    return this != internal_default_instance() && action_server_result_ != nullptr;
}
inline bool ShutdownResponse::has_action_server_result() const
{
    return _internal_has_action_server_result();
}
inline void ShutdownResponse::clear_action_server_result()
{
    if (GetArena() == nullptr && action_server_result_ != nullptr) {
        delete action_server_result_;
    }
    action_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
ShutdownResponse::_internal_action_server_result() const
{
    const ::mavsdk::rpc::action_server::ActionServerResult* p = action_server_result_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::action_server::ActionServerResult*>(
                   &::mavsdk::rpc::action_server::_ActionServerResult_default_instance_);
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
ShutdownResponse::action_server_result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.ShutdownResponse.action_server_result)
    return _internal_action_server_result();
}
inline void ShutdownResponse::unsafe_arena_set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_server_result_);
    }
    action_server_result_ = action_server_result;
    if (action_server_result) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.ShutdownResponse.action_server_result)
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
ShutdownResponse::release_action_server_result()
{
    auto temp = unsafe_arena_release_action_server_result();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
ShutdownResponse::unsafe_arena_release_action_server_result()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.ShutdownResponse.action_server_result)

    ::mavsdk::rpc::action_server::ActionServerResult* temp = action_server_result_;
    action_server_result_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
ShutdownResponse::_internal_mutable_action_server_result()
{
    if (action_server_result_ == nullptr) {
        auto* p = CreateMaybeMessage<::mavsdk::rpc::action_server::ActionServerResult>(GetArena());
        action_server_result_ = p;
    }
    return action_server_result_;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
ShutdownResponse::mutable_action_server_result()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.ShutdownResponse.action_server_result)
    return _internal_mutable_action_server_result();
}
inline void ShutdownResponse::set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete action_server_result_;
    }
    if (action_server_result) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_server_result);
        if (message_arena != submessage_arena) {
            action_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, action_server_result, submessage_arena);
        }

    } else {
    }
    action_server_result_ = action_server_result;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.ShutdownResponse.action_server_result)
}

// bool shutdown = 2;
inline void ShutdownResponse::clear_shutdown()
{
    shutdown_ = false;
}
inline bool ShutdownResponse::_internal_shutdown() const
{
    return shutdown_;
}
inline bool ShutdownResponse::shutdown() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.ShutdownResponse.shutdown)
    return _internal_shutdown();
}
inline void ShutdownResponse::_internal_set_shutdown(bool value)
{
    shutdown_ = value;
}
inline void ShutdownResponse::set_shutdown(bool value)
{
    _internal_set_shutdown(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.ShutdownResponse.shutdown)
}

// -------------------------------------------------------------------

// TerminateResponse

// .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
inline bool TerminateResponse::_internal_has_action_server_result() const
{
    return this != internal_default_instance() && action_server_result_ != nullptr;
}
inline bool TerminateResponse::has_action_server_result() const
{
    return _internal_has_action_server_result();
}
inline void TerminateResponse::clear_action_server_result()
{
    if (GetArena() == nullptr && action_server_result_ != nullptr) {
        delete action_server_result_;
    }
    action_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
TerminateResponse::_internal_action_server_result() const
{
    const ::mavsdk::rpc::action_server::ActionServerResult* p = action_server_result_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::action_server::ActionServerResult*>(
                   &::mavsdk::rpc::action_server::_ActionServerResult_default_instance_);
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
TerminateResponse::action_server_result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.TerminateResponse.action_server_result)
    return _internal_action_server_result();
}
inline void TerminateResponse::unsafe_arena_set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_server_result_);
    }
    action_server_result_ = action_server_result;
    if (action_server_result) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.TerminateResponse.action_server_result)
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
TerminateResponse::release_action_server_result()
{
    auto temp = unsafe_arena_release_action_server_result();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
TerminateResponse::unsafe_arena_release_action_server_result()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.TerminateResponse.action_server_result)

    ::mavsdk::rpc::action_server::ActionServerResult* temp = action_server_result_;
    action_server_result_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
TerminateResponse::_internal_mutable_action_server_result()
{
    if (action_server_result_ == nullptr) {
        auto* p = CreateMaybeMessage<::mavsdk::rpc::action_server::ActionServerResult>(GetArena());
        action_server_result_ = p;
    }
    return action_server_result_;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
TerminateResponse::mutable_action_server_result()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.TerminateResponse.action_server_result)
    return _internal_mutable_action_server_result();
}
inline void TerminateResponse::set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete action_server_result_;
    }
    if (action_server_result) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_server_result);
        if (message_arena != submessage_arena) {
            action_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, action_server_result, submessage_arena);
        }

    } else {
    }
    action_server_result_ = action_server_result;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.TerminateResponse.action_server_result)
}

// bool terminate = 2;
inline void TerminateResponse::clear_terminate()
{
    terminate_ = false;
}
inline bool TerminateResponse::_internal_terminate() const
{
    return terminate_;
}
inline bool TerminateResponse::terminate() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.TerminateResponse.terminate)
    return _internal_terminate();
}
inline void TerminateResponse::_internal_set_terminate(bool value)
{
    terminate_ = value;
}
inline void TerminateResponse::set_terminate(bool value)
{
    _internal_set_terminate(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.TerminateResponse.terminate)
}

// -------------------------------------------------------------------

// SetArmableResponse

// .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
inline bool SetArmableResponse::_internal_has_action_server_result() const
{
    return this != internal_default_instance() && action_server_result_ != nullptr;
}
inline bool SetArmableResponse::has_action_server_result() const
{
    return _internal_has_action_server_result();
}
inline void SetArmableResponse::clear_action_server_result()
{
    if (GetArena() == nullptr && action_server_result_ != nullptr) {
        delete action_server_result_;
    }
    action_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
SetArmableResponse::_internal_action_server_result() const
{
    const ::mavsdk::rpc::action_server::ActionServerResult* p = action_server_result_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::action_server::ActionServerResult*>(
                   &::mavsdk::rpc::action_server::_ActionServerResult_default_instance_);
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
SetArmableResponse::action_server_result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.SetArmableResponse.action_server_result)
    return _internal_action_server_result();
}
inline void SetArmableResponse::unsafe_arena_set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_server_result_);
    }
    action_server_result_ = action_server_result;
    if (action_server_result) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.SetArmableResponse.action_server_result)
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetArmableResponse::release_action_server_result()
{
    auto temp = unsafe_arena_release_action_server_result();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetArmableResponse::unsafe_arena_release_action_server_result()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.SetArmableResponse.action_server_result)

    ::mavsdk::rpc::action_server::ActionServerResult* temp = action_server_result_;
    action_server_result_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetArmableResponse::_internal_mutable_action_server_result()
{
    if (action_server_result_ == nullptr) {
        auto* p = CreateMaybeMessage<::mavsdk::rpc::action_server::ActionServerResult>(GetArena());
        action_server_result_ = p;
    }
    return action_server_result_;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetArmableResponse::mutable_action_server_result()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.SetArmableResponse.action_server_result)
    return _internal_mutable_action_server_result();
}
inline void SetArmableResponse::set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete action_server_result_;
    }
    if (action_server_result) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_server_result);
        if (message_arena != submessage_arena) {
            action_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, action_server_result, submessage_arena);
        }

    } else {
    }
    action_server_result_ = action_server_result;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.SetArmableResponse.action_server_result)
}

// -------------------------------------------------------------------

// SetDisarmableResponse

// .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
inline bool SetDisarmableResponse::_internal_has_action_server_result() const
{
    return this != internal_default_instance() && action_server_result_ != nullptr;
}
inline bool SetDisarmableResponse::has_action_server_result() const
{
    return _internal_has_action_server_result();
}
inline void SetDisarmableResponse::clear_action_server_result()
{
    if (GetArena() == nullptr && action_server_result_ != nullptr) {
        delete action_server_result_;
    }
    action_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
SetDisarmableResponse::_internal_action_server_result() const
{
    const ::mavsdk::rpc::action_server::ActionServerResult* p = action_server_result_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::action_server::ActionServerResult*>(
                   &::mavsdk::rpc::action_server::_ActionServerResult_default_instance_);
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
SetDisarmableResponse::action_server_result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.SetDisarmableResponse.action_server_result)
    return _internal_action_server_result();
}
inline void SetDisarmableResponse::unsafe_arena_set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_server_result_);
    }
    action_server_result_ = action_server_result;
    if (action_server_result) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.SetDisarmableResponse.action_server_result)
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetDisarmableResponse::release_action_server_result()
{
    auto temp = unsafe_arena_release_action_server_result();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetDisarmableResponse::unsafe_arena_release_action_server_result()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.SetDisarmableResponse.action_server_result)

    ::mavsdk::rpc::action_server::ActionServerResult* temp = action_server_result_;
    action_server_result_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetDisarmableResponse::_internal_mutable_action_server_result()
{
    if (action_server_result_ == nullptr) {
        auto* p = CreateMaybeMessage<::mavsdk::rpc::action_server::ActionServerResult>(GetArena());
        action_server_result_ = p;
    }
    return action_server_result_;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetDisarmableResponse::mutable_action_server_result()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.SetDisarmableResponse.action_server_result)
    return _internal_mutable_action_server_result();
}
inline void SetDisarmableResponse::set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete action_server_result_;
    }
    if (action_server_result) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_server_result);
        if (message_arena != submessage_arena) {
            action_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, action_server_result, submessage_arena);
        }

    } else {
    }
    action_server_result_ = action_server_result;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.SetDisarmableResponse.action_server_result)
}

// -------------------------------------------------------------------

// SetAllowableFlightModesResponse

// .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
inline bool SetAllowableFlightModesResponse::_internal_has_action_server_result() const
{
    return this != internal_default_instance() && action_server_result_ != nullptr;
}
inline bool SetAllowableFlightModesResponse::has_action_server_result() const
{
    return _internal_has_action_server_result();
}
inline void SetAllowableFlightModesResponse::clear_action_server_result()
{
    if (GetArena() == nullptr && action_server_result_ != nullptr) {
        delete action_server_result_;
    }
    action_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
SetAllowableFlightModesResponse::_internal_action_server_result() const
{
    const ::mavsdk::rpc::action_server::ActionServerResult* p = action_server_result_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::action_server::ActionServerResult*>(
                   &::mavsdk::rpc::action_server::_ActionServerResult_default_instance_);
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
SetAllowableFlightModesResponse::action_server_result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.SetAllowableFlightModesResponse.action_server_result)
    return _internal_action_server_result();
}
inline void SetAllowableFlightModesResponse::unsafe_arena_set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_server_result_);
    }
    action_server_result_ = action_server_result;
    if (action_server_result) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.SetAllowableFlightModesResponse.action_server_result)
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetAllowableFlightModesResponse::release_action_server_result()
{
    auto temp = unsafe_arena_release_action_server_result();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetAllowableFlightModesResponse::unsafe_arena_release_action_server_result()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.SetAllowableFlightModesResponse.action_server_result)

    ::mavsdk::rpc::action_server::ActionServerResult* temp = action_server_result_;
    action_server_result_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetAllowableFlightModesResponse::_internal_mutable_action_server_result()
{
    if (action_server_result_ == nullptr) {
        auto* p = CreateMaybeMessage<::mavsdk::rpc::action_server::ActionServerResult>(GetArena());
        action_server_result_ = p;
    }
    return action_server_result_;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetAllowableFlightModesResponse::mutable_action_server_result()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.SetAllowableFlightModesResponse.action_server_result)
    return _internal_mutable_action_server_result();
}
inline void SetAllowableFlightModesResponse::set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete action_server_result_;
    }
    if (action_server_result) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_server_result);
        if (message_arena != submessage_arena) {
            action_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, action_server_result, submessage_arena);
        }

    } else {
    }
    action_server_result_ = action_server_result;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.SetAllowableFlightModesResponse.action_server_result)
}

// -------------------------------------------------------------------

// SetAllowTakeoffResponse

// .mavsdk.rpc.action_server.ActionServerResult action_server_result = 1;
inline bool SetAllowTakeoffResponse::_internal_has_action_server_result() const
{
    return this != internal_default_instance() && action_server_result_ != nullptr;
}
inline bool SetAllowTakeoffResponse::has_action_server_result() const
{
    return _internal_has_action_server_result();
}
inline void SetAllowTakeoffResponse::clear_action_server_result()
{
    if (GetArena() == nullptr && action_server_result_ != nullptr) {
        delete action_server_result_;
    }
    action_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
SetAllowTakeoffResponse::_internal_action_server_result() const
{
    const ::mavsdk::rpc::action_server::ActionServerResult* p = action_server_result_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::action_server::ActionServerResult*>(
                   &::mavsdk::rpc::action_server::_ActionServerResult_default_instance_);
}
inline const ::mavsdk::rpc::action_server::ActionServerResult&
SetAllowTakeoffResponse::action_server_result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.SetAllowTakeoffResponse.action_server_result)
    return _internal_action_server_result();
}
inline void SetAllowTakeoffResponse::unsafe_arena_set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_server_result_);
    }
    action_server_result_ = action_server_result;
    if (action_server_result) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.SetAllowTakeoffResponse.action_server_result)
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetAllowTakeoffResponse::release_action_server_result()
{
    auto temp = unsafe_arena_release_action_server_result();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetAllowTakeoffResponse::unsafe_arena_release_action_server_result()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.SetAllowTakeoffResponse.action_server_result)

    ::mavsdk::rpc::action_server::ActionServerResult* temp = action_server_result_;
    action_server_result_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetAllowTakeoffResponse::_internal_mutable_action_server_result()
{
    if (action_server_result_ == nullptr) {
        auto* p = CreateMaybeMessage<::mavsdk::rpc::action_server::ActionServerResult>(GetArena());
        action_server_result_ = p;
    }
    return action_server_result_;
}
inline ::mavsdk::rpc::action_server::ActionServerResult*
SetAllowTakeoffResponse::mutable_action_server_result()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.SetAllowTakeoffResponse.action_server_result)
    return _internal_mutable_action_server_result();
}
inline void SetAllowTakeoffResponse::set_allocated_action_server_result(
    ::mavsdk::rpc::action_server::ActionServerResult* action_server_result)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete action_server_result_;
    }
    if (action_server_result) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_server_result);
        if (message_arena != submessage_arena) {
            action_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, action_server_result, submessage_arena);
        }

    } else {
    }
    action_server_result_ = action_server_result;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.SetAllowTakeoffResponse.action_server_result)
}

// -------------------------------------------------------------------

// GetAllowableFlightModesResponse

// .mavsdk.rpc.action_server.AllowableFlightModes flight_modes = 1;
inline bool GetAllowableFlightModesResponse::_internal_has_flight_modes() const
{
    return this != internal_default_instance() && flight_modes_ != nullptr;
}
inline bool GetAllowableFlightModesResponse::has_flight_modes() const
{
    return _internal_has_flight_modes();
}
inline void GetAllowableFlightModesResponse::clear_flight_modes()
{
    if (GetArena() == nullptr && flight_modes_ != nullptr) {
        delete flight_modes_;
    }
    flight_modes_ = nullptr;
}
inline const ::mavsdk::rpc::action_server::AllowableFlightModes&
GetAllowableFlightModesResponse::_internal_flight_modes() const
{
    const ::mavsdk::rpc::action_server::AllowableFlightModes* p = flight_modes_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::action_server::AllowableFlightModes*>(
                   &::mavsdk::rpc::action_server::_AllowableFlightModes_default_instance_);
}
inline const ::mavsdk::rpc::action_server::AllowableFlightModes&
GetAllowableFlightModesResponse::flight_modes() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.GetAllowableFlightModesResponse.flight_modes)
    return _internal_flight_modes();
}
inline void GetAllowableFlightModesResponse::unsafe_arena_set_allocated_flight_modes(
    ::mavsdk::rpc::action_server::AllowableFlightModes* flight_modes)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flight_modes_);
    }
    flight_modes_ = flight_modes;
    if (flight_modes) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.GetAllowableFlightModesResponse.flight_modes)
}
inline ::mavsdk::rpc::action_server::AllowableFlightModes*
GetAllowableFlightModesResponse::release_flight_modes()
{
    auto temp = unsafe_arena_release_flight_modes();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::action_server::AllowableFlightModes*
GetAllowableFlightModesResponse::unsafe_arena_release_flight_modes()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.GetAllowableFlightModesResponse.flight_modes)

    ::mavsdk::rpc::action_server::AllowableFlightModes* temp = flight_modes_;
    flight_modes_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::action_server::AllowableFlightModes*
GetAllowableFlightModesResponse::_internal_mutable_flight_modes()
{
    if (flight_modes_ == nullptr) {
        auto* p =
            CreateMaybeMessage<::mavsdk::rpc::action_server::AllowableFlightModes>(GetArena());
        flight_modes_ = p;
    }
    return flight_modes_;
}
inline ::mavsdk::rpc::action_server::AllowableFlightModes*
GetAllowableFlightModesResponse::mutable_flight_modes()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.GetAllowableFlightModesResponse.flight_modes)
    return _internal_mutable_flight_modes();
}
inline void GetAllowableFlightModesResponse::set_allocated_flight_modes(
    ::mavsdk::rpc::action_server::AllowableFlightModes* flight_modes)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete flight_modes_;
    }
    if (flight_modes) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flight_modes);
        if (message_arena != submessage_arena) {
            flight_modes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, flight_modes, submessage_arena);
        }

    } else {
    }
    flight_modes_ = flight_modes;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.GetAllowableFlightModesResponse.flight_modes)
}

// -------------------------------------------------------------------

// AllowableFlightModes

// bool can_auto_mode = 1;
inline void AllowableFlightModes::clear_can_auto_mode()
{
    can_auto_mode_ = false;
}
inline bool AllowableFlightModes::_internal_can_auto_mode() const
{
    return can_auto_mode_;
}
inline bool AllowableFlightModes::can_auto_mode() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.AllowableFlightModes.can_auto_mode)
    return _internal_can_auto_mode();
}
inline void AllowableFlightModes::_internal_set_can_auto_mode(bool value)
{
    can_auto_mode_ = value;
}
inline void AllowableFlightModes::set_can_auto_mode(bool value)
{
    _internal_set_can_auto_mode(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.AllowableFlightModes.can_auto_mode)
}

// bool can_guided_mode = 2;
inline void AllowableFlightModes::clear_can_guided_mode()
{
    can_guided_mode_ = false;
}
inline bool AllowableFlightModes::_internal_can_guided_mode() const
{
    return can_guided_mode_;
}
inline bool AllowableFlightModes::can_guided_mode() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.AllowableFlightModes.can_guided_mode)
    return _internal_can_guided_mode();
}
inline void AllowableFlightModes::_internal_set_can_guided_mode(bool value)
{
    can_guided_mode_ = value;
}
inline void AllowableFlightModes::set_can_guided_mode(bool value)
{
    _internal_set_can_guided_mode(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.AllowableFlightModes.can_guided_mode)
}

// bool can_stabilize_mode = 3;
inline void AllowableFlightModes::clear_can_stabilize_mode()
{
    can_stabilize_mode_ = false;
}
inline bool AllowableFlightModes::_internal_can_stabilize_mode() const
{
    return can_stabilize_mode_;
}
inline bool AllowableFlightModes::can_stabilize_mode() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.AllowableFlightModes.can_stabilize_mode)
    return _internal_can_stabilize_mode();
}
inline void AllowableFlightModes::_internal_set_can_stabilize_mode(bool value)
{
    can_stabilize_mode_ = value;
}
inline void AllowableFlightModes::set_can_stabilize_mode(bool value)
{
    _internal_set_can_stabilize_mode(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.AllowableFlightModes.can_stabilize_mode)
}

// -------------------------------------------------------------------

// ArmDisarm

// bool arm = 1;
inline void ArmDisarm::clear_arm()
{
    arm_ = false;
}
inline bool ArmDisarm::_internal_arm() const
{
    return arm_;
}
inline bool ArmDisarm::arm() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.ArmDisarm.arm)
    return _internal_arm();
}
inline void ArmDisarm::_internal_set_arm(bool value)
{
    arm_ = value;
}
inline void ArmDisarm::set_arm(bool value)
{
    _internal_set_arm(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.ArmDisarm.arm)
}

// bool force = 2;
inline void ArmDisarm::clear_force()
{
    force_ = false;
}
inline bool ArmDisarm::_internal_force() const
{
    return force_;
}
inline bool ArmDisarm::force() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.ArmDisarm.force)
    return _internal_force();
}
inline void ArmDisarm::_internal_set_force(bool value)
{
    force_ = value;
}
inline void ArmDisarm::set_force(bool value)
{
    _internal_set_force(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.ArmDisarm.force)
}

// -------------------------------------------------------------------

// ActionServerResult

// .mavsdk.rpc.action_server.ActionServerResult.Result result = 1;
inline void ActionServerResult::clear_result()
{
    result_ = 0;
}
inline ::mavsdk::rpc::action_server::ActionServerResult_Result
ActionServerResult::_internal_result() const
{
    return static_cast<::mavsdk::rpc::action_server::ActionServerResult_Result>(result_);
}
inline ::mavsdk::rpc::action_server::ActionServerResult_Result ActionServerResult::result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.ActionServerResult.result)
    return _internal_result();
}
inline void ActionServerResult::_internal_set_result(
    ::mavsdk::rpc::action_server::ActionServerResult_Result value)
{
    result_ = value;
}
inline void
ActionServerResult::set_result(::mavsdk::rpc::action_server::ActionServerResult_Result value)
{
    _internal_set_result(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.ActionServerResult.result)
}

// string result_str = 2;
inline void ActionServerResult::clear_result_str()
{
    result_str_.ClearToEmpty(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ActionServerResult::result_str() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.action_server.ActionServerResult.result_str)
    return _internal_result_str();
}
inline void ActionServerResult::set_result_str(const std::string& value)
{
    _internal_set_result_str(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.action_server.ActionServerResult.result_str)
}
inline std::string* ActionServerResult::mutable_result_str()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.action_server.ActionServerResult.result_str)
    return _internal_mutable_result_str();
}
inline const std::string& ActionServerResult::_internal_result_str() const
{
    return result_str_.Get();
}
inline void ActionServerResult::_internal_set_result_str(const std::string& value)
{
    result_str_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ActionServerResult::set_result_str(std::string&& value)
{
    result_str_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value),
        GetArena());
    // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.action_server.ActionServerResult.result_str)
}
inline void ActionServerResult::set_result_str(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    result_str_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value),
        GetArena());
    // @@protoc_insertion_point(field_set_char:mavsdk.rpc.action_server.ActionServerResult.result_str)
}
inline void ActionServerResult::set_result_str(const char* value, size_t size)
{
    result_str_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size),
        GetArena());
    // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.action_server.ActionServerResult.result_str)
}
inline std::string* ActionServerResult::_internal_mutable_result_str()
{
    return result_str_.Mutable(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ActionServerResult::release_result_str()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.action_server.ActionServerResult.result_str)
    return result_str_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActionServerResult::set_allocated_result_str(std::string* result_str)
{
    if (result_str != nullptr) {
    } else {
    }
    result_str_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str, GetArena());
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.action_server.ActionServerResult.result_str)
}
inline std::string* ActionServerResult::unsafe_arena_release_result_str()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:mavsdk.rpc.action_server.ActionServerResult.result_str)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return result_str_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActionServerResult::unsafe_arena_set_allocated_result_str(std::string* result_str)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (result_str != nullptr) {
    } else {
    }
    result_str_.UnsafeArenaSetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.action_server.ActionServerResult.result_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace action_server
} // namespace rpc
} // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template<>
struct is_proto_enum<::mavsdk::rpc::action_server::ActionServerResult_Result> : ::std::true_type {};
template<>
inline const EnumDescriptor*
GetEnumDescriptor<::mavsdk::rpc::action_server::ActionServerResult_Result>()
{
    return ::mavsdk::rpc::action_server::ActionServerResult_Result_descriptor();
}
template<> struct is_proto_enum<::mavsdk::rpc::action_server::FlightMode> : ::std::true_type {};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::action_server::FlightMode>()
{
    return ::mavsdk::rpc::action_server::FlightMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_action_5fserver_2faction_5fserver_2eproto

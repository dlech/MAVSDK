// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry_server/telemetry_server.proto

#include "telemetry_server/telemetry_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccelerationFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AngularVelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AngularVelocityFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Battery_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Covariance_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpsInfo_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroundTruth_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Heading_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Imu_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MagneticFieldFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Odometry_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PositionVelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawGps_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RcStatus_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusText_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace telemetry_server {
class PublishPositionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishPositionRequest> _instance;
} _PublishPositionRequest_default_instance_;
class PublishHomeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishHomeRequest> _instance;
} _PublishHomeRequest_default_instance_;
class PublishSysStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishSysStatusRequest> _instance;
} _PublishSysStatusRequest_default_instance_;
class PublishExtendedSysStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishExtendedSysStateRequest> _instance;
} _PublishExtendedSysStateRequest_default_instance_;
class PublishInAirRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishInAirRequest> _instance;
} _PublishInAirRequest_default_instance_;
class PublishLandedStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishLandedStateRequest> _instance;
} _PublishLandedStateRequest_default_instance_;
class PublishRawGpsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishRawGpsRequest> _instance;
} _PublishRawGpsRequest_default_instance_;
class PublishBatteryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishBatteryRequest> _instance;
} _PublishBatteryRequest_default_instance_;
class PublishRcStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishRcStatusRequest> _instance;
} _PublishRcStatusRequest_default_instance_;
class PublishStatusTextRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishStatusTextRequest> _instance;
} _PublishStatusTextRequest_default_instance_;
class PublishOdometryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishOdometryRequest> _instance;
} _PublishOdometryRequest_default_instance_;
class PublishPositionVelocityNedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishPositionVelocityNedRequest> _instance;
} _PublishPositionVelocityNedRequest_default_instance_;
class PublishGroundTruthRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishGroundTruthRequest> _instance;
} _PublishGroundTruthRequest_default_instance_;
class PublishImuRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishImuRequest> _instance;
} _PublishImuRequest_default_instance_;
class PublishScaledImuRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishScaledImuRequest> _instance;
} _PublishScaledImuRequest_default_instance_;
class PublishRawImuRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishRawImuRequest> _instance;
} _PublishRawImuRequest_default_instance_;
class PublishUnixEpochTimeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishUnixEpochTimeRequest> _instance;
} _PublishUnixEpochTimeRequest_default_instance_;
class PublishPositionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishPositionResponse> _instance;
} _PublishPositionResponse_default_instance_;
class PublishHomeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishHomeResponse> _instance;
} _PublishHomeResponse_default_instance_;
class PublishSysStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishSysStatusResponse> _instance;
} _PublishSysStatusResponse_default_instance_;
class PublishExtendedSysStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishExtendedSysStateResponse> _instance;
} _PublishExtendedSysStateResponse_default_instance_;
class PublishRawGpsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishRawGpsResponse> _instance;
} _PublishRawGpsResponse_default_instance_;
class PublishBatteryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishBatteryResponse> _instance;
} _PublishBatteryResponse_default_instance_;
class PublishStatusTextResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishStatusTextResponse> _instance;
} _PublishStatusTextResponse_default_instance_;
class PublishOdometryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishOdometryResponse> _instance;
} _PublishOdometryResponse_default_instance_;
class PublishPositionVelocityNedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishPositionVelocityNedResponse> _instance;
} _PublishPositionVelocityNedResponse_default_instance_;
class PublishGroundTruthResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishGroundTruthResponse> _instance;
} _PublishGroundTruthResponse_default_instance_;
class PublishImuResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishImuResponse> _instance;
} _PublishImuResponse_default_instance_;
class PublishScaledImuResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishScaledImuResponse> _instance;
} _PublishScaledImuResponse_default_instance_;
class PublishRawImuResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishRawImuResponse> _instance;
} _PublishRawImuResponse_default_instance_;
class PublishUnixEpochTimeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishUnixEpochTimeResponse> _instance;
} _PublishUnixEpochTimeResponse_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class HeadingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Heading> _instance;
} _Heading_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Quaternion> _instance;
} _Quaternion_default_instance_;
class EulerAngleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EulerAngle> _instance;
} _EulerAngle_default_instance_;
class AngularVelocityBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AngularVelocityBody> _instance;
} _AngularVelocityBody_default_instance_;
class GpsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpsInfo> _instance;
} _GpsInfo_default_instance_;
class RawGpsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawGps> _instance;
} _RawGps_default_instance_;
class BatteryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Battery> _instance;
} _Battery_default_instance_;
class RcStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RcStatus> _instance;
} _RcStatus_default_instance_;
class StatusTextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusText> _instance;
} _StatusText_default_instance_;
class ActuatorControlTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActuatorControlTarget> _instance;
} _ActuatorControlTarget_default_instance_;
class ActuatorOutputStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActuatorOutputStatus> _instance;
} _ActuatorOutputStatus_default_instance_;
class CovarianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Covariance> _instance;
} _Covariance_default_instance_;
class VelocityBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VelocityBody> _instance;
} _VelocityBody_default_instance_;
class PositionBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionBody> _instance;
} _PositionBody_default_instance_;
class OdometryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Odometry> _instance;
} _Odometry_default_instance_;
class DistanceSensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DistanceSensor> _instance;
} _DistanceSensor_default_instance_;
class ScaledPressureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScaledPressure> _instance;
} _ScaledPressure_default_instance_;
class PositionNedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionNed> _instance;
} _PositionNed_default_instance_;
class VelocityNedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VelocityNed> _instance;
} _VelocityNed_default_instance_;
class PositionVelocityNedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionVelocityNed> _instance;
} _PositionVelocityNed_default_instance_;
class GroundTruthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroundTruth> _instance;
} _GroundTruth_default_instance_;
class FixedwingMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixedwingMetrics> _instance;
} _FixedwingMetrics_default_instance_;
class AccelerationFrdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccelerationFrd> _instance;
} _AccelerationFrd_default_instance_;
class AngularVelocityFrdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AngularVelocityFrd> _instance;
} _AngularVelocityFrd_default_instance_;
class MagneticFieldFrdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MagneticFieldFrd> _instance;
} _MagneticFieldFrd_default_instance_;
class ImuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Imu> _instance;
} _Imu_default_instance_;
class TelemetryServerResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TelemetryServerResult> _instance;
} _TelemetryServerResult_default_instance_;
}  // namespace telemetry_server
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsscc_info_AccelerationFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_AccelerationFrd_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::AccelerationFrd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::AccelerationFrd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccelerationFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccelerationFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_ActuatorControlTarget_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_ActuatorControlTarget_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::ActuatorControlTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::ActuatorControlTarget::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActuatorControlTarget_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActuatorControlTarget_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_ActuatorOutputStatus_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_ActuatorOutputStatus_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::ActuatorOutputStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::ActuatorOutputStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActuatorOutputStatus_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActuatorOutputStatus_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_AngularVelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_AngularVelocityBody_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::AngularVelocityBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AngularVelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AngularVelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_AngularVelocityFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_AngularVelocityFrd_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::AngularVelocityFrd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AngularVelocityFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AngularVelocityFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_Battery_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_Battery_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::Battery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::Battery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Battery_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Battery_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_Covariance_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_Covariance_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::Covariance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::Covariance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Covariance_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Covariance_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_DistanceSensor_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_DistanceSensor_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::DistanceSensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::DistanceSensor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistanceSensor_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DistanceSensor_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_EulerAngle_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_EulerAngle_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::EulerAngle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::EulerAngle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EulerAngle_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EulerAngle_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_FixedwingMetrics_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_FixedwingMetrics_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::FixedwingMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::FixedwingMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedwingMetrics_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FixedwingMetrics_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_GpsInfo_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_GpsInfo_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::GpsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::GpsInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpsInfo_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GpsInfo_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_GroundTruth_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_GroundTruth_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::GroundTruth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::GroundTruth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroundTruth_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroundTruth_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_Heading_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_Heading_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::Heading();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::Heading::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Heading_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Heading_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_Imu_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_Imu_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::Imu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::Imu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Imu_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Imu_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_AccelerationFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
      &scc_info_AngularVelocityFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
      &scc_info_MagneticFieldFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_MagneticFieldFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_MagneticFieldFrd_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::MagneticFieldFrd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MagneticFieldFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MagneticFieldFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_Odometry_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_Odometry_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::Odometry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::Odometry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Odometry_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Odometry_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_PositionBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
      &scc_info_Quaternion_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
      &scc_info_VelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
      &scc_info_AngularVelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
      &scc_info_Covariance_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_Position_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_Position_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Position_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_PositionBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PositionBody_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PositionBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PositionBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_PositionNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PositionNed_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PositionNed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PositionNed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_PositionVelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PositionVelocityNed_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PositionVelocityNed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PositionVelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PositionVelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_PositionNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
      &scc_info_VelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishBatteryRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishBatteryRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishBatteryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishBatteryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishBatteryRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishBatteryRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_Battery_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishBatteryResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishBatteryResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishBatteryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishBatteryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishBatteryResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishBatteryResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishExtendedSysStateRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishExtendedSysStateRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublishExtendedSysStateRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PublishExtendedSysStateRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_PublishExtendedSysStateResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishExtendedSysStateResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishExtendedSysStateResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishExtendedSysStateResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishGroundTruthRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishGroundTruthRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishGroundTruthRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishGroundTruthRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_GroundTruth_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishGroundTruthResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishGroundTruthResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishGroundTruthResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishGroundTruthResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishHomeRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishHomeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishHomeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishHomeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishHomeRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishHomeRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_Position_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishHomeResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishHomeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishHomeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishHomeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishHomeResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishHomeResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishImuRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishImuRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishImuRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_Imu_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishImuResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishImuResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishImuResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishInAirRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishInAirRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishInAirRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishInAirRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublishInAirRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PublishInAirRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_PublishLandedStateRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishLandedStateRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishLandedStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishLandedStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublishLandedStateRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PublishLandedStateRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_PublishOdometryRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishOdometryRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishOdometryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishOdometryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishOdometryRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishOdometryRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_Odometry_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishOdometryResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishOdometryResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishOdometryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishOdometryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishOdometryResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishOdometryResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishPositionRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishPositionRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishPositionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishPositionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PublishPositionRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PublishPositionRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_Position_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
      &scc_info_VelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
      &scc_info_Heading_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishPositionResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishPositionResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishPositionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishPositionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishPositionResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishPositionResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishPositionVelocityNedRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishPositionVelocityNedRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishPositionVelocityNedRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishPositionVelocityNedRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_PositionVelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishPositionVelocityNedResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishPositionVelocityNedResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishPositionVelocityNedResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishPositionVelocityNedResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishRawGpsRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishRawGpsRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishRawGpsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishRawGpsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PublishRawGpsRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PublishRawGpsRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_RawGps_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
      &scc_info_GpsInfo_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishRawGpsResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishRawGpsResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishRawGpsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishRawGpsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishRawGpsResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishRawGpsResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishRawImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishRawImuRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishRawImuRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishRawImuRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishRawImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishRawImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_Imu_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishRawImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishRawImuResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishRawImuResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishRawImuResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishRawImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishRawImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishRcStatusRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishRcStatusRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishRcStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishRcStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishRcStatusRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishRcStatusRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_RcStatus_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishScaledImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishScaledImuRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishScaledImuRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishScaledImuRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishScaledImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishScaledImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_Imu_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishScaledImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishScaledImuResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishScaledImuResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishScaledImuResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishScaledImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishScaledImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishStatusTextRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishStatusTextRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishStatusTextRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishStatusTextRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishStatusTextRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishStatusTextRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_StatusText_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishStatusTextResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishStatusTextResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishStatusTextResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishStatusTextResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishStatusTextResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishStatusTextResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishSysStatusRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishSysStatusRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishSysStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishSysStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishSysStatusRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishSysStatusRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_Battery_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishSysStatusResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishSysStatusResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishSysStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishSysStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishSysStatusResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishSysStatusResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_PublishUnixEpochTimeRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishUnixEpochTimeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublishUnixEpochTimeRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PublishUnixEpochTimeRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_PublishUnixEpochTimeResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_PublishUnixEpochTimeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishUnixEpochTimeResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishUnixEpochTimeResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {
      &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_Quaternion_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_Quaternion_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::Quaternion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::Quaternion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Quaternion_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_RawGps_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_RawGps_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::RawGps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::RawGps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawGps_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RawGps_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_RcStatus_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_RcStatus_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::RcStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::RcStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RcStatus_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RcStatus_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_ScaledPressure_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_ScaledPressure_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::ScaledPressure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::ScaledPressure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScaledPressure_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScaledPressure_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_StatusText_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_StatusText_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::StatusText();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::StatusText::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusText_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusText_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::TelemetryServerResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_VelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_VelocityBody_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::VelocityBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::VelocityBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_VelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry_server::_VelocityNed_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry_server::VelocityNed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry_server::VelocityNed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_telemetry_5fserver_2ftelemetry_5fserver_2eproto[59];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionRequest, position_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionRequest, velocity_ned_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionRequest, heading_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishHomeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishHomeRequest, home_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, battery_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, rc_receiver_status_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, gyro_status_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, accel_status_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, mag_status_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, gps_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest, vtol_state_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest, landed_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishInAirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishInAirRequest, is_in_air_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishLandedStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishLandedStateRequest, landed_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawGpsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawGpsRequest, raw_gps_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawGpsRequest, gps_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishBatteryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishBatteryRequest, battery_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRcStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRcStatusRequest, rc_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishStatusTextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishStatusTextRequest, status_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishOdometryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishOdometryRequest, odometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest, position_velocity_ned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest, ground_truth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishImuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishImuRequest, imu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishScaledImuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishScaledImuRequest, imu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawImuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawImuRequest, imu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest, time_us_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishHomeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishHomeResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawGpsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawGpsResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishBatteryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishBatteryResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishStatusTextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishStatusTextResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishOdometryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishOdometryResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishImuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishImuResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishScaledImuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishScaledImuResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawImuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawImuResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse, telemetry_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Position, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Position, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Position, absolute_altitude_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Position, relative_altitude_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Heading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Heading, heading_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Quaternion, w_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Quaternion, z_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Quaternion, timestamp_us_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::EulerAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::EulerAngle, roll_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::EulerAngle, pitch_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::EulerAngle, yaw_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::EulerAngle, timestamp_us_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityBody, roll_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityBody, pitch_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityBody, yaw_rad_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GpsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GpsInfo, num_satellites_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GpsInfo, fix_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, timestamp_us_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, absolute_altitude_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, hdop_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, vdop_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, velocity_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, cog_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, altitude_ellipsoid_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, horizontal_uncertainty_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, vertical_uncertainty_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, velocity_uncertainty_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, heading_uncertainty_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, yaw_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Battery, voltage_v_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Battery, remaining_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RcStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RcStatus, was_available_once_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RcStatus, is_available_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RcStatus, signal_strength_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::StatusText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::StatusText, type_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::StatusText, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ActuatorControlTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ActuatorControlTarget, group_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ActuatorControlTarget, controls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ActuatorOutputStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ActuatorOutputStatus, active_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ActuatorOutputStatus, actuator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Covariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Covariance, covariance_matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityBody, x_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityBody, y_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityBody, z_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionBody, x_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionBody, y_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionBody, z_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, time_usec_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, frame_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, child_frame_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, position_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, q_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, velocity_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, angular_velocity_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, pose_covariance_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, velocity_covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::DistanceSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::DistanceSensor, minimum_distance_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::DistanceSensor, maximum_distance_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::DistanceSensor, current_distance_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ScaledPressure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ScaledPressure, timestamp_us_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ScaledPressure, absolute_pressure_hpa_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ScaledPressure, differential_pressure_hpa_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ScaledPressure, temperature_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ScaledPressure, differential_pressure_temperature_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionNed, north_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionNed, east_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionNed, down_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityNed, north_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityNed, east_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityNed, down_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionVelocityNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionVelocityNed, position_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionVelocityNed, velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GroundTruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GroundTruth, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GroundTruth, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GroundTruth, absolute_altitude_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::FixedwingMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::FixedwingMetrics, airspeed_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::FixedwingMetrics, throttle_percentage_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::FixedwingMetrics, climb_rate_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AccelerationFrd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AccelerationFrd, forward_m_s2_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AccelerationFrd, right_m_s2_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AccelerationFrd, down_m_s2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityFrd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityFrd, forward_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityFrd, right_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityFrd, down_rad_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::MagneticFieldFrd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::MagneticFieldFrd, forward_gauss_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::MagneticFieldFrd, right_gauss_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::MagneticFieldFrd, down_gauss_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Imu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Imu, acceleration_frd_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Imu, angular_velocity_frd_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Imu, magnetic_field_frd_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Imu, temperature_degc_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Imu, timestamp_us_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::TelemetryServerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::TelemetryServerResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::TelemetryServerResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishPositionRequest)},
  { 8, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishHomeRequest)},
  { 14, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest)},
  { 25, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest)},
  { 32, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishInAirRequest)},
  { 38, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishLandedStateRequest)},
  { 44, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishRawGpsRequest)},
  { 51, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishBatteryRequest)},
  { 57, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishRcStatusRequest)},
  { 63, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishStatusTextRequest)},
  { 69, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishOdometryRequest)},
  { 75, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest)},
  { 81, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest)},
  { 87, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishImuRequest)},
  { 93, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishScaledImuRequest)},
  { 99, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishRawImuRequest)},
  { 105, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest)},
  { 111, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishPositionResponse)},
  { 117, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishHomeResponse)},
  { 123, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishSysStatusResponse)},
  { 129, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse)},
  { 135, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishRawGpsResponse)},
  { 141, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishBatteryResponse)},
  { 147, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishStatusTextResponse)},
  { 153, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishOdometryResponse)},
  { 159, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse)},
  { 165, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse)},
  { 171, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishImuResponse)},
  { 177, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishScaledImuResponse)},
  { 183, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishRawImuResponse)},
  { 189, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse)},
  { 195, -1, sizeof(::mavsdk::rpc::telemetry_server::Position)},
  { 204, -1, sizeof(::mavsdk::rpc::telemetry_server::Heading)},
  { 210, -1, sizeof(::mavsdk::rpc::telemetry_server::Quaternion)},
  { 220, -1, sizeof(::mavsdk::rpc::telemetry_server::EulerAngle)},
  { 229, -1, sizeof(::mavsdk::rpc::telemetry_server::AngularVelocityBody)},
  { 237, -1, sizeof(::mavsdk::rpc::telemetry_server::GpsInfo)},
  { 244, -1, sizeof(::mavsdk::rpc::telemetry_server::RawGps)},
  { 263, -1, sizeof(::mavsdk::rpc::telemetry_server::Battery)},
  { 270, -1, sizeof(::mavsdk::rpc::telemetry_server::RcStatus)},
  { 278, -1, sizeof(::mavsdk::rpc::telemetry_server::StatusText)},
  { 285, -1, sizeof(::mavsdk::rpc::telemetry_server::ActuatorControlTarget)},
  { 292, -1, sizeof(::mavsdk::rpc::telemetry_server::ActuatorOutputStatus)},
  { 299, -1, sizeof(::mavsdk::rpc::telemetry_server::Covariance)},
  { 305, -1, sizeof(::mavsdk::rpc::telemetry_server::VelocityBody)},
  { 313, -1, sizeof(::mavsdk::rpc::telemetry_server::PositionBody)},
  { 321, -1, sizeof(::mavsdk::rpc::telemetry_server::Odometry)},
  { 335, -1, sizeof(::mavsdk::rpc::telemetry_server::DistanceSensor)},
  { 343, -1, sizeof(::mavsdk::rpc::telemetry_server::ScaledPressure)},
  { 353, -1, sizeof(::mavsdk::rpc::telemetry_server::PositionNed)},
  { 361, -1, sizeof(::mavsdk::rpc::telemetry_server::VelocityNed)},
  { 369, -1, sizeof(::mavsdk::rpc::telemetry_server::PositionVelocityNed)},
  { 376, -1, sizeof(::mavsdk::rpc::telemetry_server::GroundTruth)},
  { 384, -1, sizeof(::mavsdk::rpc::telemetry_server::FixedwingMetrics)},
  { 392, -1, sizeof(::mavsdk::rpc::telemetry_server::AccelerationFrd)},
  { 400, -1, sizeof(::mavsdk::rpc::telemetry_server::AngularVelocityFrd)},
  { 408, -1, sizeof(::mavsdk::rpc::telemetry_server::MagneticFieldFrd)},
  { 416, -1, sizeof(::mavsdk::rpc::telemetry_server::Imu)},
  { 426, -1, sizeof(::mavsdk::rpc::telemetry_server::TelemetryServerResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishPositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishHomeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishSysStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishExtendedSysStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishInAirRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishLandedStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishRawGpsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishBatteryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishRcStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishStatusTextRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishOdometryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishPositionVelocityNedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishGroundTruthRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishImuRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishScaledImuRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishRawImuRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishUnixEpochTimeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishPositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishHomeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishSysStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishExtendedSysStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishRawGpsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishBatteryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishStatusTextResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishOdometryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishPositionVelocityNedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishGroundTruthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishImuResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishScaledImuResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishRawImuResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PublishUnixEpochTimeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_Heading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_Quaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_EulerAngle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_AngularVelocityBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_GpsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_RawGps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_Battery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_RcStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_StatusText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_ActuatorControlTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_ActuatorOutputStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_Covariance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_VelocityBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PositionBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_Odometry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_DistanceSensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_ScaledPressure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PositionNed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_VelocityNed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_PositionVelocityNed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_GroundTruth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_FixedwingMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_AccelerationFrd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_AngularVelocityFrd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_MagneticFieldFrd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_Imu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_),
};

const char descriptor_table_protodef_telemetry_5fserver_2ftelemetry_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'telemetry_server/telemetry_server.prot"
  "o\022\033mavsdk.rpc.telemetry_server\032\024mavsdk_o"
  "ptions.proto\"\310\001\n\026PublishPositionRequest\022"
  "7\n\010position\030\001 \001(\0132%.mavsdk.rpc.telemetry"
  "_server.Position\022>\n\014velocity_ned\030\002 \001(\0132("
  ".mavsdk.rpc.telemetry_server.VelocityNed"
  "\0225\n\007heading\030\003 \001(\0132$.mavsdk.rpc.telemetry"
  "_server.Heading\"I\n\022PublishHomeRequest\0223\n"
  "\004home\030\001 \001(\0132%.mavsdk.rpc.telemetry_serve"
  "r.Position\"\277\001\n\027PublishSysStatusRequest\0225"
  "\n\007battery\030\001 \001(\0132$.mavsdk.rpc.telemetry_s"
  "erver.Battery\022\032\n\022rc_receiver_status\030\002 \001("
  "\010\022\023\n\013gyro_status\030\003 \001(\010\022\024\n\014accel_status\030\004"
  " \001(\010\022\022\n\nmag_status\030\005 \001(\010\022\022\n\ngps_status\030\006"
  " \001(\010\"\234\001\n\036PublishExtendedSysStateRequest\022"
  ":\n\nvtol_state\030\001 \001(\0162&.mavsdk.rpc.telemet"
  "ry_server.VtolState\022>\n\014landed_state\030\002 \001("
  "\0162(.mavsdk.rpc.telemetry_server.LandedSt"
  "ate\"(\n\023PublishInAirRequest\022\021\n\tis_in_air\030"
  "\001 \001(\010\"[\n\031PublishLandedStateRequest\022>\n\014la"
  "nded_state\030\001 \001(\0162(.mavsdk.rpc.telemetry_"
  "server.LandedState\"\204\001\n\024PublishRawGpsRequ"
  "est\0224\n\007raw_gps\030\001 \001(\0132#.mavsdk.rpc.teleme"
  "try_server.RawGps\0226\n\010gps_info\030\002 \001(\0132$.ma"
  "vsdk.rpc.telemetry_server.GpsInfo\"N\n\025Pub"
  "lishBatteryRequest\0225\n\007battery\030\001 \001(\0132$.ma"
  "vsdk.rpc.telemetry_server.Battery\"R\n\026Pub"
  "lishRcStatusRequest\0228\n\trc_status\030\001 \001(\0132%"
  ".mavsdk.rpc.telemetry_server.RcStatus\"X\n"
  "\030PublishStatusTextRequest\022<\n\013status_text"
  "\030\001 \001(\0132\'.mavsdk.rpc.telemetry_server.Sta"
  "tusText\"Q\n\026PublishOdometryRequest\0227\n\010odo"
  "metry\030\001 \001(\0132%.mavsdk.rpc.telemetry_serve"
  "r.Odometry\"t\n!PublishPositionVelocityNed"
  "Request\022O\n\025position_velocity_ned\030\001 \001(\01320"
  ".mavsdk.rpc.telemetry_server.PositionVel"
  "ocityNed\"[\n\031PublishGroundTruthRequest\022>\n"
  "\014ground_truth\030\001 \001(\0132(.mavsdk.rpc.telemet"
  "ry_server.GroundTruth\"B\n\021PublishImuReque"
  "st\022-\n\003imu\030\001 \001(\0132 .mavsdk.rpc.telemetry_s"
  "erver.Imu\"H\n\027PublishScaledImuRequest\022-\n\003"
  "imu\030\001 \001(\0132 .mavsdk.rpc.telemetry_server."
  "Imu\"E\n\024PublishRawImuRequest\022-\n\003imu\030\001 \001(\013"
  "2 .mavsdk.rpc.telemetry_server.Imu\".\n\033Pu"
  "blishUnixEpochTimeRequest\022\017\n\007time_us\030\001 \001"
  "(\004\"n\n\027PublishPositionResponse\022S\n\027telemet"
  "ry_server_result\030\001 \001(\01322.mavsdk.rpc.tele"
  "metry_server.TelemetryServerResult\"j\n\023Pu"
  "blishHomeResponse\022S\n\027telemetry_server_re"
  "sult\030\001 \001(\01322.mavsdk.rpc.telemetry_server"
  ".TelemetryServerResult\"o\n\030PublishSysStat"
  "usResponse\022S\n\027telemetry_server_result\030\001 "
  "\001(\01322.mavsdk.rpc.telemetry_server.Teleme"
  "tryServerResult\"v\n\037PublishExtendedSysSta"
  "teResponse\022S\n\027telemetry_server_result\030\001 "
  "\001(\01322.mavsdk.rpc.telemetry_server.Teleme"
  "tryServerResult\"l\n\025PublishRawGpsResponse"
  "\022S\n\027telemetry_server_result\030\001 \001(\01322.mavs"
  "dk.rpc.telemetry_server.TelemetryServerR"
  "esult\"m\n\026PublishBatteryResponse\022S\n\027telem"
  "etry_server_result\030\001 \001(\01322.mavsdk.rpc.te"
  "lemetry_server.TelemetryServerResult\"p\n\031"
  "PublishStatusTextResponse\022S\n\027telemetry_s"
  "erver_result\030\001 \001(\01322.mavsdk.rpc.telemetr"
  "y_server.TelemetryServerResult\"n\n\027Publis"
  "hOdometryResponse\022S\n\027telemetry_server_re"
  "sult\030\001 \001(\01322.mavsdk.rpc.telemetry_server"
  ".TelemetryServerResult\"y\n\"PublishPositio"
  "nVelocityNedResponse\022S\n\027telemetry_server"
  "_result\030\001 \001(\01322.mavsdk.rpc.telemetry_ser"
  "ver.TelemetryServerResult\"q\n\032PublishGrou"
  "ndTruthResponse\022S\n\027telemetry_server_resu"
  "lt\030\001 \001(\01322.mavsdk.rpc.telemetry_server.T"
  "elemetryServerResult\"i\n\022PublishImuRespon"
  "se\022S\n\027telemetry_server_result\030\001 \001(\01322.ma"
  "vsdk.rpc.telemetry_server.TelemetryServe"
  "rResult\"o\n\030PublishScaledImuResponse\022S\n\027t"
  "elemetry_server_result\030\001 \001(\01322.mavsdk.rp"
  "c.telemetry_server.TelemetryServerResult"
  "\"l\n\025PublishRawImuResponse\022S\n\027telemetry_s"
  "erver_result\030\001 \001(\01322.mavsdk.rpc.telemetr"
  "y_server.TelemetryServerResult\"s\n\034Publis"
  "hUnixEpochTimeResponse\022S\n\027telemetry_serv"
  "er_result\030\001 \001(\01322.mavsdk.rpc.telemetry_s"
  "erver.TelemetryServerResult\"\225\001\n\010Position"
  "\022\035\n\014latitude_deg\030\001 \001(\001B\007\202\265\030\003NaN\022\036\n\rlongi"
  "tude_deg\030\002 \001(\001B\007\202\265\030\003NaN\022$\n\023absolute_alti"
  "tude_m\030\003 \001(\002B\007\202\265\030\003NaN\022$\n\023relative_altitu"
  "de_m\030\004 \001(\002B\007\202\265\030\003NaN\"\'\n\007Heading\022\034\n\013headin"
  "g_deg\030\001 \001(\001B\007\202\265\030\003NaN\"r\n\nQuaternion\022\022\n\001w\030"
  "\001 \001(\002B\007\202\265\030\003NaN\022\022\n\001x\030\002 \001(\002B\007\202\265\030\003NaN\022\022\n\001y\030"
  "\003 \001(\002B\007\202\265\030\003NaN\022\022\n\001z\030\004 \001(\002B\007\202\265\030\003NaN\022\024\n\014ti"
  "mestamp_us\030\005 \001(\004\"s\n\nEulerAngle\022\031\n\010roll_d"
  "eg\030\001 \001(\002B\007\202\265\030\003NaN\022\032\n\tpitch_deg\030\002 \001(\002B\007\202\265"
  "\030\003NaN\022\030\n\007yaw_deg\030\003 \001(\002B\007\202\265\030\003NaN\022\024\n\014times"
  "tamp_us\030\004 \001(\004\"l\n\023AngularVelocityBody\022\033\n\n"
  "roll_rad_s\030\001 \001(\002B\007\202\265\030\003NaN\022\034\n\013pitch_rad_s"
  "\030\002 \001(\002B\007\202\265\030\003NaN\022\032\n\tyaw_rad_s\030\003 \001(\002B\007\202\265\030\003"
  "NaN\"`\n\007GpsInfo\022\035\n\016num_satellites\030\001 \001(\005B\005"
  "\202\265\030\0010\0226\n\010fix_type\030\002 \001(\0162$.mavsdk.rpc.tel"
  "emetry_server.FixType\"\337\002\n\006RawGps\022\024\n\014time"
  "stamp_us\030\001 \001(\004\022\024\n\014latitude_deg\030\002 \001(\001\022\025\n\r"
  "longitude_deg\030\003 \001(\001\022\033\n\023absolute_altitude"
  "_m\030\004 \001(\002\022\014\n\004hdop\030\005 \001(\002\022\014\n\004vdop\030\006 \001(\002\022\024\n\014"
  "velocity_m_s\030\007 \001(\002\022\017\n\007cog_deg\030\010 \001(\002\022\034\n\024a"
  "ltitude_ellipsoid_m\030\t \001(\002\022 \n\030horizontal_"
  "uncertainty_m\030\n \001(\002\022\036\n\026vertical_uncertai"
  "nty_m\030\013 \001(\002\022 \n\030velocity_uncertainty_m_s\030"
  "\014 \001(\002\022\037\n\027heading_uncertainty_deg\030\r \001(\002\022\017"
  "\n\007yaw_deg\030\016 \001(\002\"I\n\007Battery\022\032\n\tvoltage_v\030"
  "\001 \001(\002B\007\202\265\030\003NaN\022\"\n\021remaining_percent\030\002 \001("
  "\002B\007\202\265\030\003NaN\"|\n\010RcStatus\022%\n\022was_available_"
  "once\030\001 \001(\010B\t\202\265\030\005false\022\037\n\014is_available\030\002 "
  "\001(\010B\t\202\265\030\005false\022(\n\027signal_strength_percen"
  "t\030\003 \001(\002B\007\202\265\030\003NaN\"U\n\nStatusText\0229\n\004type\030\001"
  " \001(\0162+.mavsdk.rpc.telemetry_server.Statu"
  "sTextType\022\014\n\004text\030\002 \001(\t\"\?\n\025ActuatorContr"
  "olTarget\022\024\n\005group\030\001 \001(\005B\005\202\265\030\0010\022\020\n\010contro"
  "ls\030\002 \003(\002\"\?\n\024ActuatorOutputStatus\022\025\n\006acti"
  "ve\030\001 \001(\rB\005\202\265\030\0010\022\020\n\010actuator\030\002 \003(\002\"\'\n\nCov"
  "ariance\022\031\n\021covariance_matrix\030\001 \003(\002\";\n\014Ve"
  "locityBody\022\r\n\005x_m_s\030\001 \001(\002\022\r\n\005y_m_s\030\002 \001(\002"
  "\022\r\n\005z_m_s\030\003 \001(\002\"5\n\014PositionBody\022\013\n\003x_m\030\001"
  " \001(\002\022\013\n\003y_m\030\002 \001(\002\022\013\n\003z_m\030\003 \001(\002\"\244\005\n\010Odome"
  "try\022\021\n\ttime_usec\030\001 \001(\004\022@\n\010frame_id\030\002 \001(\016"
  "2..mavsdk.rpc.telemetry_server.Odometry."
  "MavFrame\022F\n\016child_frame_id\030\003 \001(\0162..mavsd"
  "k.rpc.telemetry_server.Odometry.MavFrame"
  "\022@\n\rposition_body\030\004 \001(\0132).mavsdk.rpc.tel"
  "emetry_server.PositionBody\0222\n\001q\030\005 \001(\0132\'."
  "mavsdk.rpc.telemetry_server.Quaternion\022@"
  "\n\rvelocity_body\030\006 \001(\0132).mavsdk.rpc.telem"
  "etry_server.VelocityBody\022O\n\025angular_velo"
  "city_body\030\007 \001(\01320.mavsdk.rpc.telemetry_s"
  "erver.AngularVelocityBody\022@\n\017pose_covari"
  "ance\030\010 \001(\0132\'.mavsdk.rpc.telemetry_server"
  ".Covariance\022D\n\023velocity_covariance\030\t \001(\013"
  "2\'.mavsdk.rpc.telemetry_server.Covarianc"
  "e\"j\n\010MavFrame\022\023\n\017MAV_FRAME_UNDEF\020\000\022\026\n\022MA"
  "V_FRAME_BODY_NED\020\010\022\030\n\024MAV_FRAME_VISION_N"
  "ED\020\020\022\027\n\023MAV_FRAME_ESTIM_NED\020\022\"\177\n\016Distanc"
  "eSensor\022#\n\022minimum_distance_m\030\001 \001(\002B\007\202\265\030"
  "\003NaN\022#\n\022maximum_distance_m\030\002 \001(\002B\007\202\265\030\003Na"
  "N\022#\n\022current_distance_m\030\003 \001(\002B\007\202\265\030\003NaN\"\260"
  "\001\n\016ScaledPressure\022\024\n\014timestamp_us\030\001 \001(\004\022"
  "\035\n\025absolute_pressure_hpa\030\002 \001(\002\022!\n\031differ"
  "ential_pressure_hpa\030\003 \001(\002\022\027\n\017temperature"
  "_deg\030\004 \001(\002\022-\n%differential_pressure_temp"
  "erature_deg\030\005 \001(\002\"Y\n\013PositionNed\022\030\n\007nort"
  "h_m\030\001 \001(\002B\007\202\265\030\003NaN\022\027\n\006east_m\030\002 \001(\002B\007\202\265\030\003"
  "NaN\022\027\n\006down_m\030\003 \001(\002B\007\202\265\030\003NaN\"D\n\013Velocity"
  "Ned\022\021\n\tnorth_m_s\030\001 \001(\002\022\020\n\010east_m_s\030\002 \001(\002"
  "\022\020\n\010down_m_s\030\003 \001(\002\"\215\001\n\023PositionVelocityN"
  "ed\022:\n\010position\030\001 \001(\0132(.mavsdk.rpc.teleme"
  "try_server.PositionNed\022:\n\010velocity\030\002 \001(\013"
  "2(.mavsdk.rpc.telemetry_server.VelocityN"
  "ed\"r\n\013GroundTruth\022\035\n\014latitude_deg\030\001 \001(\001B"
  "\007\202\265\030\003NaN\022\036\n\rlongitude_deg\030\002 \001(\001B\007\202\265\030\003NaN"
  "\022$\n\023absolute_altitude_m\030\003 \001(\002B\007\202\265\030\003NaN\"x"
  "\n\020FixedwingMetrics\022\035\n\014airspeed_m_s\030\001 \001(\002"
  "B\007\202\265\030\003NaN\022$\n\023throttle_percentage\030\002 \001(\002B\007"
  "\202\265\030\003NaN\022\037\n\016climb_rate_m_s\030\003 \001(\002B\007\202\265\030\003NaN"
  "\"i\n\017AccelerationFrd\022\035\n\014forward_m_s2\030\001 \001("
  "\002B\007\202\265\030\003NaN\022\033\n\nright_m_s2\030\002 \001(\002B\007\202\265\030\003NaN\022"
  "\032\n\tdown_m_s2\030\003 \001(\002B\007\202\265\030\003NaN\"o\n\022AngularVe"
  "locityFrd\022\036\n\rforward_rad_s\030\001 \001(\002B\007\202\265\030\003Na"
  "N\022\034\n\013right_rad_s\030\002 \001(\002B\007\202\265\030\003NaN\022\033\n\ndown_"
  "rad_s\030\003 \001(\002B\007\202\265\030\003NaN\"m\n\020MagneticFieldFrd"
  "\022\036\n\rforward_gauss\030\001 \001(\002B\007\202\265\030\003NaN\022\034\n\013righ"
  "t_gauss\030\002 \001(\002B\007\202\265\030\003NaN\022\033\n\ndown_gauss\030\003 \001"
  "(\002B\007\202\265\030\003NaN\"\240\002\n\003Imu\022F\n\020acceleration_frd\030"
  "\001 \001(\0132,.mavsdk.rpc.telemetry_server.Acce"
  "lerationFrd\022M\n\024angular_velocity_frd\030\002 \001("
  "\0132/.mavsdk.rpc.telemetry_server.AngularV"
  "elocityFrd\022I\n\022magnetic_field_frd\030\003 \001(\0132-"
  ".mavsdk.rpc.telemetry_server.MagneticFie"
  "ldFrd\022!\n\020temperature_degc\030\004 \001(\002B\007\202\265\030\003NaN"
  "\022\024\n\014timestamp_us\030\005 \001(\004\"\264\002\n\025TelemetryServ"
  "erResult\022I\n\006result\030\001 \001(\01629.mavsdk.rpc.te"
  "lemetry_server.TelemetryServerResult.Res"
  "ult\022\022\n\nresult_str\030\002 \001(\t\"\273\001\n\006Result\022\022\n\016RE"
  "SULT_UNKNOWN\020\000\022\022\n\016RESULT_SUCCESS\020\001\022\024\n\020RE"
  "SULT_NO_SYSTEM\020\002\022\033\n\027RESULT_CONNECTION_ER"
  "ROR\020\003\022\017\n\013RESULT_BUSY\020\004\022\031\n\025RESULT_COMMAND"
  "_DENIED\020\005\022\022\n\016RESULT_TIMEOUT\020\006\022\026\n\022RESULT_"
  "UNSUPPORTED\020\007*\244\001\n\007FixType\022\023\n\017FIX_TYPE_NO"
  "_GPS\020\000\022\023\n\017FIX_TYPE_NO_FIX\020\001\022\023\n\017FIX_TYPE_"
  "FIX_2D\020\002\022\023\n\017FIX_TYPE_FIX_3D\020\003\022\025\n\021FIX_TYP"
  "E_FIX_DGPS\020\004\022\026\n\022FIX_TYPE_RTK_FLOAT\020\005\022\026\n\022"
  "FIX_TYPE_RTK_FIXED\020\006*\215\001\n\tVtolState\022\030\n\024VT"
  "OL_STATE_UNDEFINED\020\000\022\037\n\033VTOL_STATE_TRANS"
  "ITION_TO_FW\020\001\022\037\n\033VTOL_STATE_TRANSITION_T"
  "O_MC\020\002\022\021\n\rVTOL_STATE_MC\020\003\022\021\n\rVTOL_STATE_"
  "FW\020\004*\371\001\n\016StatusTextType\022\032\n\026STATUS_TEXT_T"
  "YPE_DEBUG\020\000\022\031\n\025STATUS_TEXT_TYPE_INFO\020\001\022\033"
  "\n\027STATUS_TEXT_TYPE_NOTICE\020\002\022\034\n\030STATUS_TE"
  "XT_TYPE_WARNING\020\003\022\032\n\026STATUS_TEXT_TYPE_ER"
  "ROR\020\004\022\035\n\031STATUS_TEXT_TYPE_CRITICAL\020\005\022\032\n\026"
  "STATUS_TEXT_TYPE_ALERT\020\006\022\036\n\032STATUS_TEXT_"
  "TYPE_EMERGENCY\020\007*\223\001\n\013LandedState\022\030\n\024LAND"
  "ED_STATE_UNKNOWN\020\000\022\032\n\026LANDED_STATE_ON_GR"
  "OUND\020\001\022\027\n\023LANDED_STATE_IN_AIR\020\002\022\033\n\027LANDE"
  "D_STATE_TAKING_OFF\020\003\022\030\n\024LANDED_STATE_LAN"
  "DING\020\0042\214\017\n\026TelemetryServerService\022\202\001\n\017Pu"
  "blishPosition\0223.mavsdk.rpc.telemetry_ser"
  "ver.PublishPositionRequest\0324.mavsdk.rpc."
  "telemetry_server.PublishPositionResponse"
  "\"\004\200\265\030\001\022v\n\013PublishHome\022/.mavsdk.rpc.telem"
  "etry_server.PublishHomeRequest\0320.mavsdk."
  "rpc.telemetry_server.PublishHomeResponse"
  "\"\004\200\265\030\001\022\205\001\n\020PublishSysStatus\0224.mavsdk.rpc"
  ".telemetry_server.PublishSysStatusReques"
  "t\0325.mavsdk.rpc.telemetry_server.PublishS"
  "ysStatusResponse\"\004\200\265\030\001\022\232\001\n\027PublishExtend"
  "edSysState\022;.mavsdk.rpc.telemetry_server"
  ".PublishExtendedSysStateRequest\032<.mavsdk"
  ".rpc.telemetry_server.PublishExtendedSys"
  "StateResponse\"\004\200\265\030\001\022|\n\rPublishRawGps\0221.m"
  "avsdk.rpc.telemetry_server.PublishRawGps"
  "Request\0322.mavsdk.rpc.telemetry_server.Pu"
  "blishRawGpsResponse\"\004\200\265\030\001\022\177\n\016PublishBatt"
  "ery\0222.mavsdk.rpc.telemetry_server.Publis"
  "hBatteryRequest\0323.mavsdk.rpc.telemetry_s"
  "erver.PublishBatteryResponse\"\004\200\265\030\001\022\210\001\n\021P"
  "ublishStatusText\0225.mavsdk.rpc.telemetry_"
  "server.PublishStatusTextRequest\0326.mavsdk"
  ".rpc.telemetry_server.PublishStatusTextR"
  "esponse\"\004\200\265\030\001\022\202\001\n\017PublishOdometry\0223.mavs"
  "dk.rpc.telemetry_server.PublishOdometryR"
  "equest\0324.mavsdk.rpc.telemetry_server.Pub"
  "lishOdometryResponse\"\004\200\265\030\001\022\243\001\n\032PublishPo"
  "sitionVelocityNed\022>.mavsdk.rpc.telemetry"
  "_server.PublishPositionVelocityNedReques"
  "t\032\?.mavsdk.rpc.telemetry_server.PublishP"
  "ositionVelocityNedResponse\"\004\200\265\030\001\022\213\001\n\022Pub"
  "lishGroundTruth\0226.mavsdk.rpc.telemetry_s"
  "erver.PublishGroundTruthRequest\0327.mavsdk"
  ".rpc.telemetry_server.PublishGroundTruth"
  "Response\"\004\200\265\030\001\022s\n\nPublishImu\022..mavsdk.rp"
  "c.telemetry_server.PublishImuRequest\032/.m"
  "avsdk.rpc.telemetry_server.PublishImuRes"
  "ponse\"\004\200\265\030\001\022\205\001\n\020PublishScaledImu\0224.mavsd"
  "k.rpc.telemetry_server.PublishScaledImuR"
  "equest\0325.mavsdk.rpc.telemetry_server.Pub"
  "lishScaledImuResponse\"\004\200\265\030\001\022|\n\rPublishRa"
  "wImu\0221.mavsdk.rpc.telemetry_server.Publi"
  "shRawImuRequest\0322.mavsdk.rpc.telemetry_s"
  "erver.PublishRawImuResponse\"\004\200\265\030\001\022\221\001\n\024Pu"
  "blishUnixEpochTime\0228.mavsdk.rpc.telemetr"
  "y_server.PublishUnixEpochTimeRequest\0329.m"
  "avsdk.rpc.telemetry_server.PublishUnixEp"
  "ochTimeResponse\"\004\200\265\030\001B2\n\032io.mavsdk.telem"
  "etry_serverB\024TelemetryServerProtob\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto_sccs[59] = {
  &scc_info_AccelerationFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_ActuatorControlTarget_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_ActuatorOutputStatus_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_AngularVelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_AngularVelocityFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_Battery_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_Covariance_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_DistanceSensor_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_EulerAngle_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_FixedwingMetrics_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_GpsInfo_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_GroundTruth_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_Heading_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_Imu_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_MagneticFieldFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_Odometry_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_Position_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PositionBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PositionNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PositionVelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishBatteryRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishBatteryResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishExtendedSysStateRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishExtendedSysStateResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishGroundTruthRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishGroundTruthResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishHomeRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishHomeResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishInAirRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishLandedStateRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishOdometryRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishOdometryResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishPositionRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishPositionResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishPositionVelocityNedRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishPositionVelocityNedResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishRawGpsRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishRawGpsResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishRawImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishRawImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishRcStatusRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishScaledImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishScaledImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishStatusTextRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishStatusTextResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishSysStatusRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishSysStatusResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishUnixEpochTimeRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_PublishUnixEpochTimeResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_Quaternion_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_RawGps_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_RcStatus_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_ScaledPressure_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_StatusText_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_VelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
  &scc_info_VelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto = {
  false, false, descriptor_table_protodef_telemetry_5fserver_2ftelemetry_5fserver_2eproto, "telemetry_server/telemetry_server.proto", 10121,
  &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto_once, descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto_sccs, descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto_deps, 59, 1,
  schemas, file_default_instances, TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto::offsets,
  file_level_metadata_telemetry_5fserver_2ftelemetry_5fserver_2eproto, 59, file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto, file_level_service_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_telemetry_5fserver_2ftelemetry_5fserver_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto)), true);
namespace mavsdk {
namespace rpc {
namespace telemetry_server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Odometry_MavFrame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto);
  return file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[0];
}
bool Odometry_MavFrame_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 16:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Odometry_MavFrame Odometry::MAV_FRAME_UNDEF;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_BODY_NED;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_VISION_NED;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_ESTIM_NED;
constexpr Odometry_MavFrame Odometry::MavFrame_MIN;
constexpr Odometry_MavFrame Odometry::MavFrame_MAX;
constexpr int Odometry::MavFrame_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TelemetryServerResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto);
  return file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[1];
}
bool TelemetryServerResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_UNKNOWN;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_SUCCESS;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_NO_SYSTEM;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_CONNECTION_ERROR;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_BUSY;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_COMMAND_DENIED;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_TIMEOUT;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_UNSUPPORTED;
constexpr TelemetryServerResult_Result TelemetryServerResult::Result_MIN;
constexpr TelemetryServerResult_Result TelemetryServerResult::Result_MAX;
constexpr int TelemetryServerResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FixType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto);
  return file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[2];
}
bool FixType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VtolState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto);
  return file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[3];
}
bool VtolState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusTextType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto);
  return file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[4];
}
bool StatusTextType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LandedState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto);
  return file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[5];
}
bool LandedState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PublishPositionRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishPositionRequest_default_instance_._instance.get_mutable()->position_ = const_cast< ::mavsdk::rpc::telemetry_server::Position*>(
      ::mavsdk::rpc::telemetry_server::Position::internal_default_instance());
  ::mavsdk::rpc::telemetry_server::_PublishPositionRequest_default_instance_._instance.get_mutable()->velocity_ned_ = const_cast< ::mavsdk::rpc::telemetry_server::VelocityNed*>(
      ::mavsdk::rpc::telemetry_server::VelocityNed::internal_default_instance());
  ::mavsdk::rpc::telemetry_server::_PublishPositionRequest_default_instance_._instance.get_mutable()->heading_ = const_cast< ::mavsdk::rpc::telemetry_server::Heading*>(
      ::mavsdk::rpc::telemetry_server::Heading::internal_default_instance());
}
class PublishPositionRequest::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::Position& position(const PublishPositionRequest* msg);
  static const ::mavsdk::rpc::telemetry_server::VelocityNed& velocity_ned(const PublishPositionRequest* msg);
  static const ::mavsdk::rpc::telemetry_server::Heading& heading(const PublishPositionRequest* msg);
};

const ::mavsdk::rpc::telemetry_server::Position&
PublishPositionRequest::_Internal::position(const PublishPositionRequest* msg) {
  return *msg->position_;
}
const ::mavsdk::rpc::telemetry_server::VelocityNed&
PublishPositionRequest::_Internal::velocity_ned(const PublishPositionRequest* msg) {
  return *msg->velocity_ned_;
}
const ::mavsdk::rpc::telemetry_server::Heading&
PublishPositionRequest::_Internal::heading(const PublishPositionRequest* msg) {
  return *msg->heading_;
}
PublishPositionRequest::PublishPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishPositionRequest)
}
PublishPositionRequest::PublishPositionRequest(const PublishPositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::mavsdk::rpc::telemetry_server::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity_ned()) {
    velocity_ned_ = new ::mavsdk::rpc::telemetry_server::VelocityNed(*from.velocity_ned_);
  } else {
    velocity_ned_ = nullptr;
  }
  if (from._internal_has_heading()) {
    heading_ = new ::mavsdk::rpc::telemetry_server::Heading(*from.heading_);
  } else {
    heading_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishPositionRequest)
}

void PublishPositionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishPositionRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&position_)) + sizeof(heading_));
}

PublishPositionRequest::~PublishPositionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishPositionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishPositionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_ned_;
  if (this != internal_default_instance()) delete heading_;
}

void PublishPositionRequest::ArenaDtor(void* object) {
  PublishPositionRequest* _this = reinterpret_cast< PublishPositionRequest* >(object);
  (void)_this;
}
void PublishPositionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishPositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishPositionRequest& PublishPositionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishPositionRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishPositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && velocity_ned_ != nullptr) {
    delete velocity_ned_;
  }
  velocity_ned_ = nullptr;
  if (GetArena() == nullptr && heading_ != nullptr) {
    delete heading_;
  }
  heading_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishPositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.VelocityNed velocity_ned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_ned(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.Heading heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_heading(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishPositionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Position position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .mavsdk.rpc.telemetry_server.VelocityNed velocity_ned = 2;
  if (this->has_velocity_ned()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity_ned(this), target, stream);
  }

  // .mavsdk.rpc.telemetry_server.Heading heading = 3;
  if (this->has_heading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::heading(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishPositionRequest)
  return target;
}

size_t PublishPositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishPositionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .mavsdk.rpc.telemetry_server.VelocityNed velocity_ned = 2;
  if (this->has_velocity_ned()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_ned_);
  }

  // .mavsdk.rpc.telemetry_server.Heading heading = 3;
  if (this->has_heading()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heading_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishPositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishPositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishPositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishPositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishPositionRequest)
    MergeFrom(*source);
  }
}

void PublishPositionRequest::MergeFrom(const PublishPositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::mavsdk::rpc::telemetry_server::Position::MergeFrom(from._internal_position());
  }
  if (from.has_velocity_ned()) {
    _internal_mutable_velocity_ned()->::mavsdk::rpc::telemetry_server::VelocityNed::MergeFrom(from._internal_velocity_ned());
  }
  if (from.has_heading()) {
    _internal_mutable_heading()->::mavsdk::rpc::telemetry_server::Heading::MergeFrom(from._internal_heading());
  }
}

void PublishPositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishPositionRequest::CopyFrom(const PublishPositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishPositionRequest::IsInitialized() const {
  return true;
}

void PublishPositionRequest::InternalSwap(PublishPositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishPositionRequest, heading_)
      + sizeof(PublishPositionRequest::heading_)
      - PROTOBUF_FIELD_OFFSET(PublishPositionRequest, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishPositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishHomeRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishHomeRequest_default_instance_._instance.get_mutable()->home_ = const_cast< ::mavsdk::rpc::telemetry_server::Position*>(
      ::mavsdk::rpc::telemetry_server::Position::internal_default_instance());
}
class PublishHomeRequest::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::Position& home(const PublishHomeRequest* msg);
};

const ::mavsdk::rpc::telemetry_server::Position&
PublishHomeRequest::_Internal::home(const PublishHomeRequest* msg) {
  return *msg->home_;
}
PublishHomeRequest::PublishHomeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishHomeRequest)
}
PublishHomeRequest::PublishHomeRequest(const PublishHomeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_home()) {
    home_ = new ::mavsdk::rpc::telemetry_server::Position(*from.home_);
  } else {
    home_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishHomeRequest)
}

void PublishHomeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishHomeRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  home_ = nullptr;
}

PublishHomeRequest::~PublishHomeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishHomeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishHomeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete home_;
}

void PublishHomeRequest::ArenaDtor(void* object) {
  PublishHomeRequest* _this = reinterpret_cast< PublishHomeRequest* >(object);
  (void)_this;
}
void PublishHomeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishHomeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishHomeRequest& PublishHomeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishHomeRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishHomeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishHomeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && home_ != nullptr) {
    delete home_;
  }
  home_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishHomeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.Position home = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_home(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishHomeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishHomeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Position home = 1;
  if (this->has_home()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::home(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishHomeRequest)
  return target;
}

size_t PublishHomeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishHomeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Position home = 1;
  if (this->has_home()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *home_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishHomeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishHomeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishHomeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishHomeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishHomeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishHomeRequest)
    MergeFrom(*source);
  }
}

void PublishHomeRequest::MergeFrom(const PublishHomeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishHomeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_home()) {
    _internal_mutable_home()->::mavsdk::rpc::telemetry_server::Position::MergeFrom(from._internal_home());
  }
}

void PublishHomeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishHomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishHomeRequest::CopyFrom(const PublishHomeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishHomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishHomeRequest::IsInitialized() const {
  return true;
}

void PublishHomeRequest::InternalSwap(PublishHomeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(home_, other->home_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishHomeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishSysStatusRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishSysStatusRequest_default_instance_._instance.get_mutable()->battery_ = const_cast< ::mavsdk::rpc::telemetry_server::Battery*>(
      ::mavsdk::rpc::telemetry_server::Battery::internal_default_instance());
}
class PublishSysStatusRequest::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::Battery& battery(const PublishSysStatusRequest* msg);
};

const ::mavsdk::rpc::telemetry_server::Battery&
PublishSysStatusRequest::_Internal::battery(const PublishSysStatusRequest* msg) {
  return *msg->battery_;
}
PublishSysStatusRequest::PublishSysStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
}
PublishSysStatusRequest::PublishSysStatusRequest(const PublishSysStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_battery()) {
    battery_ = new ::mavsdk::rpc::telemetry_server::Battery(*from.battery_);
  } else {
    battery_ = nullptr;
  }
  ::memcpy(&rc_receiver_status_, &from.rc_receiver_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&gps_status_) -
    reinterpret_cast<char*>(&rc_receiver_status_)) + sizeof(gps_status_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
}

void PublishSysStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishSysStatusRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  ::memset(&battery_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_status_) -
      reinterpret_cast<char*>(&battery_)) + sizeof(gps_status_));
}

PublishSysStatusRequest::~PublishSysStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishSysStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete battery_;
}

void PublishSysStatusRequest::ArenaDtor(void* object) {
  PublishSysStatusRequest* _this = reinterpret_cast< PublishSysStatusRequest* >(object);
  (void)_this;
}
void PublishSysStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishSysStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishSysStatusRequest& PublishSysStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishSysStatusRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishSysStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && battery_ != nullptr) {
    delete battery_;
  }
  battery_ = nullptr;
  ::memset(&rc_receiver_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_status_) -
      reinterpret_cast<char*>(&rc_receiver_status_)) + sizeof(gps_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishSysStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.Battery battery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rc_receiver_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rc_receiver_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gyro_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gyro_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool accel_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          accel_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mag_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mag_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gps_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gps_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishSysStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Battery battery = 1;
  if (this->has_battery()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::battery(this), target, stream);
  }

  // bool rc_receiver_status = 2;
  if (this->rc_receiver_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_rc_receiver_status(), target);
  }

  // bool gyro_status = 3;
  if (this->gyro_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_gyro_status(), target);
  }

  // bool accel_status = 4;
  if (this->accel_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_accel_status(), target);
  }

  // bool mag_status = 5;
  if (this->mag_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_mag_status(), target);
  }

  // bool gps_status = 6;
  if (this->gps_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_gps_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
  return target;
}

size_t PublishSysStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Battery battery = 1;
  if (this->has_battery()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *battery_);
  }

  // bool rc_receiver_status = 2;
  if (this->rc_receiver_status() != 0) {
    total_size += 1 + 1;
  }

  // bool gyro_status = 3;
  if (this->gyro_status() != 0) {
    total_size += 1 + 1;
  }

  // bool accel_status = 4;
  if (this->accel_status() != 0) {
    total_size += 1 + 1;
  }

  // bool mag_status = 5;
  if (this->mag_status() != 0) {
    total_size += 1 + 1;
  }

  // bool gps_status = 6;
  if (this->gps_status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishSysStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishSysStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishSysStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
    MergeFrom(*source);
  }
}

void PublishSysStatusRequest::MergeFrom(const PublishSysStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_battery()) {
    _internal_mutable_battery()->::mavsdk::rpc::telemetry_server::Battery::MergeFrom(from._internal_battery());
  }
  if (from.rc_receiver_status() != 0) {
    _internal_set_rc_receiver_status(from._internal_rc_receiver_status());
  }
  if (from.gyro_status() != 0) {
    _internal_set_gyro_status(from._internal_gyro_status());
  }
  if (from.accel_status() != 0) {
    _internal_set_accel_status(from._internal_accel_status());
  }
  if (from.mag_status() != 0) {
    _internal_set_mag_status(from._internal_mag_status());
  }
  if (from.gps_status() != 0) {
    _internal_set_gps_status(from._internal_gps_status());
  }
}

void PublishSysStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishSysStatusRequest::CopyFrom(const PublishSysStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishSysStatusRequest::IsInitialized() const {
  return true;
}

void PublishSysStatusRequest::InternalSwap(PublishSysStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, gps_status_)
      + sizeof(PublishSysStatusRequest::gps_status_)
      - PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, battery_)>(
          reinterpret_cast<char*>(&battery_),
          reinterpret_cast<char*>(&other->battery_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishSysStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishExtendedSysStateRequest::InitAsDefaultInstance() {
}
class PublishExtendedSysStateRequest::_Internal {
 public:
};

PublishExtendedSysStateRequest::PublishExtendedSysStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
}
PublishExtendedSysStateRequest::PublishExtendedSysStateRequest(const PublishExtendedSysStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vtol_state_, &from.vtol_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&landed_state_) -
    reinterpret_cast<char*>(&vtol_state_)) + sizeof(landed_state_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
}

void PublishExtendedSysStateRequest::SharedCtor() {
  ::memset(&vtol_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&landed_state_) -
      reinterpret_cast<char*>(&vtol_state_)) + sizeof(landed_state_));
}

PublishExtendedSysStateRequest::~PublishExtendedSysStateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishExtendedSysStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PublishExtendedSysStateRequest::ArenaDtor(void* object) {
  PublishExtendedSysStateRequest* _this = reinterpret_cast< PublishExtendedSysStateRequest* >(object);
  (void)_this;
}
void PublishExtendedSysStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishExtendedSysStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishExtendedSysStateRequest& PublishExtendedSysStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishExtendedSysStateRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishExtendedSysStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vtol_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&landed_state_) -
      reinterpret_cast<char*>(&vtol_state_)) + sizeof(landed_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishExtendedSysStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.VtolState vtol_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vtol_state(static_cast<::mavsdk::rpc::telemetry_server::VtolState>(val));
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.LandedState landed_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_landed_state(static_cast<::mavsdk::rpc::telemetry_server::LandedState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishExtendedSysStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.VtolState vtol_state = 1;
  if (this->vtol_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_vtol_state(), target);
  }

  // .mavsdk.rpc.telemetry_server.LandedState landed_state = 2;
  if (this->landed_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_landed_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
  return target;
}

size_t PublishExtendedSysStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.VtolState vtol_state = 1;
  if (this->vtol_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vtol_state());
  }

  // .mavsdk.rpc.telemetry_server.LandedState landed_state = 2;
  if (this->landed_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_landed_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishExtendedSysStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishExtendedSysStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishExtendedSysStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
    MergeFrom(*source);
  }
}

void PublishExtendedSysStateRequest::MergeFrom(const PublishExtendedSysStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vtol_state() != 0) {
    _internal_set_vtol_state(from._internal_vtol_state());
  }
  if (from.landed_state() != 0) {
    _internal_set_landed_state(from._internal_landed_state());
  }
}

void PublishExtendedSysStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishExtendedSysStateRequest::CopyFrom(const PublishExtendedSysStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishExtendedSysStateRequest::IsInitialized() const {
  return true;
}

void PublishExtendedSysStateRequest::InternalSwap(PublishExtendedSysStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateRequest, landed_state_)
      + sizeof(PublishExtendedSysStateRequest::landed_state_)
      - PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateRequest, vtol_state_)>(
          reinterpret_cast<char*>(&vtol_state_),
          reinterpret_cast<char*>(&other->vtol_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishExtendedSysStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishInAirRequest::InitAsDefaultInstance() {
}
class PublishInAirRequest::_Internal {
 public:
};

PublishInAirRequest::PublishInAirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishInAirRequest)
}
PublishInAirRequest::PublishInAirRequest(const PublishInAirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_in_air_ = from.is_in_air_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishInAirRequest)
}

void PublishInAirRequest::SharedCtor() {
  is_in_air_ = false;
}

PublishInAirRequest::~PublishInAirRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishInAirRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishInAirRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PublishInAirRequest::ArenaDtor(void* object) {
  PublishInAirRequest* _this = reinterpret_cast< PublishInAirRequest* >(object);
  (void)_this;
}
void PublishInAirRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishInAirRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishInAirRequest& PublishInAirRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishInAirRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishInAirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishInAirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_in_air_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishInAirRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_in_air = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_in_air_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishInAirRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishInAirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_in_air = 1;
  if (this->is_in_air() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_in_air(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishInAirRequest)
  return target;
}

size_t PublishInAirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishInAirRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_in_air = 1;
  if (this->is_in_air() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishInAirRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishInAirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishInAirRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishInAirRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishInAirRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishInAirRequest)
    MergeFrom(*source);
  }
}

void PublishInAirRequest::MergeFrom(const PublishInAirRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishInAirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_in_air() != 0) {
    _internal_set_is_in_air(from._internal_is_in_air());
  }
}

void PublishInAirRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishInAirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishInAirRequest::CopyFrom(const PublishInAirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishInAirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishInAirRequest::IsInitialized() const {
  return true;
}

void PublishInAirRequest::InternalSwap(PublishInAirRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_in_air_, other->is_in_air_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishInAirRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishLandedStateRequest::InitAsDefaultInstance() {
}
class PublishLandedStateRequest::_Internal {
 public:
};

PublishLandedStateRequest::PublishLandedStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
}
PublishLandedStateRequest::PublishLandedStateRequest(const PublishLandedStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  landed_state_ = from.landed_state_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
}

void PublishLandedStateRequest::SharedCtor() {
  landed_state_ = 0;
}

PublishLandedStateRequest::~PublishLandedStateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishLandedStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PublishLandedStateRequest::ArenaDtor(void* object) {
  PublishLandedStateRequest* _this = reinterpret_cast< PublishLandedStateRequest* >(object);
  (void)_this;
}
void PublishLandedStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishLandedStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishLandedStateRequest& PublishLandedStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishLandedStateRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishLandedStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landed_state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishLandedStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.LandedState landed_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_landed_state(static_cast<::mavsdk::rpc::telemetry_server::LandedState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishLandedStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.LandedState landed_state = 1;
  if (this->landed_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_landed_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
  return target;
}

size_t PublishLandedStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.LandedState landed_state = 1;
  if (this->landed_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_landed_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishLandedStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishLandedStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishLandedStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
    MergeFrom(*source);
  }
}

void PublishLandedStateRequest::MergeFrom(const PublishLandedStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.landed_state() != 0) {
    _internal_set_landed_state(from._internal_landed_state());
  }
}

void PublishLandedStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishLandedStateRequest::CopyFrom(const PublishLandedStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishLandedStateRequest::IsInitialized() const {
  return true;
}

void PublishLandedStateRequest::InternalSwap(PublishLandedStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(landed_state_, other->landed_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishLandedStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishRawGpsRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishRawGpsRequest_default_instance_._instance.get_mutable()->raw_gps_ = const_cast< ::mavsdk::rpc::telemetry_server::RawGps*>(
      ::mavsdk::rpc::telemetry_server::RawGps::internal_default_instance());
  ::mavsdk::rpc::telemetry_server::_PublishRawGpsRequest_default_instance_._instance.get_mutable()->gps_info_ = const_cast< ::mavsdk::rpc::telemetry_server::GpsInfo*>(
      ::mavsdk::rpc::telemetry_server::GpsInfo::internal_default_instance());
}
class PublishRawGpsRequest::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::RawGps& raw_gps(const PublishRawGpsRequest* msg);
  static const ::mavsdk::rpc::telemetry_server::GpsInfo& gps_info(const PublishRawGpsRequest* msg);
};

const ::mavsdk::rpc::telemetry_server::RawGps&
PublishRawGpsRequest::_Internal::raw_gps(const PublishRawGpsRequest* msg) {
  return *msg->raw_gps_;
}
const ::mavsdk::rpc::telemetry_server::GpsInfo&
PublishRawGpsRequest::_Internal::gps_info(const PublishRawGpsRequest* msg) {
  return *msg->gps_info_;
}
PublishRawGpsRequest::PublishRawGpsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
}
PublishRawGpsRequest::PublishRawGpsRequest(const PublishRawGpsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_raw_gps()) {
    raw_gps_ = new ::mavsdk::rpc::telemetry_server::RawGps(*from.raw_gps_);
  } else {
    raw_gps_ = nullptr;
  }
  if (from._internal_has_gps_info()) {
    gps_info_ = new ::mavsdk::rpc::telemetry_server::GpsInfo(*from.gps_info_);
  } else {
    gps_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
}

void PublishRawGpsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishRawGpsRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  ::memset(&raw_gps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_info_) -
      reinterpret_cast<char*>(&raw_gps_)) + sizeof(gps_info_));
}

PublishRawGpsRequest::~PublishRawGpsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishRawGpsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete raw_gps_;
  if (this != internal_default_instance()) delete gps_info_;
}

void PublishRawGpsRequest::ArenaDtor(void* object) {
  PublishRawGpsRequest* _this = reinterpret_cast< PublishRawGpsRequest* >(object);
  (void)_this;
}
void PublishRawGpsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishRawGpsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishRawGpsRequest& PublishRawGpsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishRawGpsRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishRawGpsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && raw_gps_ != nullptr) {
    delete raw_gps_;
  }
  raw_gps_ = nullptr;
  if (GetArena() == nullptr && gps_info_ != nullptr) {
    delete gps_info_;
  }
  gps_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishRawGpsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.RawGps raw_gps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_gps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.GpsInfo gps_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishRawGpsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.RawGps raw_gps = 1;
  if (this->has_raw_gps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::raw_gps(this), target, stream);
  }

  // .mavsdk.rpc.telemetry_server.GpsInfo gps_info = 2;
  if (this->has_gps_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gps_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
  return target;
}

size_t PublishRawGpsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.RawGps raw_gps = 1;
  if (this->has_raw_gps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_gps_);
  }

  // .mavsdk.rpc.telemetry_server.GpsInfo gps_info = 2;
  if (this->has_gps_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishRawGpsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishRawGpsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishRawGpsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
    MergeFrom(*source);
  }
}

void PublishRawGpsRequest::MergeFrom(const PublishRawGpsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_raw_gps()) {
    _internal_mutable_raw_gps()->::mavsdk::rpc::telemetry_server::RawGps::MergeFrom(from._internal_raw_gps());
  }
  if (from.has_gps_info()) {
    _internal_mutable_gps_info()->::mavsdk::rpc::telemetry_server::GpsInfo::MergeFrom(from._internal_gps_info());
  }
}

void PublishRawGpsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishRawGpsRequest::CopyFrom(const PublishRawGpsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishRawGpsRequest::IsInitialized() const {
  return true;
}

void PublishRawGpsRequest::InternalSwap(PublishRawGpsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishRawGpsRequest, gps_info_)
      + sizeof(PublishRawGpsRequest::gps_info_)
      - PROTOBUF_FIELD_OFFSET(PublishRawGpsRequest, raw_gps_)>(
          reinterpret_cast<char*>(&raw_gps_),
          reinterpret_cast<char*>(&other->raw_gps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishRawGpsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishBatteryRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishBatteryRequest_default_instance_._instance.get_mutable()->battery_ = const_cast< ::mavsdk::rpc::telemetry_server::Battery*>(
      ::mavsdk::rpc::telemetry_server::Battery::internal_default_instance());
}
class PublishBatteryRequest::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::Battery& battery(const PublishBatteryRequest* msg);
};

const ::mavsdk::rpc::telemetry_server::Battery&
PublishBatteryRequest::_Internal::battery(const PublishBatteryRequest* msg) {
  return *msg->battery_;
}
PublishBatteryRequest::PublishBatteryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
}
PublishBatteryRequest::PublishBatteryRequest(const PublishBatteryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_battery()) {
    battery_ = new ::mavsdk::rpc::telemetry_server::Battery(*from.battery_);
  } else {
    battery_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
}

void PublishBatteryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishBatteryRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  battery_ = nullptr;
}

PublishBatteryRequest::~PublishBatteryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishBatteryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete battery_;
}

void PublishBatteryRequest::ArenaDtor(void* object) {
  PublishBatteryRequest* _this = reinterpret_cast< PublishBatteryRequest* >(object);
  (void)_this;
}
void PublishBatteryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishBatteryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishBatteryRequest& PublishBatteryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishBatteryRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishBatteryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && battery_ != nullptr) {
    delete battery_;
  }
  battery_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishBatteryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.Battery battery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishBatteryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Battery battery = 1;
  if (this->has_battery()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::battery(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
  return target;
}

size_t PublishBatteryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Battery battery = 1;
  if (this->has_battery()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *battery_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishBatteryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishBatteryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishBatteryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
    MergeFrom(*source);
  }
}

void PublishBatteryRequest::MergeFrom(const PublishBatteryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_battery()) {
    _internal_mutable_battery()->::mavsdk::rpc::telemetry_server::Battery::MergeFrom(from._internal_battery());
  }
}

void PublishBatteryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishBatteryRequest::CopyFrom(const PublishBatteryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishBatteryRequest::IsInitialized() const {
  return true;
}

void PublishBatteryRequest::InternalSwap(PublishBatteryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(battery_, other->battery_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishBatteryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishRcStatusRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishRcStatusRequest_default_instance_._instance.get_mutable()->rc_status_ = const_cast< ::mavsdk::rpc::telemetry_server::RcStatus*>(
      ::mavsdk::rpc::telemetry_server::RcStatus::internal_default_instance());
}
class PublishRcStatusRequest::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::RcStatus& rc_status(const PublishRcStatusRequest* msg);
};

const ::mavsdk::rpc::telemetry_server::RcStatus&
PublishRcStatusRequest::_Internal::rc_status(const PublishRcStatusRequest* msg) {
  return *msg->rc_status_;
}
PublishRcStatusRequest::PublishRcStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
}
PublishRcStatusRequest::PublishRcStatusRequest(const PublishRcStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rc_status()) {
    rc_status_ = new ::mavsdk::rpc::telemetry_server::RcStatus(*from.rc_status_);
  } else {
    rc_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
}

void PublishRcStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishRcStatusRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  rc_status_ = nullptr;
}

PublishRcStatusRequest::~PublishRcStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishRcStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rc_status_;
}

void PublishRcStatusRequest::ArenaDtor(void* object) {
  PublishRcStatusRequest* _this = reinterpret_cast< PublishRcStatusRequest* >(object);
  (void)_this;
}
void PublishRcStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishRcStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishRcStatusRequest& PublishRcStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishRcStatusRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishRcStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rc_status_ != nullptr) {
    delete rc_status_;
  }
  rc_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishRcStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rc_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishRcStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;
  if (this->has_rc_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rc_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
  return target;
}

size_t PublishRcStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;
  if (this->has_rc_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rc_status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishRcStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishRcStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishRcStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
    MergeFrom(*source);
  }
}

void PublishRcStatusRequest::MergeFrom(const PublishRcStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rc_status()) {
    _internal_mutable_rc_status()->::mavsdk::rpc::telemetry_server::RcStatus::MergeFrom(from._internal_rc_status());
  }
}

void PublishRcStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishRcStatusRequest::CopyFrom(const PublishRcStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishRcStatusRequest::IsInitialized() const {
  return true;
}

void PublishRcStatusRequest::InternalSwap(PublishRcStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rc_status_, other->rc_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishRcStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishStatusTextRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishStatusTextRequest_default_instance_._instance.get_mutable()->status_text_ = const_cast< ::mavsdk::rpc::telemetry_server::StatusText*>(
      ::mavsdk::rpc::telemetry_server::StatusText::internal_default_instance());
}
class PublishStatusTextRequest::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::StatusText& status_text(const PublishStatusTextRequest* msg);
};

const ::mavsdk::rpc::telemetry_server::StatusText&
PublishStatusTextRequest::_Internal::status_text(const PublishStatusTextRequest* msg) {
  return *msg->status_text_;
}
PublishStatusTextRequest::PublishStatusTextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
}
PublishStatusTextRequest::PublishStatusTextRequest(const PublishStatusTextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status_text()) {
    status_text_ = new ::mavsdk::rpc::telemetry_server::StatusText(*from.status_text_);
  } else {
    status_text_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
}

void PublishStatusTextRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishStatusTextRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  status_text_ = nullptr;
}

PublishStatusTextRequest::~PublishStatusTextRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishStatusTextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_text_;
}

void PublishStatusTextRequest::ArenaDtor(void* object) {
  PublishStatusTextRequest* _this = reinterpret_cast< PublishStatusTextRequest* >(object);
  (void)_this;
}
void PublishStatusTextRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishStatusTextRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishStatusTextRequest& PublishStatusTextRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishStatusTextRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishStatusTextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_text_ != nullptr) {
    delete status_text_;
  }
  status_text_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishStatusTextRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.StatusText status_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishStatusTextRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.StatusText status_text = 1;
  if (this->has_status_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status_text(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
  return target;
}

size_t PublishStatusTextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.StatusText status_text = 1;
  if (this->has_status_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_text_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishStatusTextRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishStatusTextRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishStatusTextRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
    MergeFrom(*source);
  }
}

void PublishStatusTextRequest::MergeFrom(const PublishStatusTextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status_text()) {
    _internal_mutable_status_text()->::mavsdk::rpc::telemetry_server::StatusText::MergeFrom(from._internal_status_text());
  }
}

void PublishStatusTextRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishStatusTextRequest::CopyFrom(const PublishStatusTextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishStatusTextRequest::IsInitialized() const {
  return true;
}

void PublishStatusTextRequest::InternalSwap(PublishStatusTextRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_text_, other->status_text_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishStatusTextRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishOdometryRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishOdometryRequest_default_instance_._instance.get_mutable()->odometry_ = const_cast< ::mavsdk::rpc::telemetry_server::Odometry*>(
      ::mavsdk::rpc::telemetry_server::Odometry::internal_default_instance());
}
class PublishOdometryRequest::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::Odometry& odometry(const PublishOdometryRequest* msg);
};

const ::mavsdk::rpc::telemetry_server::Odometry&
PublishOdometryRequest::_Internal::odometry(const PublishOdometryRequest* msg) {
  return *msg->odometry_;
}
PublishOdometryRequest::PublishOdometryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
}
PublishOdometryRequest::PublishOdometryRequest(const PublishOdometryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_odometry()) {
    odometry_ = new ::mavsdk::rpc::telemetry_server::Odometry(*from.odometry_);
  } else {
    odometry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
}

void PublishOdometryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishOdometryRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  odometry_ = nullptr;
}

PublishOdometryRequest::~PublishOdometryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishOdometryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete odometry_;
}

void PublishOdometryRequest::ArenaDtor(void* object) {
  PublishOdometryRequest* _this = reinterpret_cast< PublishOdometryRequest* >(object);
  (void)_this;
}
void PublishOdometryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishOdometryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishOdometryRequest& PublishOdometryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishOdometryRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishOdometryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && odometry_ != nullptr) {
    delete odometry_;
  }
  odometry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishOdometryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.Odometry odometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishOdometryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Odometry odometry = 1;
  if (this->has_odometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::odometry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
  return target;
}

size_t PublishOdometryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Odometry odometry = 1;
  if (this->has_odometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odometry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishOdometryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishOdometryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishOdometryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
    MergeFrom(*source);
  }
}

void PublishOdometryRequest::MergeFrom(const PublishOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_odometry()) {
    _internal_mutable_odometry()->::mavsdk::rpc::telemetry_server::Odometry::MergeFrom(from._internal_odometry());
  }
}

void PublishOdometryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishOdometryRequest::CopyFrom(const PublishOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishOdometryRequest::IsInitialized() const {
  return true;
}

void PublishOdometryRequest::InternalSwap(PublishOdometryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(odometry_, other->odometry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishOdometryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishPositionVelocityNedRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishPositionVelocityNedRequest_default_instance_._instance.get_mutable()->position_velocity_ned_ = const_cast< ::mavsdk::rpc::telemetry_server::PositionVelocityNed*>(
      ::mavsdk::rpc::telemetry_server::PositionVelocityNed::internal_default_instance());
}
class PublishPositionVelocityNedRequest::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::PositionVelocityNed& position_velocity_ned(const PublishPositionVelocityNedRequest* msg);
};

const ::mavsdk::rpc::telemetry_server::PositionVelocityNed&
PublishPositionVelocityNedRequest::_Internal::position_velocity_ned(const PublishPositionVelocityNedRequest* msg) {
  return *msg->position_velocity_ned_;
}
PublishPositionVelocityNedRequest::PublishPositionVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
}
PublishPositionVelocityNedRequest::PublishPositionVelocityNedRequest(const PublishPositionVelocityNedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_velocity_ned()) {
    position_velocity_ned_ = new ::mavsdk::rpc::telemetry_server::PositionVelocityNed(*from.position_velocity_ned_);
  } else {
    position_velocity_ned_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
}

void PublishPositionVelocityNedRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishPositionVelocityNedRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  position_velocity_ned_ = nullptr;
}

PublishPositionVelocityNedRequest::~PublishPositionVelocityNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishPositionVelocityNedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_velocity_ned_;
}

void PublishPositionVelocityNedRequest::ArenaDtor(void* object) {
  PublishPositionVelocityNedRequest* _this = reinterpret_cast< PublishPositionVelocityNedRequest* >(object);
  (void)_this;
}
void PublishPositionVelocityNedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishPositionVelocityNedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishPositionVelocityNedRequest& PublishPositionVelocityNedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishPositionVelocityNedRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishPositionVelocityNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_velocity_ned_ != nullptr) {
    delete position_velocity_ned_;
  }
  position_velocity_ned_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishPositionVelocityNedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.PositionVelocityNed position_velocity_ned = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_velocity_ned(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishPositionVelocityNedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.PositionVelocityNed position_velocity_ned = 1;
  if (this->has_position_velocity_ned()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position_velocity_ned(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
  return target;
}

size_t PublishPositionVelocityNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.PositionVelocityNed position_velocity_ned = 1;
  if (this->has_position_velocity_ned()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_velocity_ned_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishPositionVelocityNedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishPositionVelocityNedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishPositionVelocityNedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
    MergeFrom(*source);
  }
}

void PublishPositionVelocityNedRequest::MergeFrom(const PublishPositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_velocity_ned()) {
    _internal_mutable_position_velocity_ned()->::mavsdk::rpc::telemetry_server::PositionVelocityNed::MergeFrom(from._internal_position_velocity_ned());
  }
}

void PublishPositionVelocityNedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishPositionVelocityNedRequest::CopyFrom(const PublishPositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishPositionVelocityNedRequest::IsInitialized() const {
  return true;
}

void PublishPositionVelocityNedRequest::InternalSwap(PublishPositionVelocityNedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(position_velocity_ned_, other->position_velocity_ned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishPositionVelocityNedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishGroundTruthRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishGroundTruthRequest_default_instance_._instance.get_mutable()->ground_truth_ = const_cast< ::mavsdk::rpc::telemetry_server::GroundTruth*>(
      ::mavsdk::rpc::telemetry_server::GroundTruth::internal_default_instance());
}
class PublishGroundTruthRequest::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::GroundTruth& ground_truth(const PublishGroundTruthRequest* msg);
};

const ::mavsdk::rpc::telemetry_server::GroundTruth&
PublishGroundTruthRequest::_Internal::ground_truth(const PublishGroundTruthRequest* msg) {
  return *msg->ground_truth_;
}
PublishGroundTruthRequest::PublishGroundTruthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
}
PublishGroundTruthRequest::PublishGroundTruthRequest(const PublishGroundTruthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ground_truth()) {
    ground_truth_ = new ::mavsdk::rpc::telemetry_server::GroundTruth(*from.ground_truth_);
  } else {
    ground_truth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
}

void PublishGroundTruthRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishGroundTruthRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  ground_truth_ = nullptr;
}

PublishGroundTruthRequest::~PublishGroundTruthRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishGroundTruthRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ground_truth_;
}

void PublishGroundTruthRequest::ArenaDtor(void* object) {
  PublishGroundTruthRequest* _this = reinterpret_cast< PublishGroundTruthRequest* >(object);
  (void)_this;
}
void PublishGroundTruthRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishGroundTruthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishGroundTruthRequest& PublishGroundTruthRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishGroundTruthRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishGroundTruthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishGroundTruthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.GroundTruth ground_truth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_truth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishGroundTruthRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.GroundTruth ground_truth = 1;
  if (this->has_ground_truth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ground_truth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
  return target;
}

size_t PublishGroundTruthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.GroundTruth ground_truth = 1;
  if (this->has_ground_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ground_truth_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishGroundTruthRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishGroundTruthRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishGroundTruthRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
    MergeFrom(*source);
  }
}

void PublishGroundTruthRequest::MergeFrom(const PublishGroundTruthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ground_truth()) {
    _internal_mutable_ground_truth()->::mavsdk::rpc::telemetry_server::GroundTruth::MergeFrom(from._internal_ground_truth());
  }
}

void PublishGroundTruthRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishGroundTruthRequest::CopyFrom(const PublishGroundTruthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishGroundTruthRequest::IsInitialized() const {
  return true;
}

void PublishGroundTruthRequest::InternalSwap(PublishGroundTruthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ground_truth_, other->ground_truth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishGroundTruthRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishImuRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishImuRequest_default_instance_._instance.get_mutable()->imu_ = const_cast< ::mavsdk::rpc::telemetry_server::Imu*>(
      ::mavsdk::rpc::telemetry_server::Imu::internal_default_instance());
}
class PublishImuRequest::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::Imu& imu(const PublishImuRequest* msg);
};

const ::mavsdk::rpc::telemetry_server::Imu&
PublishImuRequest::_Internal::imu(const PublishImuRequest* msg) {
  return *msg->imu_;
}
PublishImuRequest::PublishImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishImuRequest)
}
PublishImuRequest::PublishImuRequest(const PublishImuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_imu()) {
    imu_ = new ::mavsdk::rpc::telemetry_server::Imu(*from.imu_);
  } else {
    imu_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishImuRequest)
}

void PublishImuRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  imu_ = nullptr;
}

PublishImuRequest::~PublishImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishImuRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishImuRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete imu_;
}

void PublishImuRequest::ArenaDtor(void* object) {
  PublishImuRequest* _this = reinterpret_cast< PublishImuRequest* >(object);
  (void)_this;
}
void PublishImuRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishImuRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishImuRequest& PublishImuRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && imu_ != nullptr) {
    delete imu_;
  }
  imu_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishImuRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.Imu imu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishImuRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Imu imu = 1;
  if (this->has_imu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::imu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishImuRequest)
  return target;
}

size_t PublishImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishImuRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Imu imu = 1;
  if (this->has_imu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishImuRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishImuRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishImuRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishImuRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishImuRequest)
    MergeFrom(*source);
  }
}

void PublishImuRequest::MergeFrom(const PublishImuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imu()) {
    _internal_mutable_imu()->::mavsdk::rpc::telemetry_server::Imu::MergeFrom(from._internal_imu());
  }
}

void PublishImuRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishImuRequest::CopyFrom(const PublishImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishImuRequest::IsInitialized() const {
  return true;
}

void PublishImuRequest::InternalSwap(PublishImuRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(imu_, other->imu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishImuRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishScaledImuRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishScaledImuRequest_default_instance_._instance.get_mutable()->imu_ = const_cast< ::mavsdk::rpc::telemetry_server::Imu*>(
      ::mavsdk::rpc::telemetry_server::Imu::internal_default_instance());
}
class PublishScaledImuRequest::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::Imu& imu(const PublishScaledImuRequest* msg);
};

const ::mavsdk::rpc::telemetry_server::Imu&
PublishScaledImuRequest::_Internal::imu(const PublishScaledImuRequest* msg) {
  return *msg->imu_;
}
PublishScaledImuRequest::PublishScaledImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
}
PublishScaledImuRequest::PublishScaledImuRequest(const PublishScaledImuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_imu()) {
    imu_ = new ::mavsdk::rpc::telemetry_server::Imu(*from.imu_);
  } else {
    imu_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
}

void PublishScaledImuRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishScaledImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  imu_ = nullptr;
}

PublishScaledImuRequest::~PublishScaledImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishScaledImuRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete imu_;
}

void PublishScaledImuRequest::ArenaDtor(void* object) {
  PublishScaledImuRequest* _this = reinterpret_cast< PublishScaledImuRequest* >(object);
  (void)_this;
}
void PublishScaledImuRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishScaledImuRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishScaledImuRequest& PublishScaledImuRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishScaledImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishScaledImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && imu_ != nullptr) {
    delete imu_;
  }
  imu_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishScaledImuRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.Imu imu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishScaledImuRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Imu imu = 1;
  if (this->has_imu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::imu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
  return target;
}

size_t PublishScaledImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Imu imu = 1;
  if (this->has_imu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishScaledImuRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishScaledImuRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishScaledImuRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
    MergeFrom(*source);
  }
}

void PublishScaledImuRequest::MergeFrom(const PublishScaledImuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imu()) {
    _internal_mutable_imu()->::mavsdk::rpc::telemetry_server::Imu::MergeFrom(from._internal_imu());
  }
}

void PublishScaledImuRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishScaledImuRequest::CopyFrom(const PublishScaledImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishScaledImuRequest::IsInitialized() const {
  return true;
}

void PublishScaledImuRequest::InternalSwap(PublishScaledImuRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(imu_, other->imu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishScaledImuRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishRawImuRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishRawImuRequest_default_instance_._instance.get_mutable()->imu_ = const_cast< ::mavsdk::rpc::telemetry_server::Imu*>(
      ::mavsdk::rpc::telemetry_server::Imu::internal_default_instance());
}
class PublishRawImuRequest::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::Imu& imu(const PublishRawImuRequest* msg);
};

const ::mavsdk::rpc::telemetry_server::Imu&
PublishRawImuRequest::_Internal::imu(const PublishRawImuRequest* msg) {
  return *msg->imu_;
}
PublishRawImuRequest::PublishRawImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
}
PublishRawImuRequest::PublishRawImuRequest(const PublishRawImuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_imu()) {
    imu_ = new ::mavsdk::rpc::telemetry_server::Imu(*from.imu_);
  } else {
    imu_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
}

void PublishRawImuRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishRawImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  imu_ = nullptr;
}

PublishRawImuRequest::~PublishRawImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishRawImuRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete imu_;
}

void PublishRawImuRequest::ArenaDtor(void* object) {
  PublishRawImuRequest* _this = reinterpret_cast< PublishRawImuRequest* >(object);
  (void)_this;
}
void PublishRawImuRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishRawImuRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishRawImuRequest& PublishRawImuRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishRawImuRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishRawImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && imu_ != nullptr) {
    delete imu_;
  }
  imu_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishRawImuRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.Imu imu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishRawImuRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Imu imu = 1;
  if (this->has_imu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::imu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
  return target;
}

size_t PublishRawImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.Imu imu = 1;
  if (this->has_imu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishRawImuRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishRawImuRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishRawImuRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
    MergeFrom(*source);
  }
}

void PublishRawImuRequest::MergeFrom(const PublishRawImuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imu()) {
    _internal_mutable_imu()->::mavsdk::rpc::telemetry_server::Imu::MergeFrom(from._internal_imu());
  }
}

void PublishRawImuRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishRawImuRequest::CopyFrom(const PublishRawImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishRawImuRequest::IsInitialized() const {
  return true;
}

void PublishRawImuRequest::InternalSwap(PublishRawImuRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(imu_, other->imu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishRawImuRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishUnixEpochTimeRequest::InitAsDefaultInstance() {
}
class PublishUnixEpochTimeRequest::_Internal {
 public:
};

PublishUnixEpochTimeRequest::PublishUnixEpochTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
}
PublishUnixEpochTimeRequest::PublishUnixEpochTimeRequest(const PublishUnixEpochTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_us_ = from.time_us_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
}

void PublishUnixEpochTimeRequest::SharedCtor() {
  time_us_ = PROTOBUF_ULONGLONG(0);
}

PublishUnixEpochTimeRequest::~PublishUnixEpochTimeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishUnixEpochTimeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PublishUnixEpochTimeRequest::ArenaDtor(void* object) {
  PublishUnixEpochTimeRequest* _this = reinterpret_cast< PublishUnixEpochTimeRequest* >(object);
  (void)_this;
}
void PublishUnixEpochTimeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishUnixEpochTimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishUnixEpochTimeRequest& PublishUnixEpochTimeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishUnixEpochTimeRequest_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishUnixEpochTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_us_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishUnixEpochTimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishUnixEpochTimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_us = 1;
  if (this->time_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
  return target;
}

size_t PublishUnixEpochTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 time_us = 1;
  if (this->time_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_us());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishUnixEpochTimeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishUnixEpochTimeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishUnixEpochTimeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
    MergeFrom(*source);
  }
}

void PublishUnixEpochTimeRequest::MergeFrom(const PublishUnixEpochTimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_us() != 0) {
    _internal_set_time_us(from._internal_time_us());
  }
}

void PublishUnixEpochTimeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishUnixEpochTimeRequest::CopyFrom(const PublishUnixEpochTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishUnixEpochTimeRequest::IsInitialized() const {
  return true;
}

void PublishUnixEpochTimeRequest::InternalSwap(PublishUnixEpochTimeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(time_us_, other->time_us_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishUnixEpochTimeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishPositionResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishPositionResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishPositionResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishPositionResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishPositionResponse::_Internal::telemetry_server_result(const PublishPositionResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishPositionResponse::PublishPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishPositionResponse)
}
PublishPositionResponse::PublishPositionResponse(const PublishPositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishPositionResponse)
}

void PublishPositionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishPositionResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishPositionResponse::~PublishPositionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishPositionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishPositionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishPositionResponse::ArenaDtor(void* object) {
  PublishPositionResponse* _this = reinterpret_cast< PublishPositionResponse* >(object);
  (void)_this;
}
void PublishPositionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishPositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishPositionResponse& PublishPositionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishPositionResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishPositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishPositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishPositionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishPositionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishPositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishPositionResponse)
  return target;
}

size_t PublishPositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishPositionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishPositionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishPositionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishPositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishPositionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishPositionResponse)
    MergeFrom(*source);
  }
}

void PublishPositionResponse::MergeFrom(const PublishPositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishPositionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishPositionResponse::CopyFrom(const PublishPositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishPositionResponse::IsInitialized() const {
  return true;
}

void PublishPositionResponse::InternalSwap(PublishPositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishPositionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishHomeResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishHomeResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishHomeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishHomeResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishHomeResponse::_Internal::telemetry_server_result(const PublishHomeResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishHomeResponse::PublishHomeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishHomeResponse)
}
PublishHomeResponse::PublishHomeResponse(const PublishHomeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishHomeResponse)
}

void PublishHomeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishHomeResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishHomeResponse::~PublishHomeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishHomeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishHomeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishHomeResponse::ArenaDtor(void* object) {
  PublishHomeResponse* _this = reinterpret_cast< PublishHomeResponse* >(object);
  (void)_this;
}
void PublishHomeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishHomeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishHomeResponse& PublishHomeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishHomeResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishHomeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishHomeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishHomeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishHomeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishHomeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishHomeResponse)
  return target;
}

size_t PublishHomeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishHomeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishHomeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishHomeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishHomeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishHomeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishHomeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishHomeResponse)
    MergeFrom(*source);
  }
}

void PublishHomeResponse::MergeFrom(const PublishHomeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishHomeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishHomeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishHomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishHomeResponse::CopyFrom(const PublishHomeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishHomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishHomeResponse::IsInitialized() const {
  return true;
}

void PublishHomeResponse::InternalSwap(PublishHomeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishHomeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishSysStatusResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishSysStatusResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishSysStatusResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishSysStatusResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishSysStatusResponse::_Internal::telemetry_server_result(const PublishSysStatusResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishSysStatusResponse::PublishSysStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
}
PublishSysStatusResponse::PublishSysStatusResponse(const PublishSysStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
}

void PublishSysStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishSysStatusResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishSysStatusResponse::~PublishSysStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishSysStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishSysStatusResponse::ArenaDtor(void* object) {
  PublishSysStatusResponse* _this = reinterpret_cast< PublishSysStatusResponse* >(object);
  (void)_this;
}
void PublishSysStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishSysStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishSysStatusResponse& PublishSysStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishSysStatusResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishSysStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishSysStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishSysStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
  return target;
}

size_t PublishSysStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishSysStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishSysStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishSysStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
    MergeFrom(*source);
  }
}

void PublishSysStatusResponse::MergeFrom(const PublishSysStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishSysStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishSysStatusResponse::CopyFrom(const PublishSysStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishSysStatusResponse::IsInitialized() const {
  return true;
}

void PublishSysStatusResponse::InternalSwap(PublishSysStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishSysStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishExtendedSysStateResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishExtendedSysStateResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishExtendedSysStateResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishExtendedSysStateResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishExtendedSysStateResponse::_Internal::telemetry_server_result(const PublishExtendedSysStateResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishExtendedSysStateResponse::PublishExtendedSysStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
}
PublishExtendedSysStateResponse::PublishExtendedSysStateResponse(const PublishExtendedSysStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
}

void PublishExtendedSysStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishExtendedSysStateResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishExtendedSysStateResponse::~PublishExtendedSysStateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishExtendedSysStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishExtendedSysStateResponse::ArenaDtor(void* object) {
  PublishExtendedSysStateResponse* _this = reinterpret_cast< PublishExtendedSysStateResponse* >(object);
  (void)_this;
}
void PublishExtendedSysStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishExtendedSysStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishExtendedSysStateResponse& PublishExtendedSysStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishExtendedSysStateResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishExtendedSysStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishExtendedSysStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishExtendedSysStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
  return target;
}

size_t PublishExtendedSysStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishExtendedSysStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishExtendedSysStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishExtendedSysStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
    MergeFrom(*source);
  }
}

void PublishExtendedSysStateResponse::MergeFrom(const PublishExtendedSysStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishExtendedSysStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishExtendedSysStateResponse::CopyFrom(const PublishExtendedSysStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishExtendedSysStateResponse::IsInitialized() const {
  return true;
}

void PublishExtendedSysStateResponse::InternalSwap(PublishExtendedSysStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishExtendedSysStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishRawGpsResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishRawGpsResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishRawGpsResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishRawGpsResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishRawGpsResponse::_Internal::telemetry_server_result(const PublishRawGpsResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishRawGpsResponse::PublishRawGpsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
}
PublishRawGpsResponse::PublishRawGpsResponse(const PublishRawGpsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
}

void PublishRawGpsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishRawGpsResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishRawGpsResponse::~PublishRawGpsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishRawGpsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishRawGpsResponse::ArenaDtor(void* object) {
  PublishRawGpsResponse* _this = reinterpret_cast< PublishRawGpsResponse* >(object);
  (void)_this;
}
void PublishRawGpsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishRawGpsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishRawGpsResponse& PublishRawGpsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishRawGpsResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishRawGpsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishRawGpsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishRawGpsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
  return target;
}

size_t PublishRawGpsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishRawGpsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishRawGpsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishRawGpsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
    MergeFrom(*source);
  }
}

void PublishRawGpsResponse::MergeFrom(const PublishRawGpsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishRawGpsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishRawGpsResponse::CopyFrom(const PublishRawGpsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishRawGpsResponse::IsInitialized() const {
  return true;
}

void PublishRawGpsResponse::InternalSwap(PublishRawGpsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishRawGpsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishBatteryResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishBatteryResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishBatteryResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishBatteryResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishBatteryResponse::_Internal::telemetry_server_result(const PublishBatteryResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishBatteryResponse::PublishBatteryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
}
PublishBatteryResponse::PublishBatteryResponse(const PublishBatteryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
}

void PublishBatteryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishBatteryResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishBatteryResponse::~PublishBatteryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishBatteryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishBatteryResponse::ArenaDtor(void* object) {
  PublishBatteryResponse* _this = reinterpret_cast< PublishBatteryResponse* >(object);
  (void)_this;
}
void PublishBatteryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishBatteryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishBatteryResponse& PublishBatteryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishBatteryResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishBatteryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishBatteryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishBatteryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
  return target;
}

size_t PublishBatteryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishBatteryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishBatteryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishBatteryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
    MergeFrom(*source);
  }
}

void PublishBatteryResponse::MergeFrom(const PublishBatteryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishBatteryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishBatteryResponse::CopyFrom(const PublishBatteryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishBatteryResponse::IsInitialized() const {
  return true;
}

void PublishBatteryResponse::InternalSwap(PublishBatteryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishBatteryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishStatusTextResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishStatusTextResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishStatusTextResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishStatusTextResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishStatusTextResponse::_Internal::telemetry_server_result(const PublishStatusTextResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishStatusTextResponse::PublishStatusTextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
}
PublishStatusTextResponse::PublishStatusTextResponse(const PublishStatusTextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
}

void PublishStatusTextResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishStatusTextResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishStatusTextResponse::~PublishStatusTextResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishStatusTextResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishStatusTextResponse::ArenaDtor(void* object) {
  PublishStatusTextResponse* _this = reinterpret_cast< PublishStatusTextResponse* >(object);
  (void)_this;
}
void PublishStatusTextResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishStatusTextResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishStatusTextResponse& PublishStatusTextResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishStatusTextResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishStatusTextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishStatusTextResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishStatusTextResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
  return target;
}

size_t PublishStatusTextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishStatusTextResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishStatusTextResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishStatusTextResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
    MergeFrom(*source);
  }
}

void PublishStatusTextResponse::MergeFrom(const PublishStatusTextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishStatusTextResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishStatusTextResponse::CopyFrom(const PublishStatusTextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishStatusTextResponse::IsInitialized() const {
  return true;
}

void PublishStatusTextResponse::InternalSwap(PublishStatusTextResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishStatusTextResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishOdometryResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishOdometryResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishOdometryResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishOdometryResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishOdometryResponse::_Internal::telemetry_server_result(const PublishOdometryResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishOdometryResponse::PublishOdometryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
}
PublishOdometryResponse::PublishOdometryResponse(const PublishOdometryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
}

void PublishOdometryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishOdometryResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishOdometryResponse::~PublishOdometryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishOdometryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishOdometryResponse::ArenaDtor(void* object) {
  PublishOdometryResponse* _this = reinterpret_cast< PublishOdometryResponse* >(object);
  (void)_this;
}
void PublishOdometryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishOdometryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishOdometryResponse& PublishOdometryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishOdometryResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishOdometryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishOdometryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishOdometryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
  return target;
}

size_t PublishOdometryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishOdometryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishOdometryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishOdometryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
    MergeFrom(*source);
  }
}

void PublishOdometryResponse::MergeFrom(const PublishOdometryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishOdometryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishOdometryResponse::CopyFrom(const PublishOdometryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishOdometryResponse::IsInitialized() const {
  return true;
}

void PublishOdometryResponse::InternalSwap(PublishOdometryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishOdometryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishPositionVelocityNedResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishPositionVelocityNedResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishPositionVelocityNedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishPositionVelocityNedResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishPositionVelocityNedResponse::_Internal::telemetry_server_result(const PublishPositionVelocityNedResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishPositionVelocityNedResponse::PublishPositionVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
}
PublishPositionVelocityNedResponse::PublishPositionVelocityNedResponse(const PublishPositionVelocityNedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
}

void PublishPositionVelocityNedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishPositionVelocityNedResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishPositionVelocityNedResponse::~PublishPositionVelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishPositionVelocityNedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishPositionVelocityNedResponse::ArenaDtor(void* object) {
  PublishPositionVelocityNedResponse* _this = reinterpret_cast< PublishPositionVelocityNedResponse* >(object);
  (void)_this;
}
void PublishPositionVelocityNedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishPositionVelocityNedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishPositionVelocityNedResponse& PublishPositionVelocityNedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishPositionVelocityNedResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishPositionVelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishPositionVelocityNedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishPositionVelocityNedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
  return target;
}

size_t PublishPositionVelocityNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishPositionVelocityNedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishPositionVelocityNedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishPositionVelocityNedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
    MergeFrom(*source);
  }
}

void PublishPositionVelocityNedResponse::MergeFrom(const PublishPositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishPositionVelocityNedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishPositionVelocityNedResponse::CopyFrom(const PublishPositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishPositionVelocityNedResponse::IsInitialized() const {
  return true;
}

void PublishPositionVelocityNedResponse::InternalSwap(PublishPositionVelocityNedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishPositionVelocityNedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishGroundTruthResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishGroundTruthResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishGroundTruthResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishGroundTruthResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishGroundTruthResponse::_Internal::telemetry_server_result(const PublishGroundTruthResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishGroundTruthResponse::PublishGroundTruthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
}
PublishGroundTruthResponse::PublishGroundTruthResponse(const PublishGroundTruthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
}

void PublishGroundTruthResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishGroundTruthResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishGroundTruthResponse::~PublishGroundTruthResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishGroundTruthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishGroundTruthResponse::ArenaDtor(void* object) {
  PublishGroundTruthResponse* _this = reinterpret_cast< PublishGroundTruthResponse* >(object);
  (void)_this;
}
void PublishGroundTruthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishGroundTruthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishGroundTruthResponse& PublishGroundTruthResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishGroundTruthResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishGroundTruthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishGroundTruthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishGroundTruthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
  return target;
}

size_t PublishGroundTruthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishGroundTruthResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishGroundTruthResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishGroundTruthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
    MergeFrom(*source);
  }
}

void PublishGroundTruthResponse::MergeFrom(const PublishGroundTruthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishGroundTruthResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishGroundTruthResponse::CopyFrom(const PublishGroundTruthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishGroundTruthResponse::IsInitialized() const {
  return true;
}

void PublishGroundTruthResponse::InternalSwap(PublishGroundTruthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishGroundTruthResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishImuResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishImuResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishImuResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishImuResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishImuResponse::_Internal::telemetry_server_result(const PublishImuResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishImuResponse::PublishImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishImuResponse)
}
PublishImuResponse::PublishImuResponse(const PublishImuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishImuResponse)
}

void PublishImuResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishImuResponse::~PublishImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishImuResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishImuResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishImuResponse::ArenaDtor(void* object) {
  PublishImuResponse* _this = reinterpret_cast< PublishImuResponse* >(object);
  (void)_this;
}
void PublishImuResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishImuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishImuResponse& PublishImuResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishImuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishImuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishImuResponse)
  return target;
}

size_t PublishImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishImuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishImuResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishImuResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishImuResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishImuResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishImuResponse)
    MergeFrom(*source);
  }
}

void PublishImuResponse::MergeFrom(const PublishImuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishImuResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishImuResponse::CopyFrom(const PublishImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishImuResponse::IsInitialized() const {
  return true;
}

void PublishImuResponse::InternalSwap(PublishImuResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishImuResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishScaledImuResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishScaledImuResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishScaledImuResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishScaledImuResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishScaledImuResponse::_Internal::telemetry_server_result(const PublishScaledImuResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishScaledImuResponse::PublishScaledImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
}
PublishScaledImuResponse::PublishScaledImuResponse(const PublishScaledImuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
}

void PublishScaledImuResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishScaledImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishScaledImuResponse::~PublishScaledImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishScaledImuResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishScaledImuResponse::ArenaDtor(void* object) {
  PublishScaledImuResponse* _this = reinterpret_cast< PublishScaledImuResponse* >(object);
  (void)_this;
}
void PublishScaledImuResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishScaledImuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishScaledImuResponse& PublishScaledImuResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishScaledImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishScaledImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishScaledImuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishScaledImuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
  return target;
}

size_t PublishScaledImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishScaledImuResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishScaledImuResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishScaledImuResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
    MergeFrom(*source);
  }
}

void PublishScaledImuResponse::MergeFrom(const PublishScaledImuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishScaledImuResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishScaledImuResponse::CopyFrom(const PublishScaledImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishScaledImuResponse::IsInitialized() const {
  return true;
}

void PublishScaledImuResponse::InternalSwap(PublishScaledImuResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishScaledImuResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishRawImuResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishRawImuResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishRawImuResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishRawImuResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishRawImuResponse::_Internal::telemetry_server_result(const PublishRawImuResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishRawImuResponse::PublishRawImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
}
PublishRawImuResponse::PublishRawImuResponse(const PublishRawImuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
}

void PublishRawImuResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishRawImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishRawImuResponse::~PublishRawImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishRawImuResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishRawImuResponse::ArenaDtor(void* object) {
  PublishRawImuResponse* _this = reinterpret_cast< PublishRawImuResponse* >(object);
  (void)_this;
}
void PublishRawImuResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishRawImuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishRawImuResponse& PublishRawImuResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishRawImuResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishRawImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishRawImuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishRawImuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
  return target;
}

size_t PublishRawImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishRawImuResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishRawImuResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishRawImuResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
    MergeFrom(*source);
  }
}

void PublishRawImuResponse::MergeFrom(const PublishRawImuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishRawImuResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishRawImuResponse::CopyFrom(const PublishRawImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishRawImuResponse::IsInitialized() const {
  return true;
}

void PublishRawImuResponse::InternalSwap(PublishRawImuResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishRawImuResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishUnixEpochTimeResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PublishUnixEpochTimeResponse_default_instance_._instance.get_mutable()->telemetry_server_result_ = const_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(
      ::mavsdk::rpc::telemetry_server::TelemetryServerResult::internal_default_instance());
}
class PublishUnixEpochTimeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result(const PublishUnixEpochTimeResponse* msg);
};

const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&
PublishUnixEpochTimeResponse::_Internal::telemetry_server_result(const PublishUnixEpochTimeResponse* msg) {
  return *msg->telemetry_server_result_;
}
PublishUnixEpochTimeResponse::PublishUnixEpochTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
}
PublishUnixEpochTimeResponse::PublishUnixEpochTimeResponse(const PublishUnixEpochTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_server_result()) {
    telemetry_server_result_ = new ::mavsdk::rpc::telemetry_server::TelemetryServerResult(*from.telemetry_server_result_);
  } else {
    telemetry_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
}

void PublishUnixEpochTimeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishUnixEpochTimeResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  telemetry_server_result_ = nullptr;
}

PublishUnixEpochTimeResponse::~PublishUnixEpochTimeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishUnixEpochTimeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_server_result_;
}

void PublishUnixEpochTimeResponse::ArenaDtor(void* object) {
  PublishUnixEpochTimeResponse* _this = reinterpret_cast< PublishUnixEpochTimeResponse* >(object);
  (void)_this;
}
void PublishUnixEpochTimeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishUnixEpochTimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishUnixEpochTimeResponse& PublishUnixEpochTimeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishUnixEpochTimeResponse_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PublishUnixEpochTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_server_result_ != nullptr) {
    delete telemetry_server_result_;
  }
  telemetry_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishUnixEpochTimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_server_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishUnixEpochTimeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_server_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
  return target;
}

size_t PublishUnixEpochTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  if (this->has_telemetry_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_server_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishUnixEpochTimeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishUnixEpochTimeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishUnixEpochTimeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
    MergeFrom(*source);
  }
}

void PublishUnixEpochTimeResponse::MergeFrom(const PublishUnixEpochTimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_server_result()) {
    _internal_mutable_telemetry_server_result()->::mavsdk::rpc::telemetry_server::TelemetryServerResult::MergeFrom(from._internal_telemetry_server_result());
  }
}

void PublishUnixEpochTimeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishUnixEpochTimeResponse::CopyFrom(const PublishUnixEpochTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishUnixEpochTimeResponse::IsInitialized() const {
  return true;
}

void PublishUnixEpochTimeResponse::InternalSwap(PublishUnixEpochTimeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_server_result_, other->telemetry_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishUnixEpochTimeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&relative_altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.Position)
}

void Position::SharedCtor() {
  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          absolute_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          relative_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_absolute_altitude_m(), target);
  }

  // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->relative_altitude_m() <= 0 && this->relative_altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_relative_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->relative_altitude_m() <= 0 && this->relative_altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  if (!(from.absolute_altitude_m() <= 0 && from.absolute_altitude_m() >= 0)) {
    _internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
  if (!(from.relative_altitude_m() <= 0 && from.relative_altitude_m() >= 0)) {
    _internal_set_relative_altitude_m(from._internal_relative_altitude_m());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, relative_altitude_m_)
      + sizeof(Position::relative_altitude_m_)
      - PROTOBUF_FIELD_OFFSET(Position, latitude_deg_)>(
          reinterpret_cast<char*>(&latitude_deg_),
          reinterpret_cast<char*>(&other->latitude_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Heading::InitAsDefaultInstance() {
}
class Heading::_Internal {
 public:
};

Heading::Heading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Heading)
}
Heading::Heading(const Heading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  heading_deg_ = from.heading_deg_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.Heading)
}

void Heading::SharedCtor() {
  heading_deg_ = 0;
}

Heading::~Heading() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Heading)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Heading::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Heading::ArenaDtor(void* object) {
  Heading* _this = reinterpret_cast< Heading* >(object);
  (void)_this;
}
void Heading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Heading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Heading& Heading::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Heading_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Heading::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Heading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heading_deg_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          heading_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Heading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Heading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->heading_deg() <= 0 && this->heading_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_heading_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Heading)
  return target;
}

size_t Heading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Heading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->heading_deg() <= 0 && this->heading_deg() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.Heading)
  GOOGLE_DCHECK_NE(&from, this);
  const Heading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Heading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.Heading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.Heading)
    MergeFrom(*source);
  }
}

void Heading::MergeFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Heading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.heading_deg() <= 0 && from.heading_deg() >= 0)) {
    _internal_set_heading_deg(from._internal_heading_deg());
  }
}

void Heading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.Heading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heading::CopyFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Heading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heading::IsInitialized() const {
  return true;
}

void Heading::InternalSwap(Heading* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(heading_deg_, other->heading_deg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Heading::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_us_) -
    reinterpret_cast<char*>(&w_)) + sizeof(timestamp_us_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.Quaternion)
}

void Quaternion::SharedCtor() {
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_us_) -
      reinterpret_cast<char*>(&w_)) + sizeof(timestamp_us_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Quaternion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Quaternion::ArenaDtor(void* object) {
  Quaternion* _this = reinterpret_cast< Quaternion* >(object);
  (void)_this;
}
void Quaternion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quaternion& Quaternion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Quaternion_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_us_) -
      reinterpret_cast<char*>(&w_)) + sizeof(timestamp_us_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // uint64 timestamp_us = 5;
  if (this->timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Quaternion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 4;
  }

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 timestamp_us = 5;
  if (this->timestamp_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_us());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.Quaternion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (from.timestamp_us() != 0) {
    _internal_set_timestamp_us(from._internal_timestamp_us());
  }
}

void Quaternion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, timestamp_us_)
      + sizeof(Quaternion::timestamp_us_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EulerAngle::InitAsDefaultInstance() {
}
class EulerAngle::_Internal {
 public:
};

EulerAngle::EulerAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.EulerAngle)
}
EulerAngle::EulerAngle(const EulerAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_deg_, &from.roll_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_deg_) -
    reinterpret_cast<char*>(&roll_deg_)) + sizeof(yaw_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.EulerAngle)
}

void EulerAngle::SharedCtor() {
  ::memset(&roll_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&roll_deg_)) + sizeof(yaw_deg_));
}

EulerAngle::~EulerAngle() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.EulerAngle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EulerAngle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EulerAngle::ArenaDtor(void* object) {
  EulerAngle* _this = reinterpret_cast< EulerAngle* >(object);
  (void)_this;
}
void EulerAngle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EulerAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EulerAngle& EulerAngle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EulerAngle_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void EulerAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.EulerAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&roll_deg_)) + sizeof(yaw_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EulerAngle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          roll_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EulerAngle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.EulerAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->roll_deg() <= 0 && this->roll_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_deg(), target);
  }

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->pitch_deg() <= 0 && this->pitch_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_deg(), target);
  }

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_deg(), target);
  }

  // uint64 timestamp_us = 4;
  if (this->timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.EulerAngle)
  return target;
}

size_t EulerAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.EulerAngle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->roll_deg() <= 0 && this->roll_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->pitch_deg() <= 0 && this->pitch_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 timestamp_us = 4;
  if (this->timestamp_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_us());
  }

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EulerAngle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.EulerAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const EulerAngle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EulerAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.EulerAngle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.EulerAngle)
    MergeFrom(*source);
  }
}

void EulerAngle::MergeFrom(const EulerAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.EulerAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.roll_deg() <= 0 && from.roll_deg() >= 0)) {
    _internal_set_roll_deg(from._internal_roll_deg());
  }
  if (!(from.pitch_deg() <= 0 && from.pitch_deg() >= 0)) {
    _internal_set_pitch_deg(from._internal_pitch_deg());
  }
  if (from.timestamp_us() != 0) {
    _internal_set_timestamp_us(from._internal_timestamp_us());
  }
  if (!(from.yaw_deg() <= 0 && from.yaw_deg() >= 0)) {
    _internal_set_yaw_deg(from._internal_yaw_deg());
  }
}

void EulerAngle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EulerAngle::CopyFrom(const EulerAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EulerAngle::IsInitialized() const {
  return true;
}

void EulerAngle::InternalSwap(EulerAngle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EulerAngle, yaw_deg_)
      + sizeof(EulerAngle::yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(EulerAngle, roll_deg_)>(
          reinterpret_cast<char*>(&roll_deg_),
          reinterpret_cast<char*>(&other->roll_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EulerAngle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AngularVelocityBody::InitAsDefaultInstance() {
}
class AngularVelocityBody::_Internal {
 public:
};

AngularVelocityBody::AngularVelocityBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.AngularVelocityBody)
}
AngularVelocityBody::AngularVelocityBody(const AngularVelocityBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_rad_s_, &from.roll_rad_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rad_s_) -
    reinterpret_cast<char*>(&roll_rad_s_)) + sizeof(yaw_rad_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.AngularVelocityBody)
}

void AngularVelocityBody::SharedCtor() {
  ::memset(&roll_rad_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rad_s_) -
      reinterpret_cast<char*>(&roll_rad_s_)) + sizeof(yaw_rad_s_));
}

AngularVelocityBody::~AngularVelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.AngularVelocityBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AngularVelocityBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AngularVelocityBody::ArenaDtor(void* object) {
  AngularVelocityBody* _this = reinterpret_cast< AngularVelocityBody* >(object);
  (void)_this;
}
void AngularVelocityBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AngularVelocityBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AngularVelocityBody& AngularVelocityBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AngularVelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void AngularVelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.AngularVelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_rad_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rad_s_) -
      reinterpret_cast<char*>(&roll_rad_s_)) + sizeof(yaw_rad_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AngularVelocityBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          roll_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AngularVelocityBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.AngularVelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->roll_rad_s() <= 0 && this->roll_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_rad_s(), target);
  }

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->pitch_rad_s() <= 0 && this->pitch_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_rad_s(), target);
  }

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->yaw_rad_s() <= 0 && this->yaw_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_rad_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.AngularVelocityBody)
  return target;
}

size_t AngularVelocityBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.AngularVelocityBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->roll_rad_s() <= 0 && this->roll_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->pitch_rad_s() <= 0 && this->pitch_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->yaw_rad_s() <= 0 && this->yaw_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AngularVelocityBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.AngularVelocityBody)
  GOOGLE_DCHECK_NE(&from, this);
  const AngularVelocityBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AngularVelocityBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.AngularVelocityBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.AngularVelocityBody)
    MergeFrom(*source);
  }
}

void AngularVelocityBody::MergeFrom(const AngularVelocityBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.AngularVelocityBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.roll_rad_s() <= 0 && from.roll_rad_s() >= 0)) {
    _internal_set_roll_rad_s(from._internal_roll_rad_s());
  }
  if (!(from.pitch_rad_s() <= 0 && from.pitch_rad_s() >= 0)) {
    _internal_set_pitch_rad_s(from._internal_pitch_rad_s());
  }
  if (!(from.yaw_rad_s() <= 0 && from.yaw_rad_s() >= 0)) {
    _internal_set_yaw_rad_s(from._internal_yaw_rad_s());
  }
}

void AngularVelocityBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.AngularVelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngularVelocityBody::CopyFrom(const AngularVelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.AngularVelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngularVelocityBody::IsInitialized() const {
  return true;
}

void AngularVelocityBody::InternalSwap(AngularVelocityBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularVelocityBody, yaw_rad_s_)
      + sizeof(AngularVelocityBody::yaw_rad_s_)
      - PROTOBUF_FIELD_OFFSET(AngularVelocityBody, roll_rad_s_)>(
          reinterpret_cast<char*>(&roll_rad_s_),
          reinterpret_cast<char*>(&other->roll_rad_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AngularVelocityBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GpsInfo::InitAsDefaultInstance() {
}
class GpsInfo::_Internal {
 public:
};

GpsInfo::GpsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.GpsInfo)
}
GpsInfo::GpsInfo(const GpsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_satellites_, &from.num_satellites_,
    static_cast<size_t>(reinterpret_cast<char*>(&fix_type_) -
    reinterpret_cast<char*>(&num_satellites_)) + sizeof(fix_type_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.GpsInfo)
}

void GpsInfo::SharedCtor() {
  ::memset(&num_satellites_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fix_type_) -
      reinterpret_cast<char*>(&num_satellites_)) + sizeof(fix_type_));
}

GpsInfo::~GpsInfo() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.GpsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpsInfo::ArenaDtor(void* object) {
  GpsInfo* _this = reinterpret_cast< GpsInfo* >(object);
  (void)_this;
}
void GpsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpsInfo& GpsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpsInfo_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void GpsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.GpsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_satellites_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fix_type_) -
      reinterpret_cast<char*>(&num_satellites_)) + sizeof(fix_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_satellites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.FixType fix_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fix_type(static_cast<::mavsdk::rpc::telemetry_server::FixType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.GpsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->num_satellites() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_satellites(), target);
  }

  // .mavsdk.rpc.telemetry_server.FixType fix_type = 2;
  if (this->fix_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_fix_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.GpsInfo)
  return target;
}

size_t GpsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.GpsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->num_satellites() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_satellites());
  }

  // .mavsdk.rpc.telemetry_server.FixType fix_type = 2;
  if (this->fix_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fix_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.GpsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GpsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.GpsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.GpsInfo)
    MergeFrom(*source);
  }
}

void GpsInfo::MergeFrom(const GpsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.GpsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_satellites() != 0) {
    _internal_set_num_satellites(from._internal_num_satellites());
  }
  if (from.fix_type() != 0) {
    _internal_set_fix_type(from._internal_fix_type());
  }
}

void GpsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.GpsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsInfo::CopyFrom(const GpsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.GpsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsInfo::IsInitialized() const {
  return true;
}

void GpsInfo::InternalSwap(GpsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpsInfo, fix_type_)
      + sizeof(GpsInfo::fix_type_)
      - PROTOBUF_FIELD_OFFSET(GpsInfo, num_satellites_)>(
          reinterpret_cast<char*>(&num_satellites_),
          reinterpret_cast<char*>(&other->num_satellites_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawGps::InitAsDefaultInstance() {
}
class RawGps::_Internal {
 public:
};

RawGps::RawGps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.RawGps)
}
RawGps::RawGps(const RawGps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_us_, &from.timestamp_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_deg_) -
    reinterpret_cast<char*>(&timestamp_us_)) + sizeof(yaw_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.RawGps)
}

void RawGps::SharedCtor() {
  ::memset(&timestamp_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&timestamp_us_)) + sizeof(yaw_deg_));
}

RawGps::~RawGps() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.RawGps)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawGps::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RawGps::ArenaDtor(void* object) {
  RawGps* _this = reinterpret_cast< RawGps* >(object);
  (void)_this;
}
void RawGps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawGps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawGps& RawGps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawGps_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void RawGps::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.RawGps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&timestamp_us_)) + sizeof(yaw_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawGps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float absolute_altitude_m = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          absolute_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float hdop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vdop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          vdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float velocity_m_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          velocity_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cog_deg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          cog_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float altitude_ellipsoid_m = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          altitude_ellipsoid_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float horizontal_uncertainty_m = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          horizontal_uncertainty_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vertical_uncertainty_m = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          vertical_uncertainty_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float velocity_uncertainty_m_s = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          velocity_uncertainty_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading_uncertainty_deg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          heading_uncertainty_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_deg = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawGps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.RawGps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp_us = 1;
  if (this->timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp_us(), target);
  }

  // double latitude_deg = 2;
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 3;
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 4;
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_absolute_altitude_m(), target);
  }

  // float hdop = 5;
  if (!(this->hdop() <= 0 && this->hdop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_hdop(), target);
  }

  // float vdop = 6;
  if (!(this->vdop() <= 0 && this->vdop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_vdop(), target);
  }

  // float velocity_m_s = 7;
  if (!(this->velocity_m_s() <= 0 && this->velocity_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_velocity_m_s(), target);
  }

  // float cog_deg = 8;
  if (!(this->cog_deg() <= 0 && this->cog_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_cog_deg(), target);
  }

  // float altitude_ellipsoid_m = 9;
  if (!(this->altitude_ellipsoid_m() <= 0 && this->altitude_ellipsoid_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_altitude_ellipsoid_m(), target);
  }

  // float horizontal_uncertainty_m = 10;
  if (!(this->horizontal_uncertainty_m() <= 0 && this->horizontal_uncertainty_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_horizontal_uncertainty_m(), target);
  }

  // float vertical_uncertainty_m = 11;
  if (!(this->vertical_uncertainty_m() <= 0 && this->vertical_uncertainty_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_vertical_uncertainty_m(), target);
  }

  // float velocity_uncertainty_m_s = 12;
  if (!(this->velocity_uncertainty_m_s() <= 0 && this->velocity_uncertainty_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_velocity_uncertainty_m_s(), target);
  }

  // float heading_uncertainty_deg = 13;
  if (!(this->heading_uncertainty_deg() <= 0 && this->heading_uncertainty_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_heading_uncertainty_deg(), target);
  }

  // float yaw_deg = 14;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_yaw_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.RawGps)
  return target;
}

size_t RawGps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.RawGps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp_us = 1;
  if (this->timestamp_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_us());
  }

  // double latitude_deg = 2;
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 3;
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // float absolute_altitude_m = 4;
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float hdop = 5;
  if (!(this->hdop() <= 0 && this->hdop() >= 0)) {
    total_size += 1 + 4;
  }

  // float vdop = 6;
  if (!(this->vdop() <= 0 && this->vdop() >= 0)) {
    total_size += 1 + 4;
  }

  // float velocity_m_s = 7;
  if (!(this->velocity_m_s() <= 0 && this->velocity_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float cog_deg = 8;
  if (!(this->cog_deg() <= 0 && this->cog_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float altitude_ellipsoid_m = 9;
  if (!(this->altitude_ellipsoid_m() <= 0 && this->altitude_ellipsoid_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float horizontal_uncertainty_m = 10;
  if (!(this->horizontal_uncertainty_m() <= 0 && this->horizontal_uncertainty_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float vertical_uncertainty_m = 11;
  if (!(this->vertical_uncertainty_m() <= 0 && this->vertical_uncertainty_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float velocity_uncertainty_m_s = 12;
  if (!(this->velocity_uncertainty_m_s() <= 0 && this->velocity_uncertainty_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading_uncertainty_deg = 13;
  if (!(this->heading_uncertainty_deg() <= 0 && this->heading_uncertainty_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_deg = 14;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawGps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.RawGps)
  GOOGLE_DCHECK_NE(&from, this);
  const RawGps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawGps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.RawGps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.RawGps)
    MergeFrom(*source);
  }
}

void RawGps::MergeFrom(const RawGps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.RawGps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp_us() != 0) {
    _internal_set_timestamp_us(from._internal_timestamp_us());
  }
  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  if (!(from.absolute_altitude_m() <= 0 && from.absolute_altitude_m() >= 0)) {
    _internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
  if (!(from.hdop() <= 0 && from.hdop() >= 0)) {
    _internal_set_hdop(from._internal_hdop());
  }
  if (!(from.vdop() <= 0 && from.vdop() >= 0)) {
    _internal_set_vdop(from._internal_vdop());
  }
  if (!(from.velocity_m_s() <= 0 && from.velocity_m_s() >= 0)) {
    _internal_set_velocity_m_s(from._internal_velocity_m_s());
  }
  if (!(from.cog_deg() <= 0 && from.cog_deg() >= 0)) {
    _internal_set_cog_deg(from._internal_cog_deg());
  }
  if (!(from.altitude_ellipsoid_m() <= 0 && from.altitude_ellipsoid_m() >= 0)) {
    _internal_set_altitude_ellipsoid_m(from._internal_altitude_ellipsoid_m());
  }
  if (!(from.horizontal_uncertainty_m() <= 0 && from.horizontal_uncertainty_m() >= 0)) {
    _internal_set_horizontal_uncertainty_m(from._internal_horizontal_uncertainty_m());
  }
  if (!(from.vertical_uncertainty_m() <= 0 && from.vertical_uncertainty_m() >= 0)) {
    _internal_set_vertical_uncertainty_m(from._internal_vertical_uncertainty_m());
  }
  if (!(from.velocity_uncertainty_m_s() <= 0 && from.velocity_uncertainty_m_s() >= 0)) {
    _internal_set_velocity_uncertainty_m_s(from._internal_velocity_uncertainty_m_s());
  }
  if (!(from.heading_uncertainty_deg() <= 0 && from.heading_uncertainty_deg() >= 0)) {
    _internal_set_heading_uncertainty_deg(from._internal_heading_uncertainty_deg());
  }
  if (!(from.yaw_deg() <= 0 && from.yaw_deg() >= 0)) {
    _internal_set_yaw_deg(from._internal_yaw_deg());
  }
}

void RawGps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.RawGps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawGps::CopyFrom(const RawGps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.RawGps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawGps::IsInitialized() const {
  return true;
}

void RawGps::InternalSwap(RawGps* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawGps, yaw_deg_)
      + sizeof(RawGps::yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(RawGps, timestamp_us_)>(
          reinterpret_cast<char*>(&timestamp_us_),
          reinterpret_cast<char*>(&other->timestamp_us_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawGps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Battery::InitAsDefaultInstance() {
}
class Battery::_Internal {
 public:
};

Battery::Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Battery)
}
Battery::Battery(const Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&voltage_v_, &from.voltage_v_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_percent_) -
    reinterpret_cast<char*>(&voltage_v_)) + sizeof(remaining_percent_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.Battery)
}

void Battery::SharedCtor() {
  ::memset(&voltage_v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_percent_) -
      reinterpret_cast<char*>(&voltage_v_)) + sizeof(remaining_percent_));
}

Battery::~Battery() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Battery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Battery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Battery::ArenaDtor(void* object) {
  Battery* _this = reinterpret_cast< Battery* >(object);
  (void)_this;
}
void Battery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Battery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Battery& Battery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Battery_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&voltage_v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_percent_) -
      reinterpret_cast<char*>(&voltage_v_)) + sizeof(remaining_percent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Battery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          voltage_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          remaining_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Battery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->voltage_v() <= 0 && this->voltage_v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_voltage_v(), target);
  }

  // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->remaining_percent() <= 0 && this->remaining_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_remaining_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Battery)
  return target;
}

size_t Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Battery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->voltage_v() <= 0 && this->voltage_v() >= 0)) {
    total_size += 1 + 4;
  }

  // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->remaining_percent() <= 0 && this->remaining_percent() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Battery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  const Battery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Battery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.Battery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.Battery)
    MergeFrom(*source);
  }
}

void Battery::MergeFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.voltage_v() <= 0 && from.voltage_v() >= 0)) {
    _internal_set_voltage_v(from._internal_voltage_v());
  }
  if (!(from.remaining_percent() <= 0 && from.remaining_percent() >= 0)) {
    _internal_set_remaining_percent(from._internal_remaining_percent());
  }
}

void Battery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battery::IsInitialized() const {
  return true;
}

void Battery::InternalSwap(Battery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Battery, remaining_percent_)
      + sizeof(Battery::remaining_percent_)
      - PROTOBUF_FIELD_OFFSET(Battery, voltage_v_)>(
          reinterpret_cast<char*>(&voltage_v_),
          reinterpret_cast<char*>(&other->voltage_v_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Battery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RcStatus::InitAsDefaultInstance() {
}
class RcStatus::_Internal {
 public:
};

RcStatus::RcStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.RcStatus)
}
RcStatus::RcStatus(const RcStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&was_available_once_, &from.was_available_once_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_strength_percent_) -
    reinterpret_cast<char*>(&was_available_once_)) + sizeof(signal_strength_percent_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.RcStatus)
}

void RcStatus::SharedCtor() {
  ::memset(&was_available_once_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_strength_percent_) -
      reinterpret_cast<char*>(&was_available_once_)) + sizeof(signal_strength_percent_));
}

RcStatus::~RcStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.RcStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RcStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RcStatus::ArenaDtor(void* object) {
  RcStatus* _this = reinterpret_cast< RcStatus* >(object);
  (void)_this;
}
void RcStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RcStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RcStatus& RcStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RcStatus_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void RcStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.RcStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&was_available_once_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_strength_percent_) -
      reinterpret_cast<char*>(&was_available_once_)) + sizeof(signal_strength_percent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RcStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          was_available_once_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          signal_strength_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RcStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.RcStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->was_available_once() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_was_available_once(), target);
  }

  // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->is_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_available(), target);
  }

  // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->signal_strength_percent() <= 0 && this->signal_strength_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_signal_strength_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.RcStatus)
  return target;
}

size_t RcStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.RcStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->was_available_once() != 0) {
    total_size += 1 + 1;
  }

  // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->is_available() != 0) {
    total_size += 1 + 1;
  }

  // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->signal_strength_percent() <= 0 && this->signal_strength_percent() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RcStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.RcStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RcStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RcStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.RcStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.RcStatus)
    MergeFrom(*source);
  }
}

void RcStatus::MergeFrom(const RcStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.RcStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.was_available_once() != 0) {
    _internal_set_was_available_once(from._internal_was_available_once());
  }
  if (from.is_available() != 0) {
    _internal_set_is_available(from._internal_is_available());
  }
  if (!(from.signal_strength_percent() <= 0 && from.signal_strength_percent() >= 0)) {
    _internal_set_signal_strength_percent(from._internal_signal_strength_percent());
  }
}

void RcStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.RcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RcStatus::CopyFrom(const RcStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.RcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcStatus::IsInitialized() const {
  return true;
}

void RcStatus::InternalSwap(RcStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RcStatus, signal_strength_percent_)
      + sizeof(RcStatus::signal_strength_percent_)
      - PROTOBUF_FIELD_OFFSET(RcStatus, was_available_once_)>(
          reinterpret_cast<char*>(&was_available_once_),
          reinterpret_cast<char*>(&other->was_available_once_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RcStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusText::InitAsDefaultInstance() {
}
class StatusText::_Internal {
 public:
};

StatusText::StatusText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.StatusText)
}
StatusText::StatusText(const StatusText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.StatusText)
}

void StatusText::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusText_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

StatusText::~StatusText() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.StatusText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatusText::ArenaDtor(void* object) {
  StatusText* _this = reinterpret_cast< StatusText* >(object);
  (void)_this;
}
void StatusText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusText& StatusText::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusText_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void StatusText::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.StatusText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.StatusTextType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mavsdk::rpc::telemetry_server::StatusTextType>(val));
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.telemetry_server.StatusText.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.StatusText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.StatusTextType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.telemetry_server.StatusText.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.StatusText)
  return target;
}

size_t StatusText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.StatusText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .mavsdk.rpc.telemetry_server.StatusTextType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.StatusText)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.StatusText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.StatusText)
    MergeFrom(*source);
  }
}

void StatusText::MergeFrom(const StatusText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.StatusText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void StatusText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.StatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusText::CopyFrom(const StatusText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.StatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusText::IsInitialized() const {
  return true;
}

void StatusText::InternalSwap(StatusText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActuatorControlTarget::InitAsDefaultInstance() {
}
class ActuatorControlTarget::_Internal {
 public:
};

ActuatorControlTarget::ActuatorControlTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  controls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
}
ActuatorControlTarget::ActuatorControlTarget(const ActuatorControlTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      controls_(from.controls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_ = from.group_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
}

void ActuatorControlTarget::SharedCtor() {
  group_ = 0;
}

ActuatorControlTarget::~ActuatorControlTarget() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActuatorControlTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActuatorControlTarget::ArenaDtor(void* object) {
  ActuatorControlTarget* _this = reinterpret_cast< ActuatorControlTarget* >(object);
  (void)_this;
}
void ActuatorControlTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActuatorControlTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActuatorControlTarget& ActuatorControlTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActuatorControlTarget_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void ActuatorControlTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controls_.Clear();
  group_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActuatorControlTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float controls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_controls(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_controls(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorControlTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_group(), target);
  }

  // repeated float controls = 2;
  if (this->_internal_controls_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_controls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
  return target;
}

size_t ActuatorControlTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float controls = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_controls_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _controls_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorControlTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorControlTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorControlTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
    MergeFrom(*source);
  }
}

void ActuatorControlTarget::MergeFrom(const ActuatorControlTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controls_.MergeFrom(from.controls_);
  if (from.group() != 0) {
    _internal_set_group(from._internal_group());
  }
}

void ActuatorControlTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorControlTarget::CopyFrom(const ActuatorControlTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorControlTarget::IsInitialized() const {
  return true;
}

void ActuatorControlTarget::InternalSwap(ActuatorControlTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  controls_.InternalSwap(&other->controls_);
  swap(group_, other->group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorControlTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActuatorOutputStatus::InitAsDefaultInstance() {
}
class ActuatorOutputStatus::_Internal {
 public:
};

ActuatorOutputStatus::ActuatorOutputStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  actuator_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
}
ActuatorOutputStatus::ActuatorOutputStatus(const ActuatorOutputStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actuator_(from.actuator_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
}

void ActuatorOutputStatus::SharedCtor() {
  active_ = 0u;
}

ActuatorOutputStatus::~ActuatorOutputStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActuatorOutputStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActuatorOutputStatus::ArenaDtor(void* object) {
  ActuatorOutputStatus* _this = reinterpret_cast< ActuatorOutputStatus* >(object);
  (void)_this;
}
void ActuatorOutputStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActuatorOutputStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActuatorOutputStatus& ActuatorOutputStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActuatorOutputStatus_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void ActuatorOutputStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actuator_.Clear();
  active_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActuatorOutputStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float actuator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_actuator(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_actuator(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorOutputStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_active(), target);
  }

  // repeated float actuator = 2;
  if (this->_internal_actuator_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_actuator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
  return target;
}

size_t ActuatorOutputStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float actuator = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_actuator_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _actuator_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->active() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorOutputStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorOutputStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorOutputStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
    MergeFrom(*source);
  }
}

void ActuatorOutputStatus::MergeFrom(const ActuatorOutputStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actuator_.MergeFrom(from.actuator_);
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
}

void ActuatorOutputStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorOutputStatus::CopyFrom(const ActuatorOutputStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorOutputStatus::IsInitialized() const {
  return true;
}

void ActuatorOutputStatus::InternalSwap(ActuatorOutputStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  actuator_.InternalSwap(&other->actuator_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorOutputStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Covariance::InitAsDefaultInstance() {
}
class Covariance::_Internal {
 public:
};

Covariance::Covariance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  covariance_matrix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Covariance)
}
Covariance::Covariance(const Covariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      covariance_matrix_(from.covariance_matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.Covariance)
}

void Covariance::SharedCtor() {
}

Covariance::~Covariance() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Covariance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Covariance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Covariance::ArenaDtor(void* object) {
  Covariance* _this = reinterpret_cast< Covariance* >(object);
  (void)_this;
}
void Covariance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Covariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Covariance& Covariance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Covariance_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Covariance::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Covariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_matrix_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Covariance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float covariance_matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_covariance_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_covariance_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Covariance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Covariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float covariance_matrix = 1;
  if (this->_internal_covariance_matrix_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_covariance_matrix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Covariance)
  return target;
}

size_t Covariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Covariance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float covariance_matrix = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_covariance_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _covariance_matrix_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Covariance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.Covariance)
  GOOGLE_DCHECK_NE(&from, this);
  const Covariance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Covariance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.Covariance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.Covariance)
    MergeFrom(*source);
  }
}

void Covariance::MergeFrom(const Covariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Covariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_matrix_.MergeFrom(from.covariance_matrix_);
}

void Covariance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.Covariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Covariance::CopyFrom(const Covariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Covariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Covariance::IsInitialized() const {
  return true;
}

void Covariance::InternalSwap(Covariance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  covariance_matrix_.InternalSwap(&other->covariance_matrix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Covariance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VelocityBody::InitAsDefaultInstance() {
}
class VelocityBody::_Internal {
 public:
};

VelocityBody::VelocityBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.VelocityBody)
}
VelocityBody::VelocityBody(const VelocityBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_m_s_, &from.x_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_m_s_) -
    reinterpret_cast<char*>(&x_m_s_)) + sizeof(z_m_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.VelocityBody)
}

void VelocityBody::SharedCtor() {
  ::memset(&x_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_m_s_) -
      reinterpret_cast<char*>(&x_m_s_)) + sizeof(z_m_s_));
}

VelocityBody::~VelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.VelocityBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VelocityBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VelocityBody::ArenaDtor(void* object) {
  VelocityBody* _this = reinterpret_cast< VelocityBody* >(object);
  (void)_this;
}
void VelocityBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VelocityBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VelocityBody& VelocityBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VelocityBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void VelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.VelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_m_s_) -
      reinterpret_cast<char*>(&x_m_s_)) + sizeof(z_m_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VelocityBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x_m_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_m_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z_m_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VelocityBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.VelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_m_s = 1;
  if (!(this->x_m_s() <= 0 && this->x_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x_m_s(), target);
  }

  // float y_m_s = 2;
  if (!(this->y_m_s() <= 0 && this->y_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y_m_s(), target);
  }

  // float z_m_s = 3;
  if (!(this->z_m_s() <= 0 && this->z_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.VelocityBody)
  return target;
}

size_t VelocityBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.VelocityBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_m_s = 1;
  if (!(this->x_m_s() <= 0 && this->x_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_m_s = 2;
  if (!(this->y_m_s() <= 0 && this->y_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float z_m_s = 3;
  if (!(this->z_m_s() <= 0 && this->z_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelocityBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.VelocityBody)
  GOOGLE_DCHECK_NE(&from, this);
  const VelocityBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelocityBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.VelocityBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.VelocityBody)
    MergeFrom(*source);
  }
}

void VelocityBody::MergeFrom(const VelocityBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.VelocityBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x_m_s() <= 0 && from.x_m_s() >= 0)) {
    _internal_set_x_m_s(from._internal_x_m_s());
  }
  if (!(from.y_m_s() <= 0 && from.y_m_s() >= 0)) {
    _internal_set_y_m_s(from._internal_y_m_s());
  }
  if (!(from.z_m_s() <= 0 && from.z_m_s() >= 0)) {
    _internal_set_z_m_s(from._internal_z_m_s());
  }
}

void VelocityBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.VelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityBody::CopyFrom(const VelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.VelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityBody::IsInitialized() const {
  return true;
}

void VelocityBody::InternalSwap(VelocityBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelocityBody, z_m_s_)
      + sizeof(VelocityBody::z_m_s_)
      - PROTOBUF_FIELD_OFFSET(VelocityBody, x_m_s_)>(
          reinterpret_cast<char*>(&x_m_s_),
          reinterpret_cast<char*>(&other->x_m_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VelocityBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionBody::InitAsDefaultInstance() {
}
class PositionBody::_Internal {
 public:
};

PositionBody::PositionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PositionBody)
}
PositionBody::PositionBody(const PositionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_m_, &from.x_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_m_) -
    reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PositionBody)
}

void PositionBody::SharedCtor() {
  ::memset(&x_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_m_) -
      reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
}

PositionBody::~PositionBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PositionBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PositionBody::ArenaDtor(void* object) {
  PositionBody* _this = reinterpret_cast< PositionBody* >(object);
  (void)_this;
}
void PositionBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionBody& PositionBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionBody_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PositionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PositionBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_m_) -
      reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PositionBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_m = 1;
  if (!(this->x_m() <= 0 && this->x_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x_m(), target);
  }

  // float y_m = 2;
  if (!(this->y_m() <= 0 && this->y_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y_m(), target);
  }

  // float z_m = 3;
  if (!(this->z_m() <= 0 && this->z_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PositionBody)
  return target;
}

size_t PositionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PositionBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_m = 1;
  if (!(this->x_m() <= 0 && this->x_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_m = 2;
  if (!(this->y_m() <= 0 && this->y_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float z_m = 3;
  if (!(this->z_m() <= 0 && this->z_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PositionBody)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PositionBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PositionBody)
    MergeFrom(*source);
  }
}

void PositionBody::MergeFrom(const PositionBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PositionBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x_m() <= 0 && from.x_m() >= 0)) {
    _internal_set_x_m(from._internal_x_m());
  }
  if (!(from.y_m() <= 0 && from.y_m() >= 0)) {
    _internal_set_y_m(from._internal_y_m());
  }
  if (!(from.z_m() <= 0 && from.z_m() >= 0)) {
    _internal_set_z_m(from._internal_z_m());
  }
}

void PositionBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PositionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionBody::CopyFrom(const PositionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PositionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionBody::IsInitialized() const {
  return true;
}

void PositionBody::InternalSwap(PositionBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionBody, z_m_)
      + sizeof(PositionBody::z_m_)
      - PROTOBUF_FIELD_OFFSET(PositionBody, x_m_)>(
          reinterpret_cast<char*>(&x_m_),
          reinterpret_cast<char*>(&other->x_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Odometry::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_Odometry_default_instance_._instance.get_mutable()->position_body_ = const_cast< ::mavsdk::rpc::telemetry_server::PositionBody*>(
      ::mavsdk::rpc::telemetry_server::PositionBody::internal_default_instance());
  ::mavsdk::rpc::telemetry_server::_Odometry_default_instance_._instance.get_mutable()->q_ = const_cast< ::mavsdk::rpc::telemetry_server::Quaternion*>(
      ::mavsdk::rpc::telemetry_server::Quaternion::internal_default_instance());
  ::mavsdk::rpc::telemetry_server::_Odometry_default_instance_._instance.get_mutable()->velocity_body_ = const_cast< ::mavsdk::rpc::telemetry_server::VelocityBody*>(
      ::mavsdk::rpc::telemetry_server::VelocityBody::internal_default_instance());
  ::mavsdk::rpc::telemetry_server::_Odometry_default_instance_._instance.get_mutable()->angular_velocity_body_ = const_cast< ::mavsdk::rpc::telemetry_server::AngularVelocityBody*>(
      ::mavsdk::rpc::telemetry_server::AngularVelocityBody::internal_default_instance());
  ::mavsdk::rpc::telemetry_server::_Odometry_default_instance_._instance.get_mutable()->pose_covariance_ = const_cast< ::mavsdk::rpc::telemetry_server::Covariance*>(
      ::mavsdk::rpc::telemetry_server::Covariance::internal_default_instance());
  ::mavsdk::rpc::telemetry_server::_Odometry_default_instance_._instance.get_mutable()->velocity_covariance_ = const_cast< ::mavsdk::rpc::telemetry_server::Covariance*>(
      ::mavsdk::rpc::telemetry_server::Covariance::internal_default_instance());
}
class Odometry::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::PositionBody& position_body(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry_server::Quaternion& q(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry_server::VelocityBody& velocity_body(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry_server::AngularVelocityBody& angular_velocity_body(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry_server::Covariance& pose_covariance(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry_server::Covariance& velocity_covariance(const Odometry* msg);
};

const ::mavsdk::rpc::telemetry_server::PositionBody&
Odometry::_Internal::position_body(const Odometry* msg) {
  return *msg->position_body_;
}
const ::mavsdk::rpc::telemetry_server::Quaternion&
Odometry::_Internal::q(const Odometry* msg) {
  return *msg->q_;
}
const ::mavsdk::rpc::telemetry_server::VelocityBody&
Odometry::_Internal::velocity_body(const Odometry* msg) {
  return *msg->velocity_body_;
}
const ::mavsdk::rpc::telemetry_server::AngularVelocityBody&
Odometry::_Internal::angular_velocity_body(const Odometry* msg) {
  return *msg->angular_velocity_body_;
}
const ::mavsdk::rpc::telemetry_server::Covariance&
Odometry::_Internal::pose_covariance(const Odometry* msg) {
  return *msg->pose_covariance_;
}
const ::mavsdk::rpc::telemetry_server::Covariance&
Odometry::_Internal::velocity_covariance(const Odometry* msg) {
  return *msg->velocity_covariance_;
}
Odometry::Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Odometry)
}
Odometry::Odometry(const Odometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_body()) {
    position_body_ = new ::mavsdk::rpc::telemetry_server::PositionBody(*from.position_body_);
  } else {
    position_body_ = nullptr;
  }
  if (from._internal_has_q()) {
    q_ = new ::mavsdk::rpc::telemetry_server::Quaternion(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_velocity_body()) {
    velocity_body_ = new ::mavsdk::rpc::telemetry_server::VelocityBody(*from.velocity_body_);
  } else {
    velocity_body_ = nullptr;
  }
  if (from._internal_has_angular_velocity_body()) {
    angular_velocity_body_ = new ::mavsdk::rpc::telemetry_server::AngularVelocityBody(*from.angular_velocity_body_);
  } else {
    angular_velocity_body_ = nullptr;
  }
  if (from._internal_has_pose_covariance()) {
    pose_covariance_ = new ::mavsdk::rpc::telemetry_server::Covariance(*from.pose_covariance_);
  } else {
    pose_covariance_ = nullptr;
  }
  if (from._internal_has_velocity_covariance()) {
    velocity_covariance_ = new ::mavsdk::rpc::telemetry_server::Covariance(*from.velocity_covariance_);
  } else {
    velocity_covariance_ = nullptr;
  }
  ::memcpy(&time_usec_, &from.time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&child_frame_id_) -
    reinterpret_cast<char*>(&time_usec_)) + sizeof(child_frame_id_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.Odometry)
}

void Odometry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Odometry_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  ::memset(&position_body_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&child_frame_id_) -
      reinterpret_cast<char*>(&position_body_)) + sizeof(child_frame_id_));
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Odometry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Odometry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_body_;
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete velocity_body_;
  if (this != internal_default_instance()) delete angular_velocity_body_;
  if (this != internal_default_instance()) delete pose_covariance_;
  if (this != internal_default_instance()) delete velocity_covariance_;
}

void Odometry::ArenaDtor(void* object) {
  Odometry* _this = reinterpret_cast< Odometry* >(object);
  (void)_this;
}
void Odometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Odometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Odometry& Odometry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Odometry_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_body_ != nullptr) {
    delete position_body_;
  }
  position_body_ = nullptr;
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && velocity_body_ != nullptr) {
    delete velocity_body_;
  }
  velocity_body_ = nullptr;
  if (GetArena() == nullptr && angular_velocity_body_ != nullptr) {
    delete angular_velocity_body_;
  }
  angular_velocity_body_ = nullptr;
  if (GetArena() == nullptr && pose_covariance_ != nullptr) {
    delete pose_covariance_;
  }
  pose_covariance_ = nullptr;
  if (GetArena() == nullptr && velocity_covariance_ != nullptr) {
    delete velocity_covariance_;
  }
  velocity_covariance_ = nullptr;
  ::memset(&time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&child_frame_id_) -
      reinterpret_cast<char*>(&time_usec_)) + sizeof(child_frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Odometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.Odometry.MavFrame frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_frame_id(static_cast<::mavsdk::rpc::telemetry_server::Odometry_MavFrame>(val));
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.Odometry.MavFrame child_frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_child_frame_id(static_cast<::mavsdk::rpc::telemetry_server::Odometry_MavFrame>(val));
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.PositionBody position_body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.Quaternion q = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.VelocityBody velocity_body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity_body = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.Covariance pose_covariance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_covariance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.Covariance velocity_covariance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_covariance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Odometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_usec = 1;
  if (this->time_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // .mavsdk.rpc.telemetry_server.Odometry.MavFrame frame_id = 2;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_frame_id(), target);
  }

  // .mavsdk.rpc.telemetry_server.Odometry.MavFrame child_frame_id = 3;
  if (this->child_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_child_frame_id(), target);
  }

  // .mavsdk.rpc.telemetry_server.PositionBody position_body = 4;
  if (this->has_position_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position_body(this), target, stream);
  }

  // .mavsdk.rpc.telemetry_server.Quaternion q = 5;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::q(this), target, stream);
  }

  // .mavsdk.rpc.telemetry_server.VelocityBody velocity_body = 6;
  if (this->has_velocity_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::velocity_body(this), target, stream);
  }

  // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity_body = 7;
  if (this->has_angular_velocity_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::angular_velocity_body(this), target, stream);
  }

  // .mavsdk.rpc.telemetry_server.Covariance pose_covariance = 8;
  if (this->has_pose_covariance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::pose_covariance(this), target, stream);
  }

  // .mavsdk.rpc.telemetry_server.Covariance velocity_covariance = 9;
  if (this->has_velocity_covariance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::velocity_covariance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Odometry)
  return target;
}

size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Odometry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.PositionBody position_body = 4;
  if (this->has_position_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_body_);
  }

  // .mavsdk.rpc.telemetry_server.Quaternion q = 5;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .mavsdk.rpc.telemetry_server.VelocityBody velocity_body = 6;
  if (this->has_velocity_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_body_);
  }

  // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity_body = 7;
  if (this->has_angular_velocity_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_body_);
  }

  // .mavsdk.rpc.telemetry_server.Covariance pose_covariance = 8;
  if (this->has_pose_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_covariance_);
  }

  // .mavsdk.rpc.telemetry_server.Covariance velocity_covariance = 9;
  if (this->has_velocity_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_covariance_);
  }

  // uint64 time_usec = 1;
  if (this->time_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_usec());
  }

  // .mavsdk.rpc.telemetry_server.Odometry.MavFrame frame_id = 2;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_frame_id());
  }

  // .mavsdk.rpc.telemetry_server.Odometry.MavFrame child_frame_id = 3;
  if (this->child_frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_child_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odometry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Odometry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Odometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.Odometry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.Odometry)
    MergeFrom(*source);
  }
}

void Odometry::MergeFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_body()) {
    _internal_mutable_position_body()->::mavsdk::rpc::telemetry_server::PositionBody::MergeFrom(from._internal_position_body());
  }
  if (from.has_q()) {
    _internal_mutable_q()->::mavsdk::rpc::telemetry_server::Quaternion::MergeFrom(from._internal_q());
  }
  if (from.has_velocity_body()) {
    _internal_mutable_velocity_body()->::mavsdk::rpc::telemetry_server::VelocityBody::MergeFrom(from._internal_velocity_body());
  }
  if (from.has_angular_velocity_body()) {
    _internal_mutable_angular_velocity_body()->::mavsdk::rpc::telemetry_server::AngularVelocityBody::MergeFrom(from._internal_angular_velocity_body());
  }
  if (from.has_pose_covariance()) {
    _internal_mutable_pose_covariance()->::mavsdk::rpc::telemetry_server::Covariance::MergeFrom(from._internal_pose_covariance());
  }
  if (from.has_velocity_covariance()) {
    _internal_mutable_velocity_covariance()->::mavsdk::rpc::telemetry_server::Covariance::MergeFrom(from._internal_velocity_covariance());
  }
  if (from.time_usec() != 0) {
    _internal_set_time_usec(from._internal_time_usec());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.child_frame_id() != 0) {
    _internal_set_child_frame_id(from._internal_child_frame_id());
  }
}

void Odometry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry::IsInitialized() const {
  return true;
}

void Odometry::InternalSwap(Odometry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Odometry, child_frame_id_)
      + sizeof(Odometry::child_frame_id_)
      - PROTOBUF_FIELD_OFFSET(Odometry, position_body_)>(
          reinterpret_cast<char*>(&position_body_),
          reinterpret_cast<char*>(&other->position_body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Odometry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DistanceSensor::InitAsDefaultInstance() {
}
class DistanceSensor::_Internal {
 public:
};

DistanceSensor::DistanceSensor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.DistanceSensor)
}
DistanceSensor::DistanceSensor(const DistanceSensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&minimum_distance_m_, &from.minimum_distance_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_distance_m_) -
    reinterpret_cast<char*>(&minimum_distance_m_)) + sizeof(current_distance_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.DistanceSensor)
}

void DistanceSensor::SharedCtor() {
  ::memset(&minimum_distance_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_distance_m_) -
      reinterpret_cast<char*>(&minimum_distance_m_)) + sizeof(current_distance_m_));
}

DistanceSensor::~DistanceSensor() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.DistanceSensor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DistanceSensor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DistanceSensor::ArenaDtor(void* object) {
  DistanceSensor* _this = reinterpret_cast< DistanceSensor* >(object);
  (void)_this;
}
void DistanceSensor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistanceSensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistanceSensor& DistanceSensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DistanceSensor_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void DistanceSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.DistanceSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minimum_distance_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_distance_m_) -
      reinterpret_cast<char*>(&minimum_distance_m_)) + sizeof(current_distance_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistanceSensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          minimum_distance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          maximum_distance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          current_distance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistanceSensor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.DistanceSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->minimum_distance_m() <= 0 && this->minimum_distance_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_minimum_distance_m(), target);
  }

  // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->maximum_distance_m() <= 0 && this->maximum_distance_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_maximum_distance_m(), target);
  }

  // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->current_distance_m() <= 0 && this->current_distance_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_current_distance_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.DistanceSensor)
  return target;
}

size_t DistanceSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.DistanceSensor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->minimum_distance_m() <= 0 && this->minimum_distance_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->maximum_distance_m() <= 0 && this->maximum_distance_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->current_distance_m() <= 0 && this->current_distance_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistanceSensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.DistanceSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceSensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistanceSensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.DistanceSensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.DistanceSensor)
    MergeFrom(*source);
  }
}

void DistanceSensor::MergeFrom(const DistanceSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.DistanceSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.minimum_distance_m() <= 0 && from.minimum_distance_m() >= 0)) {
    _internal_set_minimum_distance_m(from._internal_minimum_distance_m());
  }
  if (!(from.maximum_distance_m() <= 0 && from.maximum_distance_m() >= 0)) {
    _internal_set_maximum_distance_m(from._internal_maximum_distance_m());
  }
  if (!(from.current_distance_m() <= 0 && from.current_distance_m() >= 0)) {
    _internal_set_current_distance_m(from._internal_current_distance_m());
  }
}

void DistanceSensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.DistanceSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceSensor::CopyFrom(const DistanceSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.DistanceSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceSensor::IsInitialized() const {
  return true;
}

void DistanceSensor::InternalSwap(DistanceSensor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DistanceSensor, current_distance_m_)
      + sizeof(DistanceSensor::current_distance_m_)
      - PROTOBUF_FIELD_OFFSET(DistanceSensor, minimum_distance_m_)>(
          reinterpret_cast<char*>(&minimum_distance_m_),
          reinterpret_cast<char*>(&other->minimum_distance_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceSensor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScaledPressure::InitAsDefaultInstance() {
}
class ScaledPressure::_Internal {
 public:
};

ScaledPressure::ScaledPressure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.ScaledPressure)
}
ScaledPressure::ScaledPressure(const ScaledPressure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_us_, &from.timestamp_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&differential_pressure_temperature_deg_) -
    reinterpret_cast<char*>(&timestamp_us_)) + sizeof(differential_pressure_temperature_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.ScaledPressure)
}

void ScaledPressure::SharedCtor() {
  ::memset(&timestamp_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&differential_pressure_temperature_deg_) -
      reinterpret_cast<char*>(&timestamp_us_)) + sizeof(differential_pressure_temperature_deg_));
}

ScaledPressure::~ScaledPressure() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.ScaledPressure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScaledPressure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScaledPressure::ArenaDtor(void* object) {
  ScaledPressure* _this = reinterpret_cast< ScaledPressure* >(object);
  (void)_this;
}
void ScaledPressure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScaledPressure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScaledPressure& ScaledPressure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScaledPressure_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void ScaledPressure::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.ScaledPressure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&differential_pressure_temperature_deg_) -
      reinterpret_cast<char*>(&timestamp_us_)) + sizeof(differential_pressure_temperature_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScaledPressure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float absolute_pressure_hpa = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          absolute_pressure_hpa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float differential_pressure_hpa = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          differential_pressure_hpa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float temperature_deg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          temperature_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float differential_pressure_temperature_deg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          differential_pressure_temperature_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScaledPressure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.ScaledPressure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp_us = 1;
  if (this->timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp_us(), target);
  }

  // float absolute_pressure_hpa = 2;
  if (!(this->absolute_pressure_hpa() <= 0 && this->absolute_pressure_hpa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_absolute_pressure_hpa(), target);
  }

  // float differential_pressure_hpa = 3;
  if (!(this->differential_pressure_hpa() <= 0 && this->differential_pressure_hpa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_differential_pressure_hpa(), target);
  }

  // float temperature_deg = 4;
  if (!(this->temperature_deg() <= 0 && this->temperature_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_temperature_deg(), target);
  }

  // float differential_pressure_temperature_deg = 5;
  if (!(this->differential_pressure_temperature_deg() <= 0 && this->differential_pressure_temperature_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_differential_pressure_temperature_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.ScaledPressure)
  return target;
}

size_t ScaledPressure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.ScaledPressure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp_us = 1;
  if (this->timestamp_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_us());
  }

  // float absolute_pressure_hpa = 2;
  if (!(this->absolute_pressure_hpa() <= 0 && this->absolute_pressure_hpa() >= 0)) {
    total_size += 1 + 4;
  }

  // float differential_pressure_hpa = 3;
  if (!(this->differential_pressure_hpa() <= 0 && this->differential_pressure_hpa() >= 0)) {
    total_size += 1 + 4;
  }

  // float temperature_deg = 4;
  if (!(this->temperature_deg() <= 0 && this->temperature_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float differential_pressure_temperature_deg = 5;
  if (!(this->differential_pressure_temperature_deg() <= 0 && this->differential_pressure_temperature_deg() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScaledPressure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.ScaledPressure)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaledPressure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScaledPressure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.ScaledPressure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.ScaledPressure)
    MergeFrom(*source);
  }
}

void ScaledPressure::MergeFrom(const ScaledPressure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.ScaledPressure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp_us() != 0) {
    _internal_set_timestamp_us(from._internal_timestamp_us());
  }
  if (!(from.absolute_pressure_hpa() <= 0 && from.absolute_pressure_hpa() >= 0)) {
    _internal_set_absolute_pressure_hpa(from._internal_absolute_pressure_hpa());
  }
  if (!(from.differential_pressure_hpa() <= 0 && from.differential_pressure_hpa() >= 0)) {
    _internal_set_differential_pressure_hpa(from._internal_differential_pressure_hpa());
  }
  if (!(from.temperature_deg() <= 0 && from.temperature_deg() >= 0)) {
    _internal_set_temperature_deg(from._internal_temperature_deg());
  }
  if (!(from.differential_pressure_temperature_deg() <= 0 && from.differential_pressure_temperature_deg() >= 0)) {
    _internal_set_differential_pressure_temperature_deg(from._internal_differential_pressure_temperature_deg());
  }
}

void ScaledPressure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.ScaledPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaledPressure::CopyFrom(const ScaledPressure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.ScaledPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaledPressure::IsInitialized() const {
  return true;
}

void ScaledPressure::InternalSwap(ScaledPressure* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScaledPressure, differential_pressure_temperature_deg_)
      + sizeof(ScaledPressure::differential_pressure_temperature_deg_)
      - PROTOBUF_FIELD_OFFSET(ScaledPressure, timestamp_us_)>(
          reinterpret_cast<char*>(&timestamp_us_),
          reinterpret_cast<char*>(&other->timestamp_us_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScaledPressure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionNed::InitAsDefaultInstance() {
}
class PositionNed::_Internal {
 public:
};

PositionNed::PositionNed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PositionNed)
}
PositionNed::PositionNed(const PositionNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&north_m_, &from.north_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_m_) -
    reinterpret_cast<char*>(&north_m_)) + sizeof(down_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PositionNed)
}

void PositionNed::SharedCtor() {
  ::memset(&north_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_) -
      reinterpret_cast<char*>(&north_m_)) + sizeof(down_m_));
}

PositionNed::~PositionNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PositionNed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionNed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PositionNed::ArenaDtor(void* object) {
  PositionNed* _this = reinterpret_cast< PositionNed* >(object);
  (void)_this;
}
void PositionNed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionNed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionNed& PositionNed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PositionNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PositionNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&north_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_) -
      reinterpret_cast<char*>(&north_m_)) + sizeof(down_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionNed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          north_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          east_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionNed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PositionNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->north_m() <= 0 && this->north_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_north_m(), target);
  }

  // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->east_m() <= 0 && this->east_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_east_m(), target);
  }

  // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_m() <= 0 && this->down_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PositionNed)
  return target;
}

size_t PositionNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PositionNed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->north_m() <= 0 && this->north_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->east_m() <= 0 && this->east_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_m() <= 0 && this->down_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionNed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PositionNed)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionNed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionNed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PositionNed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PositionNed)
    MergeFrom(*source);
  }
}

void PositionNed::MergeFrom(const PositionNed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PositionNed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.north_m() <= 0 && from.north_m() >= 0)) {
    _internal_set_north_m(from._internal_north_m());
  }
  if (!(from.east_m() <= 0 && from.east_m() >= 0)) {
    _internal_set_east_m(from._internal_east_m());
  }
  if (!(from.down_m() <= 0 && from.down_m() >= 0)) {
    _internal_set_down_m(from._internal_down_m());
  }
}

void PositionNed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PositionNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionNed::CopyFrom(const PositionNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PositionNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionNed::IsInitialized() const {
  return true;
}

void PositionNed::InternalSwap(PositionNed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionNed, down_m_)
      + sizeof(PositionNed::down_m_)
      - PROTOBUF_FIELD_OFFSET(PositionNed, north_m_)>(
          reinterpret_cast<char*>(&north_m_),
          reinterpret_cast<char*>(&other->north_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionNed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VelocityNed::InitAsDefaultInstance() {
}
class VelocityNed::_Internal {
 public:
};

VelocityNed::VelocityNed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.VelocityNed)
}
VelocityNed::VelocityNed(const VelocityNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&north_m_s_, &from.north_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_m_s_) -
    reinterpret_cast<char*>(&north_m_s_)) + sizeof(down_m_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.VelocityNed)
}

void VelocityNed::SharedCtor() {
  ::memset(&north_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_s_) -
      reinterpret_cast<char*>(&north_m_s_)) + sizeof(down_m_s_));
}

VelocityNed::~VelocityNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.VelocityNed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VelocityNed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VelocityNed::ArenaDtor(void* object) {
  VelocityNed* _this = reinterpret_cast< VelocityNed* >(object);
  (void)_this;
}
void VelocityNed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VelocityNed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VelocityNed& VelocityNed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void VelocityNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.VelocityNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&north_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_s_) -
      reinterpret_cast<char*>(&north_m_s_)) + sizeof(down_m_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VelocityNed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float north_m_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          north_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float east_m_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          east_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_m_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VelocityNed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.VelocityNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float north_m_s = 1;
  if (!(this->north_m_s() <= 0 && this->north_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_north_m_s(), target);
  }

  // float east_m_s = 2;
  if (!(this->east_m_s() <= 0 && this->east_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_east_m_s(), target);
  }

  // float down_m_s = 3;
  if (!(this->down_m_s() <= 0 && this->down_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.VelocityNed)
  return target;
}

size_t VelocityNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.VelocityNed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float north_m_s = 1;
  if (!(this->north_m_s() <= 0 && this->north_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float east_m_s = 2;
  if (!(this->east_m_s() <= 0 && this->east_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_m_s = 3;
  if (!(this->down_m_s() <= 0 && this->down_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelocityNed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.VelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  const VelocityNed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelocityNed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.VelocityNed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.VelocityNed)
    MergeFrom(*source);
  }
}

void VelocityNed::MergeFrom(const VelocityNed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.VelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.north_m_s() <= 0 && from.north_m_s() >= 0)) {
    _internal_set_north_m_s(from._internal_north_m_s());
  }
  if (!(from.east_m_s() <= 0 && from.east_m_s() >= 0)) {
    _internal_set_east_m_s(from._internal_east_m_s());
  }
  if (!(from.down_m_s() <= 0 && from.down_m_s() >= 0)) {
    _internal_set_down_m_s(from._internal_down_m_s());
  }
}

void VelocityNed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.VelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityNed::CopyFrom(const VelocityNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.VelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityNed::IsInitialized() const {
  return true;
}

void VelocityNed::InternalSwap(VelocityNed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelocityNed, down_m_s_)
      + sizeof(VelocityNed::down_m_s_)
      - PROTOBUF_FIELD_OFFSET(VelocityNed, north_m_s_)>(
          reinterpret_cast<char*>(&north_m_s_),
          reinterpret_cast<char*>(&other->north_m_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VelocityNed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionVelocityNed::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_PositionVelocityNed_default_instance_._instance.get_mutable()->position_ = const_cast< ::mavsdk::rpc::telemetry_server::PositionNed*>(
      ::mavsdk::rpc::telemetry_server::PositionNed::internal_default_instance());
  ::mavsdk::rpc::telemetry_server::_PositionVelocityNed_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::mavsdk::rpc::telemetry_server::VelocityNed*>(
      ::mavsdk::rpc::telemetry_server::VelocityNed::internal_default_instance());
}
class PositionVelocityNed::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::PositionNed& position(const PositionVelocityNed* msg);
  static const ::mavsdk::rpc::telemetry_server::VelocityNed& velocity(const PositionVelocityNed* msg);
};

const ::mavsdk::rpc::telemetry_server::PositionNed&
PositionVelocityNed::_Internal::position(const PositionVelocityNed* msg) {
  return *msg->position_;
}
const ::mavsdk::rpc::telemetry_server::VelocityNed&
PositionVelocityNed::_Internal::velocity(const PositionVelocityNed* msg) {
  return *msg->velocity_;
}
PositionVelocityNed::PositionVelocityNed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PositionVelocityNed)
}
PositionVelocityNed::PositionVelocityNed(const PositionVelocityNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::mavsdk::rpc::telemetry_server::PositionNed(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::mavsdk::rpc::telemetry_server::VelocityNed(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PositionVelocityNed)
}

void PositionVelocityNed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionVelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_) -
      reinterpret_cast<char*>(&position_)) + sizeof(velocity_));
}

PositionVelocityNed::~PositionVelocityNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PositionVelocityNed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionVelocityNed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
}

void PositionVelocityNed::ArenaDtor(void* object) {
  PositionVelocityNed* _this = reinterpret_cast< PositionVelocityNed* >(object);
  (void)_this;
}
void PositionVelocityNed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionVelocityNed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionVelocityNed& PositionVelocityNed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionVelocityNed_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void PositionVelocityNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PositionVelocityNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionVelocityNed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.PositionNed position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.VelocityNed velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionVelocityNed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PositionVelocityNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.PositionNed position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .mavsdk.rpc.telemetry_server.VelocityNed velocity = 2;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PositionVelocityNed)
  return target;
}

size_t PositionVelocityNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PositionVelocityNed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.PositionNed position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .mavsdk.rpc.telemetry_server.VelocityNed velocity = 2;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionVelocityNed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.PositionVelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionVelocityNed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionVelocityNed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.PositionVelocityNed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.PositionVelocityNed)
    MergeFrom(*source);
  }
}

void PositionVelocityNed::MergeFrom(const PositionVelocityNed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PositionVelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::mavsdk::rpc::telemetry_server::PositionNed::MergeFrom(from._internal_position());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::mavsdk::rpc::telemetry_server::VelocityNed::MergeFrom(from._internal_velocity());
  }
}

void PositionVelocityNed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.PositionVelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionVelocityNed::CopyFrom(const PositionVelocityNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PositionVelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionVelocityNed::IsInitialized() const {
  return true;
}

void PositionVelocityNed::InternalSwap(PositionVelocityNed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionVelocityNed, velocity_)
      + sizeof(PositionVelocityNed::velocity_)
      - PROTOBUF_FIELD_OFFSET(PositionVelocityNed, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionVelocityNed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroundTruth::InitAsDefaultInstance() {
}
class GroundTruth::_Internal {
 public:
};

GroundTruth::GroundTruth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.GroundTruth)
}
GroundTruth::GroundTruth(const GroundTruth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&absolute_altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(absolute_altitude_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.GroundTruth)
}

void GroundTruth::SharedCtor() {
  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&absolute_altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(absolute_altitude_m_));
}

GroundTruth::~GroundTruth() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.GroundTruth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroundTruth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GroundTruth::ArenaDtor(void* object) {
  GroundTruth* _this = reinterpret_cast< GroundTruth* >(object);
  (void)_this;
}
void GroundTruth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroundTruth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroundTruth& GroundTruth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroundTruth_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void GroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.GroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&absolute_altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(absolute_altitude_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroundTruth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          absolute_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroundTruth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.GroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_absolute_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.GroundTruth)
  return target;
}

size_t GroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.GroundTruth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroundTruth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundTruth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroundTruth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.GroundTruth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.GroundTruth)
    MergeFrom(*source);
  }
}

void GroundTruth::MergeFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  if (!(from.absolute_altitude_m() <= 0 && from.absolute_altitude_m() >= 0)) {
    _internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
}

void GroundTruth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundTruth::CopyFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTruth::IsInitialized() const {
  return true;
}

void GroundTruth::InternalSwap(GroundTruth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroundTruth, absolute_altitude_m_)
      + sizeof(GroundTruth::absolute_altitude_m_)
      - PROTOBUF_FIELD_OFFSET(GroundTruth, latitude_deg_)>(
          reinterpret_cast<char*>(&latitude_deg_),
          reinterpret_cast<char*>(&other->latitude_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroundTruth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FixedwingMetrics::InitAsDefaultInstance() {
}
class FixedwingMetrics::_Internal {
 public:
};

FixedwingMetrics::FixedwingMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.FixedwingMetrics)
}
FixedwingMetrics::FixedwingMetrics(const FixedwingMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&airspeed_m_s_, &from.airspeed_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&climb_rate_m_s_) -
    reinterpret_cast<char*>(&airspeed_m_s_)) + sizeof(climb_rate_m_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.FixedwingMetrics)
}

void FixedwingMetrics::SharedCtor() {
  ::memset(&airspeed_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&climb_rate_m_s_) -
      reinterpret_cast<char*>(&airspeed_m_s_)) + sizeof(climb_rate_m_s_));
}

FixedwingMetrics::~FixedwingMetrics() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.FixedwingMetrics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FixedwingMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FixedwingMetrics::ArenaDtor(void* object) {
  FixedwingMetrics* _this = reinterpret_cast< FixedwingMetrics* >(object);
  (void)_this;
}
void FixedwingMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixedwingMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedwingMetrics& FixedwingMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixedwingMetrics_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void FixedwingMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.FixedwingMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&airspeed_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&climb_rate_m_s_) -
      reinterpret_cast<char*>(&airspeed_m_s_)) + sizeof(climb_rate_m_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixedwingMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          airspeed_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          throttle_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          climb_rate_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedwingMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.FixedwingMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->airspeed_m_s() <= 0 && this->airspeed_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_airspeed_m_s(), target);
  }

  // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->throttle_percentage() <= 0 && this->throttle_percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_throttle_percentage(), target);
  }

  // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->climb_rate_m_s() <= 0 && this->climb_rate_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_climb_rate_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.FixedwingMetrics)
  return target;
}

size_t FixedwingMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.FixedwingMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->airspeed_m_s() <= 0 && this->airspeed_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->throttle_percentage() <= 0 && this->throttle_percentage() >= 0)) {
    total_size += 1 + 4;
  }

  // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->climb_rate_m_s() <= 0 && this->climb_rate_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedwingMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.FixedwingMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedwingMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedwingMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.FixedwingMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.FixedwingMetrics)
    MergeFrom(*source);
  }
}

void FixedwingMetrics::MergeFrom(const FixedwingMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.FixedwingMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.airspeed_m_s() <= 0 && from.airspeed_m_s() >= 0)) {
    _internal_set_airspeed_m_s(from._internal_airspeed_m_s());
  }
  if (!(from.throttle_percentage() <= 0 && from.throttle_percentage() >= 0)) {
    _internal_set_throttle_percentage(from._internal_throttle_percentage());
  }
  if (!(from.climb_rate_m_s() <= 0 && from.climb_rate_m_s() >= 0)) {
    _internal_set_climb_rate_m_s(from._internal_climb_rate_m_s());
  }
}

void FixedwingMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.FixedwingMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedwingMetrics::CopyFrom(const FixedwingMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.FixedwingMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedwingMetrics::IsInitialized() const {
  return true;
}

void FixedwingMetrics::InternalSwap(FixedwingMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FixedwingMetrics, climb_rate_m_s_)
      + sizeof(FixedwingMetrics::climb_rate_m_s_)
      - PROTOBUF_FIELD_OFFSET(FixedwingMetrics, airspeed_m_s_)>(
          reinterpret_cast<char*>(&airspeed_m_s_),
          reinterpret_cast<char*>(&other->airspeed_m_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedwingMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccelerationFrd::InitAsDefaultInstance() {
}
class AccelerationFrd::_Internal {
 public:
};

AccelerationFrd::AccelerationFrd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.AccelerationFrd)
}
AccelerationFrd::AccelerationFrd(const AccelerationFrd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&forward_m_s2_, &from.forward_m_s2_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_m_s2_) -
    reinterpret_cast<char*>(&forward_m_s2_)) + sizeof(down_m_s2_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.AccelerationFrd)
}

void AccelerationFrd::SharedCtor() {
  ::memset(&forward_m_s2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_s2_) -
      reinterpret_cast<char*>(&forward_m_s2_)) + sizeof(down_m_s2_));
}

AccelerationFrd::~AccelerationFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.AccelerationFrd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccelerationFrd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AccelerationFrd::ArenaDtor(void* object) {
  AccelerationFrd* _this = reinterpret_cast< AccelerationFrd* >(object);
  (void)_this;
}
void AccelerationFrd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccelerationFrd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccelerationFrd& AccelerationFrd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccelerationFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void AccelerationFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.AccelerationFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_m_s2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_s2_) -
      reinterpret_cast<char*>(&forward_m_s2_)) + sizeof(down_m_s2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelerationFrd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          forward_m_s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          right_m_s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_m_s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccelerationFrd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.AccelerationFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_m_s2() <= 0 && this->forward_m_s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_forward_m_s2(), target);
  }

  // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_m_s2() <= 0 && this->right_m_s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_right_m_s2(), target);
  }

  // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_m_s2() <= 0 && this->down_m_s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m_s2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.AccelerationFrd)
  return target;
}

size_t AccelerationFrd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.AccelerationFrd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_m_s2() <= 0 && this->forward_m_s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_m_s2() <= 0 && this->right_m_s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_m_s2() <= 0 && this->down_m_s2() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccelerationFrd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.AccelerationFrd)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelerationFrd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccelerationFrd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.AccelerationFrd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.AccelerationFrd)
    MergeFrom(*source);
  }
}

void AccelerationFrd::MergeFrom(const AccelerationFrd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.AccelerationFrd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.forward_m_s2() <= 0 && from.forward_m_s2() >= 0)) {
    _internal_set_forward_m_s2(from._internal_forward_m_s2());
  }
  if (!(from.right_m_s2() <= 0 && from.right_m_s2() >= 0)) {
    _internal_set_right_m_s2(from._internal_right_m_s2());
  }
  if (!(from.down_m_s2() <= 0 && from.down_m_s2() >= 0)) {
    _internal_set_down_m_s2(from._internal_down_m_s2());
  }
}

void AccelerationFrd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.AccelerationFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelerationFrd::CopyFrom(const AccelerationFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.AccelerationFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelerationFrd::IsInitialized() const {
  return true;
}

void AccelerationFrd::InternalSwap(AccelerationFrd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccelerationFrd, down_m_s2_)
      + sizeof(AccelerationFrd::down_m_s2_)
      - PROTOBUF_FIELD_OFFSET(AccelerationFrd, forward_m_s2_)>(
          reinterpret_cast<char*>(&forward_m_s2_),
          reinterpret_cast<char*>(&other->forward_m_s2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelerationFrd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AngularVelocityFrd::InitAsDefaultInstance() {
}
class AngularVelocityFrd::_Internal {
 public:
};

AngularVelocityFrd::AngularVelocityFrd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
}
AngularVelocityFrd::AngularVelocityFrd(const AngularVelocityFrd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&forward_rad_s_, &from.forward_rad_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_rad_s_) -
    reinterpret_cast<char*>(&forward_rad_s_)) + sizeof(down_rad_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
}

void AngularVelocityFrd::SharedCtor() {
  ::memset(&forward_rad_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_rad_s_) -
      reinterpret_cast<char*>(&forward_rad_s_)) + sizeof(down_rad_s_));
}

AngularVelocityFrd::~AngularVelocityFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AngularVelocityFrd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AngularVelocityFrd::ArenaDtor(void* object) {
  AngularVelocityFrd* _this = reinterpret_cast< AngularVelocityFrd* >(object);
  (void)_this;
}
void AngularVelocityFrd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AngularVelocityFrd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AngularVelocityFrd& AngularVelocityFrd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AngularVelocityFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void AngularVelocityFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_rad_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_rad_s_) -
      reinterpret_cast<char*>(&forward_rad_s_)) + sizeof(down_rad_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AngularVelocityFrd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          forward_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          right_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AngularVelocityFrd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_rad_s() <= 0 && this->forward_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_forward_rad_s(), target);
  }

  // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_rad_s() <= 0 && this->right_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_right_rad_s(), target);
  }

  // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_rad_s() <= 0 && this->down_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_rad_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
  return target;
}

size_t AngularVelocityFrd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_rad_s() <= 0 && this->forward_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_rad_s() <= 0 && this->right_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_rad_s() <= 0 && this->down_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AngularVelocityFrd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
  GOOGLE_DCHECK_NE(&from, this);
  const AngularVelocityFrd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AngularVelocityFrd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
    MergeFrom(*source);
  }
}

void AngularVelocityFrd::MergeFrom(const AngularVelocityFrd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.forward_rad_s() <= 0 && from.forward_rad_s() >= 0)) {
    _internal_set_forward_rad_s(from._internal_forward_rad_s());
  }
  if (!(from.right_rad_s() <= 0 && from.right_rad_s() >= 0)) {
    _internal_set_right_rad_s(from._internal_right_rad_s());
  }
  if (!(from.down_rad_s() <= 0 && from.down_rad_s() >= 0)) {
    _internal_set_down_rad_s(from._internal_down_rad_s());
  }
}

void AngularVelocityFrd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngularVelocityFrd::CopyFrom(const AngularVelocityFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngularVelocityFrd::IsInitialized() const {
  return true;
}

void AngularVelocityFrd::InternalSwap(AngularVelocityFrd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, down_rad_s_)
      + sizeof(AngularVelocityFrd::down_rad_s_)
      - PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, forward_rad_s_)>(
          reinterpret_cast<char*>(&forward_rad_s_),
          reinterpret_cast<char*>(&other->forward_rad_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AngularVelocityFrd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MagneticFieldFrd::InitAsDefaultInstance() {
}
class MagneticFieldFrd::_Internal {
 public:
};

MagneticFieldFrd::MagneticFieldFrd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
}
MagneticFieldFrd::MagneticFieldFrd(const MagneticFieldFrd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&forward_gauss_, &from.forward_gauss_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_gauss_) -
    reinterpret_cast<char*>(&forward_gauss_)) + sizeof(down_gauss_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
}

void MagneticFieldFrd::SharedCtor() {
  ::memset(&forward_gauss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_gauss_) -
      reinterpret_cast<char*>(&forward_gauss_)) + sizeof(down_gauss_));
}

MagneticFieldFrd::~MagneticFieldFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MagneticFieldFrd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MagneticFieldFrd::ArenaDtor(void* object) {
  MagneticFieldFrd* _this = reinterpret_cast< MagneticFieldFrd* >(object);
  (void)_this;
}
void MagneticFieldFrd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MagneticFieldFrd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MagneticFieldFrd& MagneticFieldFrd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MagneticFieldFrd_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void MagneticFieldFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_gauss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_gauss_) -
      reinterpret_cast<char*>(&forward_gauss_)) + sizeof(down_gauss_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MagneticFieldFrd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          forward_gauss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          right_gauss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_gauss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MagneticFieldFrd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_gauss() <= 0 && this->forward_gauss() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_forward_gauss(), target);
  }

  // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_gauss() <= 0 && this->right_gauss() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_right_gauss(), target);
  }

  // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_gauss() <= 0 && this->down_gauss() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_gauss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
  return target;
}

size_t MagneticFieldFrd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_gauss() <= 0 && this->forward_gauss() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_gauss() <= 0 && this->right_gauss() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_gauss() <= 0 && this->down_gauss() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MagneticFieldFrd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
  GOOGLE_DCHECK_NE(&from, this);
  const MagneticFieldFrd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MagneticFieldFrd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
    MergeFrom(*source);
  }
}

void MagneticFieldFrd::MergeFrom(const MagneticFieldFrd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.forward_gauss() <= 0 && from.forward_gauss() >= 0)) {
    _internal_set_forward_gauss(from._internal_forward_gauss());
  }
  if (!(from.right_gauss() <= 0 && from.right_gauss() >= 0)) {
    _internal_set_right_gauss(from._internal_right_gauss());
  }
  if (!(from.down_gauss() <= 0 && from.down_gauss() >= 0)) {
    _internal_set_down_gauss(from._internal_down_gauss());
  }
}

void MagneticFieldFrd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagneticFieldFrd::CopyFrom(const MagneticFieldFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagneticFieldFrd::IsInitialized() const {
  return true;
}

void MagneticFieldFrd::InternalSwap(MagneticFieldFrd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, down_gauss_)
      + sizeof(MagneticFieldFrd::down_gauss_)
      - PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, forward_gauss_)>(
          reinterpret_cast<char*>(&forward_gauss_),
          reinterpret_cast<char*>(&other->forward_gauss_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MagneticFieldFrd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Imu::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry_server::_Imu_default_instance_._instance.get_mutable()->acceleration_frd_ = const_cast< ::mavsdk::rpc::telemetry_server::AccelerationFrd*>(
      ::mavsdk::rpc::telemetry_server::AccelerationFrd::internal_default_instance());
  ::mavsdk::rpc::telemetry_server::_Imu_default_instance_._instance.get_mutable()->angular_velocity_frd_ = const_cast< ::mavsdk::rpc::telemetry_server::AngularVelocityFrd*>(
      ::mavsdk::rpc::telemetry_server::AngularVelocityFrd::internal_default_instance());
  ::mavsdk::rpc::telemetry_server::_Imu_default_instance_._instance.get_mutable()->magnetic_field_frd_ = const_cast< ::mavsdk::rpc::telemetry_server::MagneticFieldFrd*>(
      ::mavsdk::rpc::telemetry_server::MagneticFieldFrd::internal_default_instance());
}
class Imu::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry_server::AccelerationFrd& acceleration_frd(const Imu* msg);
  static const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd& angular_velocity_frd(const Imu* msg);
  static const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd& magnetic_field_frd(const Imu* msg);
};

const ::mavsdk::rpc::telemetry_server::AccelerationFrd&
Imu::_Internal::acceleration_frd(const Imu* msg) {
  return *msg->acceleration_frd_;
}
const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd&
Imu::_Internal::angular_velocity_frd(const Imu* msg) {
  return *msg->angular_velocity_frd_;
}
const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd&
Imu::_Internal::magnetic_field_frd(const Imu* msg) {
  return *msg->magnetic_field_frd_;
}
Imu::Imu(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Imu)
}
Imu::Imu(const Imu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_acceleration_frd()) {
    acceleration_frd_ = new ::mavsdk::rpc::telemetry_server::AccelerationFrd(*from.acceleration_frd_);
  } else {
    acceleration_frd_ = nullptr;
  }
  if (from._internal_has_angular_velocity_frd()) {
    angular_velocity_frd_ = new ::mavsdk::rpc::telemetry_server::AngularVelocityFrd(*from.angular_velocity_frd_);
  } else {
    angular_velocity_frd_ = nullptr;
  }
  if (from._internal_has_magnetic_field_frd()) {
    magnetic_field_frd_ = new ::mavsdk::rpc::telemetry_server::MagneticFieldFrd(*from.magnetic_field_frd_);
  } else {
    magnetic_field_frd_ = nullptr;
  }
  ::memcpy(&timestamp_us_, &from.timestamp_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&temperature_degc_) -
    reinterpret_cast<char*>(&timestamp_us_)) + sizeof(temperature_degc_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.Imu)
}

void Imu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Imu_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  ::memset(&acceleration_frd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temperature_degc_) -
      reinterpret_cast<char*>(&acceleration_frd_)) + sizeof(temperature_degc_));
}

Imu::~Imu() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Imu)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Imu::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete acceleration_frd_;
  if (this != internal_default_instance()) delete angular_velocity_frd_;
  if (this != internal_default_instance()) delete magnetic_field_frd_;
}

void Imu::ArenaDtor(void* object) {
  Imu* _this = reinterpret_cast< Imu* >(object);
  (void)_this;
}
void Imu::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Imu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Imu& Imu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Imu_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Imu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && acceleration_frd_ != nullptr) {
    delete acceleration_frd_;
  }
  acceleration_frd_ = nullptr;
  if (GetArena() == nullptr && angular_velocity_frd_ != nullptr) {
    delete angular_velocity_frd_;
  }
  angular_velocity_frd_ = nullptr;
  if (GetArena() == nullptr && magnetic_field_frd_ != nullptr) {
    delete magnetic_field_frd_;
  }
  magnetic_field_frd_ = nullptr;
  ::memset(&timestamp_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temperature_degc_) -
      reinterpret_cast<char*>(&timestamp_us_)) + sizeof(temperature_degc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Imu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.AccelerationFrd acceleration_frd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration_frd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.AngularVelocityFrd angular_velocity_frd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity_frd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry_server.MagneticFieldFrd magnetic_field_frd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_magnetic_field_frd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          temperature_degc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Imu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Imu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.AccelerationFrd acceleration_frd = 1;
  if (this->has_acceleration_frd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::acceleration_frd(this), target, stream);
  }

  // .mavsdk.rpc.telemetry_server.AngularVelocityFrd angular_velocity_frd = 2;
  if (this->has_angular_velocity_frd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular_velocity_frd(this), target, stream);
  }

  // .mavsdk.rpc.telemetry_server.MagneticFieldFrd magnetic_field_frd = 3;
  if (this->has_magnetic_field_frd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::magnetic_field_frd(this), target, stream);
  }

  // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->temperature_degc() <= 0 && this->temperature_degc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_temperature_degc(), target);
  }

  // uint64 timestamp_us = 5;
  if (this->timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Imu)
  return target;
}

size_t Imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Imu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.AccelerationFrd acceleration_frd = 1;
  if (this->has_acceleration_frd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_frd_);
  }

  // .mavsdk.rpc.telemetry_server.AngularVelocityFrd angular_velocity_frd = 2;
  if (this->has_angular_velocity_frd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_frd_);
  }

  // .mavsdk.rpc.telemetry_server.MagneticFieldFrd magnetic_field_frd = 3;
  if (this->has_magnetic_field_frd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *magnetic_field_frd_);
  }

  // uint64 timestamp_us = 5;
  if (this->timestamp_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_us());
  }

  // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->temperature_degc() <= 0 && this->temperature_degc() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Imu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  const Imu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Imu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.Imu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.Imu)
    MergeFrom(*source);
  }
}

void Imu::MergeFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_acceleration_frd()) {
    _internal_mutable_acceleration_frd()->::mavsdk::rpc::telemetry_server::AccelerationFrd::MergeFrom(from._internal_acceleration_frd());
  }
  if (from.has_angular_velocity_frd()) {
    _internal_mutable_angular_velocity_frd()->::mavsdk::rpc::telemetry_server::AngularVelocityFrd::MergeFrom(from._internal_angular_velocity_frd());
  }
  if (from.has_magnetic_field_frd()) {
    _internal_mutable_magnetic_field_frd()->::mavsdk::rpc::telemetry_server::MagneticFieldFrd::MergeFrom(from._internal_magnetic_field_frd());
  }
  if (from.timestamp_us() != 0) {
    _internal_set_timestamp_us(from._internal_timestamp_us());
  }
  if (!(from.temperature_degc() <= 0 && from.temperature_degc() >= 0)) {
    _internal_set_temperature_degc(from._internal_temperature_degc());
  }
}

void Imu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imu::IsInitialized() const {
  return true;
}

void Imu::InternalSwap(Imu* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Imu, temperature_degc_)
      + sizeof(Imu::temperature_degc_)
      - PROTOBUF_FIELD_OFFSET(Imu, acceleration_frd_)>(
          reinterpret_cast<char*>(&acceleration_frd_),
          reinterpret_cast<char*>(&other->acceleration_frd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Imu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TelemetryServerResult::InitAsDefaultInstance() {
}
class TelemetryServerResult::_Internal {
 public:
};

TelemetryServerResult::TelemetryServerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.TelemetryServerResult)
}
TelemetryServerResult::TelemetryServerResult(const TelemetryServerResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_result_str(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.TelemetryServerResult)
}

void TelemetryServerResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

TelemetryServerResult::~TelemetryServerResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.TelemetryServerResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TelemetryServerResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TelemetryServerResult::ArenaDtor(void* object) {
  TelemetryServerResult* _this = reinterpret_cast< TelemetryServerResult* >(object);
  (void)_this;
}
void TelemetryServerResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryServerResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TelemetryServerResult& TelemetryServerResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TelemetryServerResult_telemetry_5fserver_2ftelemetry_5fserver_2eproto.base);
  return *internal_default_instance();
}


void TelemetryServerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.TelemetryServerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryServerResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry_server.TelemetryServerResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.telemetry_server.TelemetryServerResult.result_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TelemetryServerResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.TelemetryServerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.telemetry_server.TelemetryServerResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.TelemetryServerResult)
  return target;
}

size_t TelemetryServerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.TelemetryServerResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.telemetry_server.TelemetryServerResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryServerResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry_server.TelemetryServerResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryServerResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TelemetryServerResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry_server.TelemetryServerResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry_server.TelemetryServerResult)
    MergeFrom(*source);
  }
}

void TelemetryServerResult::MergeFrom(const TelemetryServerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.TelemetryServerResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {
    _internal_set_result_str(from._internal_result_str());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void TelemetryServerResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry_server.TelemetryServerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryServerResult::CopyFrom(const TelemetryServerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.TelemetryServerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryServerResult::IsInitialized() const {
  return true;
}

void TelemetryServerResult::InternalSwap(TelemetryServerResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryServerResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace telemetry_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishPositionRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishPositionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishPositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishHomeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishHomeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishHomeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishSysStatusRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishSysStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishSysStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishInAirRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishInAirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishInAirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishLandedStateRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishLandedStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishLandedStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishRawGpsRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishRawGpsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishRawGpsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishBatteryRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishBatteryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishBatteryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishRcStatusRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishRcStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishRcStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishStatusTextRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishStatusTextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishStatusTextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishOdometryRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishOdometryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishOdometryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishImuRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishImuRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishImuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishScaledImuRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishScaledImuRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishScaledImuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishRawImuRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishRawImuRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishRawImuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishPositionResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishPositionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishPositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishHomeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishHomeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishHomeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishSysStatusResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishSysStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishSysStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishRawGpsResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishRawGpsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishRawGpsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishBatteryResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishBatteryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishBatteryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishStatusTextResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishStatusTextResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishStatusTextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishOdometryResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishOdometryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishOdometryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishImuResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishImuResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishImuResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishScaledImuResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishScaledImuResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishScaledImuResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishRawImuResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishRawImuResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishRawImuResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::Position* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::Heading* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::Heading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::Heading >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::Quaternion* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::EulerAngle* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::EulerAngle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::EulerAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::AngularVelocityBody* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::AngularVelocityBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::AngularVelocityBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::GpsInfo* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::GpsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::GpsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::RawGps* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::RawGps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::RawGps >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::Battery* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::Battery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::RcStatus* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::RcStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::RcStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::StatusText* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::StatusText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::StatusText >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::ActuatorControlTarget* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::ActuatorControlTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::ActuatorControlTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::ActuatorOutputStatus* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::ActuatorOutputStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::ActuatorOutputStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::Covariance* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::Covariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::Covariance >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::VelocityBody* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::VelocityBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::VelocityBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PositionBody* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PositionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PositionBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::Odometry* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::Odometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::Odometry >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::DistanceSensor* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::DistanceSensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::DistanceSensor >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::ScaledPressure* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::ScaledPressure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::ScaledPressure >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PositionNed* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PositionNed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PositionNed >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::VelocityNed* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::VelocityNed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::VelocityNed >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::PositionVelocityNed* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::PositionVelocityNed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::PositionVelocityNed >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::GroundTruth* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::GroundTruth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::GroundTruth >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::FixedwingMetrics* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::FixedwingMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::FixedwingMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::AccelerationFrd* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::AccelerationFrd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::AccelerationFrd >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::AngularVelocityFrd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::AngularVelocityFrd >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::MagneticFieldFrd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::MagneticFieldFrd >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::Imu* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::Imu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::Imu >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry_server::TelemetryServerResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry_server::TelemetryServerResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry_server::TelemetryServerResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: geofence/geofence.proto
#ifndef GRPC_geofence_2fgeofence_2eproto__INCLUDED
#define GRPC_geofence_2fgeofence_2eproto__INCLUDED

#include "geofence/geofence.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace geofence {

// Enable setting a geofence.
class GeofenceService final {
public:
    static constexpr char const* service_full_name()
    {
        return "mavsdk.rpc.geofence.GeofenceService";
    }
    class StubInterface {
    public:
        virtual ~StubInterface() {}
        //
        // Upload a geofence.
        //
        // Polygons are uploaded to a drone. Once uploaded, the geofence will remain
        // on the drone even if a connection is lost.
        virtual ::grpc::Status UploadGeofence(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest& request,
            ::mavsdk::rpc::geofence::UploadGeofenceResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::geofence::UploadGeofenceResponse>>
        AsyncUploadGeofence(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::geofence::UploadGeofenceResponse>>(
                AsyncUploadGeofenceRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::geofence::UploadGeofenceResponse>>
        PrepareAsyncUploadGeofence(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::geofence::UploadGeofenceResponse>>(
                PrepareAsyncUploadGeofenceRaw(context, request, cq));
        }
        //
        // Clear all geofences saved on the vehicle.
        virtual ::grpc::Status ClearGeofence(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest& request,
            ::mavsdk::rpc::geofence::ClearGeofenceResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::geofence::ClearGeofenceResponse>>
        AsyncClearGeofence(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::geofence::ClearGeofenceResponse>>(
                AsyncClearGeofenceRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::geofence::ClearGeofenceResponse>>
        PrepareAsyncClearGeofence(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::geofence::ClearGeofenceResponse>>(
                PrepareAsyncClearGeofenceRaw(context, request, cq));
        }
        class experimental_async_interface {
        public:
            virtual ~experimental_async_interface() {}
            //
            // Upload a geofence.
            //
            // Polygons are uploaded to a drone. Once uploaded, the geofence will remain
            // on the drone even if a connection is lost.
            virtual void UploadGeofence(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::geofence::UploadGeofenceRequest* request,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void UploadGeofence(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse* response,
                std::function<void(::grpc::Status)>) = 0;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void UploadGeofence(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::geofence::UploadGeofenceRequest* request,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void UploadGeofence(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::geofence::UploadGeofenceRequest* request,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void UploadGeofence(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void UploadGeofence(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
            //
            // Clear all geofences saved on the vehicle.
            virtual void ClearGeofence(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::geofence::ClearGeofenceRequest* request,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void ClearGeofence(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse* response,
                std::function<void(::grpc::Status)>) = 0;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void ClearGeofence(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::geofence::ClearGeofenceRequest* request,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void ClearGeofence(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::geofence::ClearGeofenceRequest* request,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void ClearGeofence(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void ClearGeofence(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
        };
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        typedef class experimental_async_interface async_interface;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        async_interface* async() { return experimental_async(); }
#endif
        virtual class experimental_async_interface* experimental_async() { return nullptr; }

    private:
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::geofence::UploadGeofenceResponse>*
        AsyncUploadGeofenceRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::geofence::UploadGeofenceResponse>*
        PrepareAsyncUploadGeofenceRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::geofence::ClearGeofenceResponse>*
        AsyncClearGeofenceRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::geofence::ClearGeofenceResponse>*
        PrepareAsyncClearGeofenceRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
    };
    class Stub final : public StubInterface {
    public:
        Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel);
        ::grpc::Status UploadGeofence(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest& request,
            ::mavsdk::rpc::geofence::UploadGeofenceResponse* response) override;
        std::unique_ptr<
            ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::geofence::UploadGeofenceResponse>>
        AsyncUploadGeofence(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::geofence::UploadGeofenceResponse>>(
                AsyncUploadGeofenceRaw(context, request, cq));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::geofence::UploadGeofenceResponse>>
        PrepareAsyncUploadGeofence(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::geofence::UploadGeofenceResponse>>(
                PrepareAsyncUploadGeofenceRaw(context, request, cq));
        }
        ::grpc::Status ClearGeofence(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest& request,
            ::mavsdk::rpc::geofence::ClearGeofenceResponse* response) override;
        std::unique_ptr<
            ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::geofence::ClearGeofenceResponse>>
        AsyncClearGeofence(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::geofence::ClearGeofenceResponse>>(
                AsyncClearGeofenceRaw(context, request, cq));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::geofence::ClearGeofenceResponse>>
        PrepareAsyncClearGeofence(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::geofence::ClearGeofenceResponse>>(
                PrepareAsyncClearGeofenceRaw(context, request, cq));
        }
        class experimental_async final : public StubInterface::experimental_async_interface {
        public:
            void UploadGeofence(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::geofence::UploadGeofenceRequest* request,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse* response,
                std::function<void(::grpc::Status)>) override;
            void UploadGeofence(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse* response,
                std::function<void(::grpc::Status)>) override;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void UploadGeofence(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::geofence::UploadGeofenceRequest* request,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void UploadGeofence(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::geofence::UploadGeofenceRequest* request,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void UploadGeofence(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void UploadGeofence(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
            void ClearGeofence(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::geofence::ClearGeofenceRequest* request,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse* response,
                std::function<void(::grpc::Status)>) override;
            void ClearGeofence(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse* response,
                std::function<void(::grpc::Status)>) override;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void ClearGeofence(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::geofence::ClearGeofenceRequest* request,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void ClearGeofence(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::geofence::ClearGeofenceRequest* request,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void ClearGeofence(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void ClearGeofence(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
        private:
            friend class Stub;
            explicit experimental_async(Stub* stub) : stub_(stub) {}
            Stub* stub() { return stub_; }
            Stub* stub_;
        };
        class experimental_async_interface* experimental_async() override { return &async_stub_; }

    private:
        std::shared_ptr<::grpc::ChannelInterface> channel_;
        class experimental_async async_stub_ {
            this
        };
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::geofence::UploadGeofenceResponse>*
        AsyncUploadGeofenceRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::geofence::UploadGeofenceResponse>*
        PrepareAsyncUploadGeofenceRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::geofence::ClearGeofenceResponse>*
        AsyncClearGeofenceRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::geofence::ClearGeofenceResponse>*
        PrepareAsyncClearGeofenceRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest& request,
            ::grpc::CompletionQueue* cq) override;
        const ::grpc::internal::RpcMethod rpcmethod_UploadGeofence_;
        const ::grpc::internal::RpcMethod rpcmethod_ClearGeofence_;
    };
    static std::unique_ptr<Stub> NewStub(
        const std::shared_ptr<::grpc::ChannelInterface>& channel,
        const ::grpc::StubOptions& options = ::grpc::StubOptions());

    class Service : public ::grpc::Service {
    public:
        Service();
        virtual ~Service();
        //
        // Upload a geofence.
        //
        // Polygons are uploaded to a drone. Once uploaded, the geofence will remain
        // on the drone even if a connection is lost.
        virtual ::grpc::Status UploadGeofence(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest* request,
            ::mavsdk::rpc::geofence::UploadGeofenceResponse* response);
        //
        // Clear all geofences saved on the vehicle.
        virtual ::grpc::Status ClearGeofence(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest* request,
            ::mavsdk::rpc::geofence::ClearGeofenceResponse* response);
    };
    template<class BaseClass> class WithAsyncMethod_UploadGeofence : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_UploadGeofence() { ::grpc::Service::MarkMethodAsync(0); }
        ~WithAsyncMethod_UploadGeofence() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status UploadGeofence(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::UploadGeofenceResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestUploadGeofence(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::geofence::UploadGeofenceRequest* request,
            ::grpc::ServerAsyncResponseWriter<::mavsdk::rpc::geofence::UploadGeofenceResponse>*
                response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                0, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_ClearGeofence : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_ClearGeofence() { ::grpc::Service::MarkMethodAsync(1); }
        ~WithAsyncMethod_ClearGeofence() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status ClearGeofence(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::ClearGeofenceResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestClearGeofence(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::geofence::ClearGeofenceRequest* request,
            ::grpc::ServerAsyncResponseWriter<::mavsdk::rpc::geofence::ClearGeofenceResponse>*
                response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                1, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    typedef WithAsyncMethod_UploadGeofence<WithAsyncMethod_ClearGeofence<Service>> AsyncService;
    template<class BaseClass>
    class ExperimentalWithCallbackMethod_UploadGeofence : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithCallbackMethod_UploadGeofence()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodCallback(
                    0,
                    new ::grpc_impl::internal::CallbackUnaryHandler<
                        ::mavsdk::rpc::geofence::UploadGeofenceRequest,
                        ::mavsdk::rpc::geofence::UploadGeofenceResponse>(
                        [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                            ::grpc::CallbackServerContext*
#else
                            ::grpc::experimental::CallbackServerContext*
#endif
                                context,
                            const ::mavsdk::rpc::geofence::UploadGeofenceRequest* request,
                            ::mavsdk::rpc::geofence::UploadGeofenceResponse* response) {
                            return this->UploadGeofence(context, request, response);
                        }));
        }
        void SetMessageAllocatorFor_UploadGeofence(
            ::grpc::experimental::MessageAllocator<
                ::mavsdk::rpc::geofence::UploadGeofenceRequest,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse>* allocator)
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
#else
            ::grpc::internal::MethodHandler* const handler =
                ::grpc::Service::experimental().GetHandler(0);
#endif
            static_cast<::grpc_impl::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::geofence::UploadGeofenceRequest,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~ExperimentalWithCallbackMethod_UploadGeofence() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status UploadGeofence(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::UploadGeofenceResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* UploadGeofence(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::UploadGeofenceResponse* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* UploadGeofence(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::UploadGeofenceResponse* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithCallbackMethod_ClearGeofence : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithCallbackMethod_ClearGeofence()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodCallback(
                    1,
                    new ::grpc_impl::internal::CallbackUnaryHandler<
                        ::mavsdk::rpc::geofence::ClearGeofenceRequest,
                        ::mavsdk::rpc::geofence::ClearGeofenceResponse>(
                        [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                            ::grpc::CallbackServerContext*
#else
                            ::grpc::experimental::CallbackServerContext*
#endif
                                context,
                            const ::mavsdk::rpc::geofence::ClearGeofenceRequest* request,
                            ::mavsdk::rpc::geofence::ClearGeofenceResponse* response) {
                            return this->ClearGeofence(context, request, response);
                        }));
        }
        void SetMessageAllocatorFor_ClearGeofence(
            ::grpc::experimental::MessageAllocator<
                ::mavsdk::rpc::geofence::ClearGeofenceRequest,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse>* allocator)
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
#else
            ::grpc::internal::MethodHandler* const handler =
                ::grpc::Service::experimental().GetHandler(1);
#endif
            static_cast<::grpc_impl::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::geofence::ClearGeofenceRequest,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~ExperimentalWithCallbackMethod_ClearGeofence() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status ClearGeofence(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::ClearGeofenceResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* ClearGeofence(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::ClearGeofenceResponse* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* ClearGeofence(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::ClearGeofenceResponse* /*response*/)
#endif
        {
            return nullptr;
        }
    };
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef ExperimentalWithCallbackMethod_UploadGeofence<
        ExperimentalWithCallbackMethod_ClearGeofence<Service>>
        CallbackService;
#endif

    typedef ExperimentalWithCallbackMethod_UploadGeofence<
        ExperimentalWithCallbackMethod_ClearGeofence<Service>>
        ExperimentalCallbackService;
    template<class BaseClass> class WithGenericMethod_UploadGeofence : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_UploadGeofence() { ::grpc::Service::MarkMethodGeneric(0); }
        ~WithGenericMethod_UploadGeofence() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status UploadGeofence(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::UploadGeofenceResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_ClearGeofence : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_ClearGeofence() { ::grpc::Service::MarkMethodGeneric(1); }
        ~WithGenericMethod_ClearGeofence() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status ClearGeofence(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::ClearGeofenceResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithRawMethod_UploadGeofence : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_UploadGeofence() { ::grpc::Service::MarkMethodRaw(0); }
        ~WithRawMethod_UploadGeofence() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status UploadGeofence(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::UploadGeofenceResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestUploadGeofence(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                0, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_ClearGeofence : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_ClearGeofence() { ::grpc::Service::MarkMethodRaw(1); }
        ~WithRawMethod_ClearGeofence() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status ClearGeofence(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::ClearGeofenceResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestClearGeofence(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                1, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass>
    class ExperimentalWithRawCallbackMethod_UploadGeofence : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithRawCallbackMethod_UploadGeofence()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodRawCallback(
                    0,
                    new ::grpc_impl::internal::
                        CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                            [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                                ::grpc::CallbackServerContext*
#else
                                ::grpc::experimental::CallbackServerContext*
#endif
                                    context,
                                const ::grpc::ByteBuffer* request,
                                ::grpc::ByteBuffer* response) {
                                return this->UploadGeofence(context, request, response);
                            }));
        }
        ~ExperimentalWithRawCallbackMethod_UploadGeofence() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status UploadGeofence(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::UploadGeofenceResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* UploadGeofence(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* UploadGeofence(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithRawCallbackMethod_ClearGeofence : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithRawCallbackMethod_ClearGeofence()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodRawCallback(
                    1,
                    new ::grpc_impl::internal::
                        CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                            [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                                ::grpc::CallbackServerContext*
#else
                                ::grpc::experimental::CallbackServerContext*
#endif
                                    context,
                                const ::grpc::ByteBuffer* request,
                                ::grpc::ByteBuffer* response) {
                                return this->ClearGeofence(context, request, response);
                            }));
        }
        ~ExperimentalWithRawCallbackMethod_ClearGeofence() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status ClearGeofence(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::ClearGeofenceResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* ClearGeofence(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* ClearGeofence(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithStreamedUnaryMethod_UploadGeofence : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_UploadGeofence()
        {
            ::grpc::Service::MarkMethodStreamed(
                0,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::geofence::UploadGeofenceRequest,
                    ::mavsdk::rpc::geofence::UploadGeofenceResponse>(
                    [this](
                        ::grpc_impl::ServerContext* context,
                        ::grpc_impl::ServerUnaryStreamer<
                            ::mavsdk::rpc::geofence::UploadGeofenceRequest,
                            ::mavsdk::rpc::geofence::UploadGeofenceResponse>* streamer) {
                        return this->StreamedUploadGeofence(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_UploadGeofence() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status UploadGeofence(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::UploadGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::UploadGeofenceResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedUploadGeofence(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::geofence::UploadGeofenceRequest,
                ::mavsdk::rpc::geofence::UploadGeofenceResponse>* server_unary_streamer) = 0;
    };
    template<class BaseClass> class WithStreamedUnaryMethod_ClearGeofence : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_ClearGeofence()
        {
            ::grpc::Service::MarkMethodStreamed(
                1,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::geofence::ClearGeofenceRequest,
                    ::mavsdk::rpc::geofence::ClearGeofenceResponse>(
                    [this](
                        ::grpc_impl::ServerContext* context,
                        ::grpc_impl::ServerUnaryStreamer<
                            ::mavsdk::rpc::geofence::ClearGeofenceRequest,
                            ::mavsdk::rpc::geofence::ClearGeofenceResponse>* streamer) {
                        return this->StreamedClearGeofence(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_ClearGeofence() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status ClearGeofence(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::geofence::ClearGeofenceRequest* /*request*/,
            ::mavsdk::rpc::geofence::ClearGeofenceResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedClearGeofence(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::geofence::ClearGeofenceRequest,
                ::mavsdk::rpc::geofence::ClearGeofenceResponse>* server_unary_streamer) = 0;
    };
    typedef WithStreamedUnaryMethod_UploadGeofence<WithStreamedUnaryMethod_ClearGeofence<Service>>
        StreamedUnaryService;
    typedef Service SplitStreamedService;
    typedef WithStreamedUnaryMethod_UploadGeofence<WithStreamedUnaryMethod_ClearGeofence<Service>>
        StreamedService;
};

} // namespace geofence
} // namespace rpc
} // namespace mavsdk

#endif // GRPC_geofence_2fgeofence_2eproto__INCLUDED

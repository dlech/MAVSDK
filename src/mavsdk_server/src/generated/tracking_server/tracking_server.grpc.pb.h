// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tracking_server/tracking_server.proto
#ifndef GRPC_tracking_5fserver_2ftracking_5fserver_2eproto__INCLUDED
#define GRPC_tracking_5fserver_2ftracking_5fserver_2eproto__INCLUDED

#include "tracking_server/tracking_server.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace tracking_server {

// API for an onboard image tracking software.
class TrackingServerService final {
public:
    static constexpr char const* service_full_name()
    {
        return "mavsdk.rpc.tracking_server.TrackingServerService";
    }
    class StubInterface {
    public:
        virtual ~StubInterface() {}
        // Set/update the current point tracking status.
        virtual ::grpc::Status SetTrackingPointStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest& request,
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>>
        AsyncSetTrackingPointStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>>(
                AsyncSetTrackingPointStatusRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>>
        PrepareAsyncSetTrackingPointStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>>(
                PrepareAsyncSetTrackingPointStatusRaw(context, request, cq));
        }
        // Set/update the current rectangle tracking status.
        virtual ::grpc::Status SetTrackingRectangleStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest& request,
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>>
        AsyncSetTrackingRectangleStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>>(
                AsyncSetTrackingRectangleStatusRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>>
        PrepareAsyncSetTrackingRectangleStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>>(
                PrepareAsyncSetTrackingRectangleStatusRaw(context, request, cq));
        }
        // Set the current tracking status to off.
        virtual ::grpc::Status SetTrackingOffStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest& request,
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>>
        AsyncSetTrackingOffStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>>(
                AsyncSetTrackingOffStatusRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>>
        PrepareAsyncSetTrackingOffStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>>(
                PrepareAsyncSetTrackingOffStatusRaw(context, request, cq));
        }
        // Subscribe to incoming tracking point command.
        std::unique_ptr<::grpc::ClientReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>>
        SubscribeTrackingPointCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest& request)
        {
            return std::unique_ptr<::grpc::ClientReaderInterface<
                ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>>(
                SubscribeTrackingPointCommandRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>>
        AsyncSubscribeTrackingPointCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>>(
                AsyncSubscribeTrackingPointCommandRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>>
        PrepareAsyncSubscribeTrackingPointCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>>(
                PrepareAsyncSubscribeTrackingPointCommandRaw(context, request, cq));
        }
        // Subscribe to incoming tracking rectangle command.
        std::unique_ptr<::grpc::ClientReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>>
        SubscribeTrackingRectangleCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest& request)
        {
            return std::unique_ptr<::grpc::ClientReaderInterface<
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>>(
                SubscribeTrackingRectangleCommandRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>>
        AsyncSubscribeTrackingRectangleCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>>(
                AsyncSubscribeTrackingRectangleCommandRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>>
        PrepareAsyncSubscribeTrackingRectangleCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>>(
                PrepareAsyncSubscribeTrackingRectangleCommandRaw(context, request, cq));
        }
        // Subscribe to incoming tracking off command.
        std::unique_ptr<::grpc::ClientReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>>
        SubscribeTrackingOffCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest& request)
        {
            return std::unique_ptr<::grpc::ClientReaderInterface<
                ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>>(
                SubscribeTrackingOffCommandRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>>
        AsyncSubscribeTrackingOffCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>>(
                AsyncSubscribeTrackingOffCommandRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>>
        PrepareAsyncSubscribeTrackingOffCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>>(
                PrepareAsyncSubscribeTrackingOffCommandRaw(context, request, cq));
        }
        // Respond to an incoming tracking point command.
        virtual ::grpc::Status RespondTrackingPointCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest& request,
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>>
        AsyncRespondTrackingPointCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>>(
                AsyncRespondTrackingPointCommandRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>>
        PrepareAsyncRespondTrackingPointCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>>(
                PrepareAsyncRespondTrackingPointCommandRaw(context, request, cq));
        }
        // Respond to an incoming tracking rectangle command.
        virtual ::grpc::Status RespondTrackingRectangleCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest& request,
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>>
        AsyncRespondTrackingRectangleCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>>(
                AsyncRespondTrackingRectangleCommandRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>>
        PrepareAsyncRespondTrackingRectangleCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>>(
                PrepareAsyncRespondTrackingRectangleCommandRaw(context, request, cq));
        }
        // Respond to an incoming tracking off command.
        virtual ::grpc::Status RespondTrackingOffCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest& request,
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>>
        AsyncRespondTrackingOffCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>>(
                AsyncRespondTrackingOffCommandRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>>
        PrepareAsyncRespondTrackingOffCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>>(
                PrepareAsyncRespondTrackingOffCommandRaw(context, request, cq));
        }
        class experimental_async_interface {
        public:
            virtual ~experimental_async_interface() {}
            // Set/update the current point tracking status.
            virtual void SetTrackingPointStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void SetTrackingPointStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response,
                std::function<void(::grpc::Status)>) = 0;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void SetTrackingPointStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void SetTrackingPointStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void SetTrackingPointStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void SetTrackingPointStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
            // Set/update the current rectangle tracking status.
            virtual void SetTrackingRectangleStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void SetTrackingRectangleStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response,
                std::function<void(::grpc::Status)>) = 0;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void SetTrackingRectangleStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void SetTrackingRectangleStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void SetTrackingRectangleStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void SetTrackingRectangleStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
            // Set the current tracking status to off.
            virtual void SetTrackingOffStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void SetTrackingOffStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response,
                std::function<void(::grpc::Status)>) = 0;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void SetTrackingOffStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void SetTrackingOffStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void SetTrackingOffStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void SetTrackingOffStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
// Subscribe to incoming tracking point command.
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void SubscribeTrackingPointCommand(
                ::grpc::ClientContext* context,
                ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* request,
                ::grpc::ClientReadReactor<
                    ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>* reactor) = 0;
#else
            virtual void SubscribeTrackingPointCommand(
                ::grpc::ClientContext* context,
                ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* request,
                ::grpc::experimental::ClientReadReactor<
                    ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>* reactor) = 0;
#endif
// Subscribe to incoming tracking rectangle command.
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void SubscribeTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest* request,
                ::grpc::ClientReadReactor<
                    ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>* reactor) = 0;
#else
            virtual void SubscribeTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest* request,
                ::grpc::experimental::ClientReadReactor<
                    ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>* reactor) = 0;
#endif
// Subscribe to incoming tracking off command.
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void SubscribeTrackingOffCommand(
                ::grpc::ClientContext* context,
                ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* request,
                ::grpc::ClientReadReactor<
                    ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>* reactor) = 0;
#else
            virtual void SubscribeTrackingOffCommand(
                ::grpc::ClientContext* context,
                ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* request,
                ::grpc::experimental::ClientReadReactor<
                    ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>* reactor) = 0;
#endif
            // Respond to an incoming tracking point command.
            virtual void RespondTrackingPointCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondTrackingPointCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response,
                std::function<void(::grpc::Status)>) = 0;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void RespondTrackingPointCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void RespondTrackingPointCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void RespondTrackingPointCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void RespondTrackingPointCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
            // Respond to an incoming tracking rectangle command.
            virtual void RespondTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest*
                    request,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response,
                std::function<void(::grpc::Status)>) = 0;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void RespondTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest*
                    request,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void RespondTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest*
                    request,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void RespondTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void RespondTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
            // Respond to an incoming tracking off command.
            virtual void RespondTrackingOffCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondTrackingOffCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response,
                std::function<void(::grpc::Status)>) = 0;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void RespondTrackingOffCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void RespondTrackingOffCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            virtual void RespondTrackingOffCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
#else
            virtual void RespondTrackingOffCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
#endif
        };
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        typedef class experimental_async_interface async_interface;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        async_interface* async() { return experimental_async(); }
#endif
        virtual class experimental_async_interface* experimental_async() { return nullptr; }

    private:
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>*
        AsyncSetTrackingPointStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>*
        PrepareAsyncSetTrackingPointStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>*
        AsyncSetTrackingRectangleStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>*
        PrepareAsyncSetTrackingRectangleStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>*
        AsyncSetTrackingOffStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>*
        PrepareAsyncSetTrackingOffStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>*
        SubscribeTrackingPointCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest&
                request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>*
        AsyncSubscribeTrackingPointCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>*
        PrepareAsyncSubscribeTrackingPointCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>*
        SubscribeTrackingRectangleCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest&
                request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>*
        AsyncSubscribeTrackingRectangleCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>*
        PrepareAsyncSubscribeTrackingRectangleCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>*
        SubscribeTrackingOffCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>*
        AsyncSubscribeTrackingOffCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>*
        PrepareAsyncSubscribeTrackingOffCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>*
        AsyncRespondTrackingPointCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>*
        PrepareAsyncRespondTrackingPointCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>*
        AsyncRespondTrackingRectangleCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>*
        PrepareAsyncRespondTrackingRectangleCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>*
        AsyncRespondTrackingOffCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>*
        PrepareAsyncRespondTrackingOffCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
    };
    class Stub final : public StubInterface {
    public:
        Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel);
        ::grpc::Status SetTrackingPointStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest& request,
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>>
        AsyncSetTrackingPointStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>>(
                AsyncSetTrackingPointStatusRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>>
        PrepareAsyncSetTrackingPointStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>>(
                PrepareAsyncSetTrackingPointStatusRaw(context, request, cq));
        }
        ::grpc::Status SetTrackingRectangleStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest& request,
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>>
        AsyncSetTrackingRectangleStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>>(
                AsyncSetTrackingRectangleStatusRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>>
        PrepareAsyncSetTrackingRectangleStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>>(
                PrepareAsyncSetTrackingRectangleStatusRaw(context, request, cq));
        }
        ::grpc::Status SetTrackingOffStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest& request,
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>>
        AsyncSetTrackingOffStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>>(
                AsyncSetTrackingOffStatusRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>>
        PrepareAsyncSetTrackingOffStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>>(
                PrepareAsyncSetTrackingOffStatusRaw(context, request, cq));
        }
        std::unique_ptr<
            ::grpc::ClientReader<::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>>
        SubscribeTrackingPointCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>>(
                SubscribeTrackingPointCommandRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>>
        AsyncSubscribeTrackingPointCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReader<
                ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>>(
                AsyncSubscribeTrackingPointCommandRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>>
        PrepareAsyncSubscribeTrackingPointCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReader<
                ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>>(
                PrepareAsyncSubscribeTrackingPointCommandRaw(context, request, cq));
        }
        std::unique_ptr<
            ::grpc::ClientReader<::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>>
        SubscribeTrackingRectangleCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest& request)
        {
            return std::unique_ptr<::grpc::ClientReader<
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>>(
                SubscribeTrackingRectangleCommandRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<
            ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>>
        AsyncSubscribeTrackingRectangleCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReader<
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>>(
                AsyncSubscribeTrackingRectangleCommandRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<
            ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>>
        PrepareAsyncSubscribeTrackingRectangleCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReader<
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>>(
                PrepareAsyncSubscribeTrackingRectangleCommandRaw(context, request, cq));
        }
        std::unique_ptr<
            ::grpc::ClientReader<::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>>
        SubscribeTrackingOffCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>>(
                SubscribeTrackingOffCommandRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>>
        AsyncSubscribeTrackingOffCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReader<
                ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>>(
                AsyncSubscribeTrackingOffCommandRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>>
        PrepareAsyncSubscribeTrackingOffCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReader<
                ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>>(
                PrepareAsyncSubscribeTrackingOffCommandRaw(context, request, cq));
        }
        ::grpc::Status RespondTrackingPointCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest& request,
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>>
        AsyncRespondTrackingPointCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>>(
                AsyncRespondTrackingPointCommandRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>>
        PrepareAsyncRespondTrackingPointCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>>(
                PrepareAsyncRespondTrackingPointCommandRaw(context, request, cq));
        }
        ::grpc::Status RespondTrackingRectangleCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest& request,
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response)
            override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>>
        AsyncRespondTrackingRectangleCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>>(
                AsyncRespondTrackingRectangleCommandRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>>
        PrepareAsyncRespondTrackingRectangleCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>>(
                PrepareAsyncRespondTrackingRectangleCommandRaw(context, request, cq));
        }
        ::grpc::Status RespondTrackingOffCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest& request,
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>>
        AsyncRespondTrackingOffCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>>(
                AsyncRespondTrackingOffCommandRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>>
        PrepareAsyncRespondTrackingOffCommand(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>>(
                PrepareAsyncRespondTrackingOffCommandRaw(context, request, cq));
        }
        class experimental_async final : public StubInterface::experimental_async_interface {
        public:
            void SetTrackingPointStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response,
                std::function<void(::grpc::Status)>) override;
            void SetTrackingPointStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response,
                std::function<void(::grpc::Status)>) override;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void SetTrackingPointStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void SetTrackingPointStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void SetTrackingPointStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void SetTrackingPointStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
            void SetTrackingRectangleStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response,
                std::function<void(::grpc::Status)>) override;
            void SetTrackingRectangleStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response,
                std::function<void(::grpc::Status)>) override;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void SetTrackingRectangleStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void SetTrackingRectangleStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void SetTrackingRectangleStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void SetTrackingRectangleStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
            void SetTrackingOffStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response,
                std::function<void(::grpc::Status)>) override;
            void SetTrackingOffStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response,
                std::function<void(::grpc::Status)>) override;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void SetTrackingOffStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void SetTrackingOffStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* request,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void SetTrackingOffStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void SetTrackingOffStatus(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void SubscribeTrackingPointCommand(
                ::grpc::ClientContext* context,
                ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* request,
                ::grpc::ClientReadReactor<
                    ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>* reactor)
                override;
#else
            void SubscribeTrackingPointCommand(
                ::grpc::ClientContext* context,
                ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* request,
                ::grpc::experimental::ClientReadReactor<
                    ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>* reactor)
                override;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void SubscribeTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest* request,
                ::grpc::ClientReadReactor<
                    ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>* reactor)
                override;
#else
            void SubscribeTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest* request,
                ::grpc::experimental::ClientReadReactor<
                    ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>* reactor)
                override;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void SubscribeTrackingOffCommand(
                ::grpc::ClientContext* context,
                ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* request,
                ::grpc::ClientReadReactor<
                    ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>* reactor) override;
#else
            void SubscribeTrackingOffCommand(
                ::grpc::ClientContext* context,
                ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* request,
                ::grpc::experimental::ClientReadReactor<
                    ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>* reactor) override;
#endif
            void RespondTrackingPointCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondTrackingPointCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response,
                std::function<void(::grpc::Status)>) override;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void RespondTrackingPointCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void RespondTrackingPointCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void RespondTrackingPointCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void RespondTrackingPointCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
            void RespondTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest*
                    request,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response,
                std::function<void(::grpc::Status)>) override;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void RespondTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest*
                    request,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void RespondTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest*
                    request,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void RespondTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void RespondTrackingRectangleCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
            void RespondTrackingOffCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondTrackingOffCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response,
                std::function<void(::grpc::Status)>) override;
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void RespondTrackingOffCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void RespondTrackingOffCommand(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            void RespondTrackingOffCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
#else
            void RespondTrackingOffCommand(
                ::grpc::ClientContext* context,
                const ::grpc::ByteBuffer* request,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response,
                ::grpc::experimental::ClientUnaryReactor* reactor) override;
#endif
        private:
            friend class Stub;
            explicit experimental_async(Stub* stub) : stub_(stub) {}
            Stub* stub() { return stub_; }
            Stub* stub_;
        };
        class experimental_async_interface* experimental_async() override { return &async_stub_; }

    private:
        std::shared_ptr<::grpc::ChannelInterface> channel_;
        class experimental_async async_stub_ {
            this
        };
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>*
        AsyncSetTrackingPointStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>*
        PrepareAsyncSetTrackingPointStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>*
        AsyncSetTrackingRectangleStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>*
        PrepareAsyncSetTrackingRectangleStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>*
        AsyncSetTrackingOffStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>*
        PrepareAsyncSetTrackingOffStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>*
        SubscribeTrackingPointCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest& request)
            override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>*
        AsyncSubscribeTrackingPointCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>*
        PrepareAsyncSubscribeTrackingPointCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>*
        SubscribeTrackingRectangleCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest& request)
            override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>*
        AsyncSubscribeTrackingRectangleCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>*
        PrepareAsyncSubscribeTrackingRectangleCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>*
        SubscribeTrackingOffCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest& request)
            override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>*
        AsyncSubscribeTrackingOffCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>*
        PrepareAsyncSubscribeTrackingOffCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>*
        AsyncRespondTrackingPointCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>*
        PrepareAsyncRespondTrackingPointCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>*
        AsyncRespondTrackingRectangleCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>*
        PrepareAsyncRespondTrackingRectangleCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>*
        AsyncRespondTrackingOffCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>*
        PrepareAsyncRespondTrackingOffCommandRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest& request,
            ::grpc::CompletionQueue* cq) override;
        const ::grpc::internal::RpcMethod rpcmethod_SetTrackingPointStatus_;
        const ::grpc::internal::RpcMethod rpcmethod_SetTrackingRectangleStatus_;
        const ::grpc::internal::RpcMethod rpcmethod_SetTrackingOffStatus_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeTrackingPointCommand_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeTrackingRectangleCommand_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeTrackingOffCommand_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondTrackingPointCommand_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondTrackingRectangleCommand_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondTrackingOffCommand_;
    };
    static std::unique_ptr<Stub> NewStub(
        const std::shared_ptr<::grpc::ChannelInterface>& channel,
        const ::grpc::StubOptions& options = ::grpc::StubOptions());

    class Service : public ::grpc::Service {
    public:
        Service();
        virtual ~Service();
        // Set/update the current point tracking status.
        virtual ::grpc::Status SetTrackingPointStatus(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* request,
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* response);
        // Set/update the current rectangle tracking status.
        virtual ::grpc::Status SetTrackingRectangleStatus(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* request,
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* response);
        // Set the current tracking status to off.
        virtual ::grpc::Status SetTrackingOffStatus(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* request,
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* response);
        // Subscribe to incoming tracking point command.
        virtual ::grpc::Status SubscribeTrackingPointCommand(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>*
                writer);
        // Subscribe to incoming tracking rectangle command.
        virtual ::grpc::Status SubscribeTrackingRectangleCommand(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>*
                writer);
        // Subscribe to incoming tracking off command.
        virtual ::grpc::Status SubscribeTrackingOffCommand(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>*
                writer);
        // Respond to an incoming tracking point command.
        virtual ::grpc::Status RespondTrackingPointCommand(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* request,
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* response);
        // Respond to an incoming tracking rectangle command.
        virtual ::grpc::Status RespondTrackingRectangleCommand(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest* request,
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* response);
        // Respond to an incoming tracking off command.
        virtual ::grpc::Status RespondTrackingOffCommand(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* request,
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* response);
    };
    template<class BaseClass> class WithAsyncMethod_SetTrackingPointStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SetTrackingPointStatus() { ::grpc::Service::MarkMethodAsync(0); }
        ~WithAsyncMethod_SetTrackingPointStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingPointStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSetTrackingPointStatus(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                0, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SetTrackingRectangleStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SetTrackingRectangleStatus() { ::grpc::Service::MarkMethodAsync(1); }
        ~WithAsyncMethod_SetTrackingRectangleStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingRectangleStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSetTrackingRectangleStatus(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                1, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SetTrackingOffStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SetTrackingOffStatus() { ::grpc::Service::MarkMethodAsync(2); }
        ~WithAsyncMethod_SetTrackingOffStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingOffStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSetTrackingOffStatus(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                2, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass>
    class WithAsyncMethod_SubscribeTrackingPointCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeTrackingPointCommand() { ::grpc::Service::MarkMethodAsync(3); }
        ~WithAsyncMethod_SubscribeTrackingPointCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingPointCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeTrackingPointCommand(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>*
                writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                3, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass>
    class WithAsyncMethod_SubscribeTrackingRectangleCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeTrackingRectangleCommand() { ::grpc::Service::MarkMethodAsync(4); }
        ~WithAsyncMethod_SubscribeTrackingRectangleCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingRectangleCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                SubscribeTrackingRectangleCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeTrackingRectangleCommand(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest* request,
            ::grpc::ServerAsyncWriter<
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                4, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SubscribeTrackingOffCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeTrackingOffCommand() { ::grpc::Service::MarkMethodAsync(5); }
        ~WithAsyncMethod_SubscribeTrackingOffCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingOffCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeTrackingOffCommand(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>*
                writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                5, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondTrackingPointCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondTrackingPointCommand() { ::grpc::Service::MarkMethodAsync(6); }
        ~WithAsyncMethod_RespondTrackingPointCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingPointCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondTrackingPointCommand(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                6, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass>
    class WithAsyncMethod_RespondTrackingRectangleCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondTrackingRectangleCommand() { ::grpc::Service::MarkMethodAsync(7); }
        ~WithAsyncMethod_RespondTrackingRectangleCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingRectangleCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                RespondTrackingRectangleCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondTrackingRectangleCommand(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                7, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondTrackingOffCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondTrackingOffCommand() { ::grpc::Service::MarkMethodAsync(8); }
        ~WithAsyncMethod_RespondTrackingOffCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingOffCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondTrackingOffCommand(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                8, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    typedef WithAsyncMethod_SetTrackingPointStatus<WithAsyncMethod_SetTrackingRectangleStatus<
        WithAsyncMethod_SetTrackingOffStatus<WithAsyncMethod_SubscribeTrackingPointCommand<
            WithAsyncMethod_SubscribeTrackingRectangleCommand<
                WithAsyncMethod_SubscribeTrackingOffCommand<
                    WithAsyncMethod_RespondTrackingPointCommand<
                        WithAsyncMethod_RespondTrackingRectangleCommand<
                            WithAsyncMethod_RespondTrackingOffCommand<Service>>>>>>>>>
        AsyncService;
    template<class BaseClass>
    class ExperimentalWithCallbackMethod_SetTrackingPointStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithCallbackMethod_SetTrackingPointStatus()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodCallback(
                    0,
                    new ::grpc_impl::internal::CallbackUnaryHandler<
                        ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest,
                        ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>(
                        [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                            ::grpc::CallbackServerContext*
#else
                            ::grpc::experimental::CallbackServerContext*
#endif
                                context,
                            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest*
                                request,
                            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse*
                                response) {
                            return this->SetTrackingPointStatus(context, request, response);
                        }));
        }
        void SetMessageAllocatorFor_SetTrackingPointStatus(
            ::grpc::experimental::MessageAllocator<
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>* allocator)
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
#else
            ::grpc::internal::MethodHandler* const handler =
                ::grpc::Service::experimental().GetHandler(0);
#endif
            static_cast<::grpc_impl::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~ExperimentalWithCallbackMethod_SetTrackingPointStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingPointStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* SetTrackingPointStatus(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* SetTrackingPointStatus(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithCallbackMethod_SetTrackingRectangleStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithCallbackMethod_SetTrackingRectangleStatus()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodCallback(
                    1,
                    new ::grpc_impl::internal::CallbackUnaryHandler<
                        ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest,
                        ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>(
                        [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                            ::grpc::CallbackServerContext*
#else
                            ::grpc::experimental::CallbackServerContext*
#endif
                                context,
                            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest*
                                request,
                            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse*
                                response) {
                            return this->SetTrackingRectangleStatus(context, request, response);
                        }));
        }
        void SetMessageAllocatorFor_SetTrackingRectangleStatus(
            ::grpc::experimental::MessageAllocator<
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>* allocator)
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
#else
            ::grpc::internal::MethodHandler* const handler =
                ::grpc::Service::experimental().GetHandler(1);
#endif
            static_cast<::grpc_impl::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~ExperimentalWithCallbackMethod_SetTrackingRectangleStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingRectangleStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* SetTrackingRectangleStatus(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* SetTrackingRectangleStatus(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithCallbackMethod_SetTrackingOffStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithCallbackMethod_SetTrackingOffStatus()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodCallback(
                    2,
                    new ::grpc_impl::internal::CallbackUnaryHandler<
                        ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest,
                        ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>(
                        [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                            ::grpc::CallbackServerContext*
#else
                            ::grpc::experimental::CallbackServerContext*
#endif
                                context,
                            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest*
                                request,
                            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse*
                                response) {
                            return this->SetTrackingOffStatus(context, request, response);
                        }));
        }
        void SetMessageAllocatorFor_SetTrackingOffStatus(
            ::grpc::experimental::MessageAllocator<
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>* allocator)
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
#else
            ::grpc::internal::MethodHandler* const handler =
                ::grpc::Service::experimental().GetHandler(2);
#endif
            static_cast<::grpc_impl::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~ExperimentalWithCallbackMethod_SetTrackingOffStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingOffStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* SetTrackingOffStatus(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* SetTrackingOffStatus(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithCallbackMethod_SubscribeTrackingPointCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithCallbackMethod_SubscribeTrackingPointCommand()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodCallback(
                    3,
                    new ::grpc_impl::internal::CallbackServerStreamingHandler<
                        ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest,
                        ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>(
                        [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                            ::grpc::CallbackServerContext*
#else
                            ::grpc::experimental::CallbackServerContext*
#endif
                                context,
                            const ::mavsdk::rpc::tracking_server::
                                SubscribeTrackingPointCommandRequest* request) {
                            return this->SubscribeTrackingPointCommand(context, request);
                        }));
        }
        ~ExperimentalWithCallbackMethod_SubscribeTrackingPointCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingPointCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerWriteReactor<
            ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>*
        SubscribeTrackingPointCommand(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* /*request*/)
#else
        virtual ::grpc::experimental::ServerWriteReactor<
            ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>*
        SubscribeTrackingPointCommand(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* /*request*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithCallbackMethod_SubscribeTrackingRectangleCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithCallbackMethod_SubscribeTrackingRectangleCommand()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodCallback(
                    4,
                    new ::grpc_impl::internal::CallbackServerStreamingHandler<
                        ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest,
                        ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>(
                        [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                            ::grpc::CallbackServerContext*
#else
                            ::grpc::experimental::CallbackServerContext*
#endif
                                context,
                            const ::mavsdk::rpc::tracking_server::
                                SubscribeTrackingRectangleCommandRequest* request) {
                            return this->SubscribeTrackingRectangleCommand(context, request);
                        }));
        }
        ~ExperimentalWithCallbackMethod_SubscribeTrackingRectangleCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingRectangleCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                SubscribeTrackingRectangleCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerWriteReactor<
            ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>*
        SubscribeTrackingRectangleCommand(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                SubscribeTrackingRectangleCommandRequest* /*request*/)
#else
        virtual ::grpc::experimental::ServerWriteReactor<
            ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>*
        SubscribeTrackingRectangleCommand(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                SubscribeTrackingRectangleCommandRequest* /*request*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithCallbackMethod_SubscribeTrackingOffCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithCallbackMethod_SubscribeTrackingOffCommand()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodCallback(
                    5,
                    new ::grpc_impl::internal::CallbackServerStreamingHandler<
                        ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest,
                        ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>(
                        [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                            ::grpc::CallbackServerContext*
#else
                            ::grpc::experimental::CallbackServerContext*
#endif
                                context,
                            const ::mavsdk::rpc::tracking_server::
                                SubscribeTrackingOffCommandRequest* request) {
                            return this->SubscribeTrackingOffCommand(context, request);
                        }));
        }
        ~ExperimentalWithCallbackMethod_SubscribeTrackingOffCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingOffCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerWriteReactor<
            ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>*
        SubscribeTrackingOffCommand(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* /*request*/)
#else
        virtual ::grpc::experimental::ServerWriteReactor<
            ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>*
        SubscribeTrackingOffCommand(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* /*request*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithCallbackMethod_RespondTrackingPointCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithCallbackMethod_RespondTrackingPointCommand()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodCallback(
                    6,
                    new ::grpc_impl::internal::CallbackUnaryHandler<
                        ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest,
                        ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>(
                        [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                            ::grpc::CallbackServerContext*
#else
                            ::grpc::experimental::CallbackServerContext*
#endif
                                context,
                            const ::mavsdk::rpc::tracking_server::
                                RespondTrackingPointCommandRequest* request,
                            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse*
                                response) {
                            return this->RespondTrackingPointCommand(context, request, response);
                        }));
        }
        void SetMessageAllocatorFor_RespondTrackingPointCommand(
            ::grpc::experimental::MessageAllocator<
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>* allocator)
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
#else
            ::grpc::internal::MethodHandler* const handler =
                ::grpc::Service::experimental().GetHandler(6);
#endif
            static_cast<::grpc_impl::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~ExperimentalWithCallbackMethod_RespondTrackingPointCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingPointCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* RespondTrackingPointCommand(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* RespondTrackingPointCommand(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithCallbackMethod_RespondTrackingRectangleCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithCallbackMethod_RespondTrackingRectangleCommand()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodCallback(
                    7,
                    new ::grpc_impl::internal::CallbackUnaryHandler<
                        ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest,
                        ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>(
                        [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                            ::grpc::CallbackServerContext*
#else
                            ::grpc::experimental::CallbackServerContext*
#endif
                                context,
                            const ::mavsdk::rpc::tracking_server::
                                RespondTrackingRectangleCommandRequest* request,
                            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse*
                                response) {
                            return this->RespondTrackingRectangleCommand(
                                context, request, response);
                        }));
        }
        void SetMessageAllocatorFor_RespondTrackingRectangleCommand(
            ::grpc::experimental::MessageAllocator<
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>* allocator)
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
#else
            ::grpc::internal::MethodHandler* const handler =
                ::grpc::Service::experimental().GetHandler(7);
#endif
            static_cast<::grpc_impl::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~ExperimentalWithCallbackMethod_RespondTrackingRectangleCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingRectangleCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                RespondTrackingRectangleCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* RespondTrackingRectangleCommand(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                RespondTrackingRectangleCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* RespondTrackingRectangleCommand(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                RespondTrackingRectangleCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithCallbackMethod_RespondTrackingOffCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithCallbackMethod_RespondTrackingOffCommand()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodCallback(
                    8,
                    new ::grpc_impl::internal::CallbackUnaryHandler<
                        ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest,
                        ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>(
                        [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                            ::grpc::CallbackServerContext*
#else
                            ::grpc::experimental::CallbackServerContext*
#endif
                                context,
                            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest*
                                request,
                            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse*
                                response) {
                            return this->RespondTrackingOffCommand(context, request, response);
                        }));
        }
        void SetMessageAllocatorFor_RespondTrackingOffCommand(
            ::grpc::experimental::MessageAllocator<
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>* allocator)
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
#else
            ::grpc::internal::MethodHandler* const handler =
                ::grpc::Service::experimental().GetHandler(8);
#endif
            static_cast<::grpc_impl::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~ExperimentalWithCallbackMethod_RespondTrackingOffCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingOffCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* RespondTrackingOffCommand(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* RespondTrackingOffCommand(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* /*response*/)
#endif
        {
            return nullptr;
        }
    };
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef ExperimentalWithCallbackMethod_SetTrackingPointStatus<
        ExperimentalWithCallbackMethod_SetTrackingRectangleStatus<
            ExperimentalWithCallbackMethod_SetTrackingOffStatus<
                ExperimentalWithCallbackMethod_SubscribeTrackingPointCommand<
                    ExperimentalWithCallbackMethod_SubscribeTrackingRectangleCommand<
                        ExperimentalWithCallbackMethod_SubscribeTrackingOffCommand<
                            ExperimentalWithCallbackMethod_RespondTrackingPointCommand<
                                ExperimentalWithCallbackMethod_RespondTrackingRectangleCommand<
                                    ExperimentalWithCallbackMethod_RespondTrackingOffCommand<
                                        Service>>>>>>>>>
        CallbackService;
#endif

    typedef ExperimentalWithCallbackMethod_SetTrackingPointStatus<
        ExperimentalWithCallbackMethod_SetTrackingRectangleStatus<
            ExperimentalWithCallbackMethod_SetTrackingOffStatus<
                ExperimentalWithCallbackMethod_SubscribeTrackingPointCommand<
                    ExperimentalWithCallbackMethod_SubscribeTrackingRectangleCommand<
                        ExperimentalWithCallbackMethod_SubscribeTrackingOffCommand<
                            ExperimentalWithCallbackMethod_RespondTrackingPointCommand<
                                ExperimentalWithCallbackMethod_RespondTrackingRectangleCommand<
                                    ExperimentalWithCallbackMethod_RespondTrackingOffCommand<
                                        Service>>>>>>>>>
        ExperimentalCallbackService;
    template<class BaseClass> class WithGenericMethod_SetTrackingPointStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SetTrackingPointStatus() { ::grpc::Service::MarkMethodGeneric(0); }
        ~WithGenericMethod_SetTrackingPointStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingPointStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass>
    class WithGenericMethod_SetTrackingRectangleStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SetTrackingRectangleStatus() { ::grpc::Service::MarkMethodGeneric(1); }
        ~WithGenericMethod_SetTrackingRectangleStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingRectangleStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_SetTrackingOffStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SetTrackingOffStatus() { ::grpc::Service::MarkMethodGeneric(2); }
        ~WithGenericMethod_SetTrackingOffStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingOffStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass>
    class WithGenericMethod_SubscribeTrackingPointCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeTrackingPointCommand() { ::grpc::Service::MarkMethodGeneric(3); }
        ~WithGenericMethod_SubscribeTrackingPointCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingPointCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass>
    class WithGenericMethod_SubscribeTrackingRectangleCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeTrackingRectangleCommand()
        {
            ::grpc::Service::MarkMethodGeneric(4);
        }
        ~WithGenericMethod_SubscribeTrackingRectangleCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingRectangleCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                SubscribeTrackingRectangleCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass>
    class WithGenericMethod_SubscribeTrackingOffCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeTrackingOffCommand() { ::grpc::Service::MarkMethodGeneric(5); }
        ~WithGenericMethod_SubscribeTrackingOffCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingOffCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass>
    class WithGenericMethod_RespondTrackingPointCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondTrackingPointCommand() { ::grpc::Service::MarkMethodGeneric(6); }
        ~WithGenericMethod_RespondTrackingPointCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingPointCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass>
    class WithGenericMethod_RespondTrackingRectangleCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondTrackingRectangleCommand()
        {
            ::grpc::Service::MarkMethodGeneric(7);
        }
        ~WithGenericMethod_RespondTrackingRectangleCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingRectangleCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                RespondTrackingRectangleCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_RespondTrackingOffCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondTrackingOffCommand() { ::grpc::Service::MarkMethodGeneric(8); }
        ~WithGenericMethod_RespondTrackingOffCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingOffCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithRawMethod_SetTrackingPointStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SetTrackingPointStatus() { ::grpc::Service::MarkMethodRaw(0); }
        ~WithRawMethod_SetTrackingPointStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingPointStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSetTrackingPointStatus(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                0, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SetTrackingRectangleStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SetTrackingRectangleStatus() { ::grpc::Service::MarkMethodRaw(1); }
        ~WithRawMethod_SetTrackingRectangleStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingRectangleStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSetTrackingRectangleStatus(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                1, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SetTrackingOffStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SetTrackingOffStatus() { ::grpc::Service::MarkMethodRaw(2); }
        ~WithRawMethod_SetTrackingOffStatus() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingOffStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSetTrackingOffStatus(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                2, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeTrackingPointCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeTrackingPointCommand() { ::grpc::Service::MarkMethodRaw(3); }
        ~WithRawMethod_SubscribeTrackingPointCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingPointCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeTrackingPointCommand(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                3, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass>
    class WithRawMethod_SubscribeTrackingRectangleCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeTrackingRectangleCommand() { ::grpc::Service::MarkMethodRaw(4); }
        ~WithRawMethod_SubscribeTrackingRectangleCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingRectangleCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                SubscribeTrackingRectangleCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeTrackingRectangleCommand(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                4, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeTrackingOffCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeTrackingOffCommand() { ::grpc::Service::MarkMethodRaw(5); }
        ~WithRawMethod_SubscribeTrackingOffCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingOffCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeTrackingOffCommand(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                5, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondTrackingPointCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondTrackingPointCommand() { ::grpc::Service::MarkMethodRaw(6); }
        ~WithRawMethod_RespondTrackingPointCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingPointCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondTrackingPointCommand(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                6, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass>
    class WithRawMethod_RespondTrackingRectangleCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondTrackingRectangleCommand() { ::grpc::Service::MarkMethodRaw(7); }
        ~WithRawMethod_RespondTrackingRectangleCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingRectangleCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                RespondTrackingRectangleCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondTrackingRectangleCommand(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                7, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondTrackingOffCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondTrackingOffCommand() { ::grpc::Service::MarkMethodRaw(8); }
        ~WithRawMethod_RespondTrackingOffCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingOffCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondTrackingOffCommand(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                8, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass>
    class ExperimentalWithRawCallbackMethod_SetTrackingPointStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithRawCallbackMethod_SetTrackingPointStatus()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodRawCallback(
                    0,
                    new ::grpc_impl::internal::
                        CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                            [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                                ::grpc::CallbackServerContext*
#else
                                ::grpc::experimental::CallbackServerContext*
#endif
                                    context,
                                const ::grpc::ByteBuffer* request,
                                ::grpc::ByteBuffer* response) {
                                return this->SetTrackingPointStatus(context, request, response);
                            }));
        }
        ~ExperimentalWithRawCallbackMethod_SetTrackingPointStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingPointStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* SetTrackingPointStatus(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* SetTrackingPointStatus(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithRawCallbackMethod_SetTrackingRectangleStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithRawCallbackMethod_SetTrackingRectangleStatus()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodRawCallback(
                    1,
                    new ::grpc_impl::internal::
                        CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                            [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                                ::grpc::CallbackServerContext*
#else
                                ::grpc::experimental::CallbackServerContext*
#endif
                                    context,
                                const ::grpc::ByteBuffer* request,
                                ::grpc::ByteBuffer* response) {
                                return this->SetTrackingRectangleStatus(context, request, response);
                            }));
        }
        ~ExperimentalWithRawCallbackMethod_SetTrackingRectangleStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingRectangleStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* SetTrackingRectangleStatus(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* SetTrackingRectangleStatus(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithRawCallbackMethod_SetTrackingOffStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithRawCallbackMethod_SetTrackingOffStatus()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodRawCallback(
                    2,
                    new ::grpc_impl::internal::
                        CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                            [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                                ::grpc::CallbackServerContext*
#else
                                ::grpc::experimental::CallbackServerContext*
#endif
                                    context,
                                const ::grpc::ByteBuffer* request,
                                ::grpc::ByteBuffer* response) {
                                return this->SetTrackingOffStatus(context, request, response);
                            }));
        }
        ~ExperimentalWithRawCallbackMethod_SetTrackingOffStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetTrackingOffStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* SetTrackingOffStatus(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* SetTrackingOffStatus(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithRawCallbackMethod_SubscribeTrackingPointCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithRawCallbackMethod_SubscribeTrackingPointCommand()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodRawCallback(
                    3,
                    new ::grpc_impl::internal::
                        CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                            [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                                ::grpc::CallbackServerContext*
#else
                                ::grpc::experimental::CallbackServerContext*
#endif
                                    context,
                                const ::grpc::ByteBuffer* request) {
                                return this->SubscribeTrackingPointCommand(context, request);
                            }));
        }
        ~ExperimentalWithRawCallbackMethod_SubscribeTrackingPointCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingPointCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeTrackingPointCommand(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
#else
        virtual ::grpc::experimental::ServerWriteReactor<::grpc::ByteBuffer>*
        SubscribeTrackingPointCommand(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithRawCallbackMethod_SubscribeTrackingRectangleCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithRawCallbackMethod_SubscribeTrackingRectangleCommand()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodRawCallback(
                    4,
                    new ::grpc_impl::internal::
                        CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                            [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                                ::grpc::CallbackServerContext*
#else
                                ::grpc::experimental::CallbackServerContext*
#endif
                                    context,
                                const ::grpc::ByteBuffer* request) {
                                return this->SubscribeTrackingRectangleCommand(context, request);
                            }));
        }
        ~ExperimentalWithRawCallbackMethod_SubscribeTrackingRectangleCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingRectangleCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                SubscribeTrackingRectangleCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeTrackingRectangleCommand(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
#else
        virtual ::grpc::experimental::ServerWriteReactor<::grpc::ByteBuffer>*
        SubscribeTrackingRectangleCommand(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithRawCallbackMethod_SubscribeTrackingOffCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithRawCallbackMethod_SubscribeTrackingOffCommand()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodRawCallback(
                    5,
                    new ::grpc_impl::internal::
                        CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                            [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                                ::grpc::CallbackServerContext*
#else
                                ::grpc::experimental::CallbackServerContext*
#endif
                                    context,
                                const ::grpc::ByteBuffer* request) {
                                return this->SubscribeTrackingOffCommand(context, request);
                            }));
        }
        ~ExperimentalWithRawCallbackMethod_SubscribeTrackingOffCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTrackingOffCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeTrackingOffCommand(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
#else
        virtual ::grpc::experimental::ServerWriteReactor<::grpc::ByteBuffer>*
        SubscribeTrackingOffCommand(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithRawCallbackMethod_RespondTrackingPointCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithRawCallbackMethod_RespondTrackingPointCommand()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodRawCallback(
                    6,
                    new ::grpc_impl::internal::CallbackUnaryHandler<
                        ::grpc::ByteBuffer,
                        ::grpc::ByteBuffer>([this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                                                ::grpc::CallbackServerContext*
#else
                                                ::grpc::experimental::CallbackServerContext*
#endif
                                                    context,
                                                const ::grpc::ByteBuffer* request,
                                                ::grpc::ByteBuffer* response) {
                        return this->RespondTrackingPointCommand(context, request, response);
                    }));
        }
        ~ExperimentalWithRawCallbackMethod_RespondTrackingPointCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingPointCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* RespondTrackingPointCommand(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* RespondTrackingPointCommand(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithRawCallbackMethod_RespondTrackingRectangleCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithRawCallbackMethod_RespondTrackingRectangleCommand()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodRawCallback(
                    7,
                    new ::grpc_impl::internal::CallbackUnaryHandler<
                        ::grpc::ByteBuffer,
                        ::grpc::ByteBuffer>([this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                                                ::grpc::CallbackServerContext*
#else
                                                ::grpc::experimental::CallbackServerContext*
#endif
                                                    context,
                                                const ::grpc::ByteBuffer* request,
                                                ::grpc::ByteBuffer* response) {
                        return this->RespondTrackingRectangleCommand(context, request, response);
                    }));
        }
        ~ExperimentalWithRawCallbackMethod_RespondTrackingRectangleCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingRectangleCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                RespondTrackingRectangleCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* RespondTrackingRectangleCommand(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* RespondTrackingRectangleCommand(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class ExperimentalWithRawCallbackMethod_RespondTrackingOffCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        ExperimentalWithRawCallbackMethod_RespondTrackingOffCommand()
        {
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
            ::grpc::Service::
#else
            ::grpc::Service::experimental().
#endif
                MarkMethodRawCallback(
                    8,
                    new ::grpc_impl::internal::
                        CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                            [this](
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                                ::grpc::CallbackServerContext*
#else
                                ::grpc::experimental::CallbackServerContext*
#endif
                                    context,
                                const ::grpc::ByteBuffer* request,
                                ::grpc::ByteBuffer* response) {
                                return this->RespondTrackingOffCommand(context, request, response);
                            }));
        }
        ~ExperimentalWithRawCallbackMethod_RespondTrackingOffCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTrackingOffCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
#ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
        virtual ::grpc::ServerUnaryReactor* RespondTrackingOffCommand(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#else
        virtual ::grpc::experimental::ServerUnaryReactor* RespondTrackingOffCommand(
            ::grpc::experimental::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
#endif
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithStreamedUnaryMethod_SetTrackingPointStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_SetTrackingPointStatus()
        {
            ::grpc::Service::MarkMethodStreamed(
                0,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest,
                    ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>(
                    [this](
                        ::grpc_impl::ServerContext* context,
                        ::grpc_impl::ServerUnaryStreamer<
                            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest,
                            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>*
                            streamer) {
                        return this->StreamedSetTrackingPointStatus(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_SetTrackingPointStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SetTrackingPointStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedSetTrackingPointStatus(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusRequest,
                ::mavsdk::rpc::tracking_server::SetTrackingPointStatusResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass>
    class WithStreamedUnaryMethod_SetTrackingRectangleStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_SetTrackingRectangleStatus()
        {
            ::grpc::Service::MarkMethodStreamed(
                1,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest,
                    ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>(
                    [this](
                        ::grpc_impl::ServerContext* context,
                        ::grpc_impl::ServerUnaryStreamer<
                            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest,
                            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>*
                            streamer) {
                        return this->StreamedSetTrackingRectangleStatus(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_SetTrackingRectangleStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SetTrackingRectangleStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedSetTrackingRectangleStatus(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusRequest,
                ::mavsdk::rpc::tracking_server::SetTrackingRectangleStatusResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass>
    class WithStreamedUnaryMethod_SetTrackingOffStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_SetTrackingOffStatus()
        {
            ::grpc::Service::MarkMethodStreamed(
                2,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest,
                    ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>(
                    [this](
                        ::grpc_impl::ServerContext* context,
                        ::grpc_impl::ServerUnaryStreamer<
                            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest,
                            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>*
                            streamer) {
                        return this->StreamedSetTrackingOffStatus(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_SetTrackingOffStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SetTrackingOffStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedSetTrackingOffStatus(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusRequest,
                ::mavsdk::rpc::tracking_server::SetTrackingOffStatusResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass>
    class WithStreamedUnaryMethod_RespondTrackingPointCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondTrackingPointCommand()
        {
            ::grpc::Service::MarkMethodStreamed(
                6,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest,
                    ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>(
                    [this](
                        ::grpc_impl::ServerContext* context,
                        ::grpc_impl::ServerUnaryStreamer<
                            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest,
                            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>*
                            streamer) {
                        return this->StreamedRespondTrackingPointCommand(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondTrackingPointCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondTrackingPointCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondTrackingPointCommand(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandRequest,
                ::mavsdk::rpc::tracking_server::RespondTrackingPointCommandResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass>
    class WithStreamedUnaryMethod_RespondTrackingRectangleCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondTrackingRectangleCommand()
        {
            ::grpc::Service::MarkMethodStreamed(
                7,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest,
                    ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>(
                    [this](
                        ::grpc_impl::ServerContext* context,
                        ::grpc_impl::ServerUnaryStreamer<
                            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest,
                            ::mavsdk::rpc::tracking_server::
                                RespondTrackingRectangleCommandResponse>* streamer) {
                        return this->StreamedRespondTrackingRectangleCommand(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondTrackingRectangleCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondTrackingRectangleCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                RespondTrackingRectangleCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondTrackingRectangleCommand(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandRequest,
                ::mavsdk::rpc::tracking_server::RespondTrackingRectangleCommandResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass>
    class WithStreamedUnaryMethod_RespondTrackingOffCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondTrackingOffCommand()
        {
            ::grpc::Service::MarkMethodStreamed(
                8,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest,
                    ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>(
                    [this](
                        ::grpc_impl::ServerContext* context,
                        ::grpc_impl::ServerUnaryStreamer<
                            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest,
                            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>*
                            streamer) {
                        return this->StreamedRespondTrackingOffCommand(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondTrackingOffCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondTrackingOffCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest* /*request*/,
            ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse* /*response*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondTrackingOffCommand(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandRequest,
                ::mavsdk::rpc::tracking_server::RespondTrackingOffCommandResponse>*
                server_unary_streamer) = 0;
    };
    typedef WithStreamedUnaryMethod_SetTrackingPointStatus<
        WithStreamedUnaryMethod_SetTrackingRectangleStatus<
            WithStreamedUnaryMethod_SetTrackingOffStatus<
                WithStreamedUnaryMethod_RespondTrackingPointCommand<
                    WithStreamedUnaryMethod_RespondTrackingRectangleCommand<
                        WithStreamedUnaryMethod_RespondTrackingOffCommand<Service>>>>>>
        StreamedUnaryService;
    template<class BaseClass>
    class WithSplitStreamingMethod_SubscribeTrackingPointCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeTrackingPointCommand()
        {
            ::grpc::Service::MarkMethodStreamed(
                3,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest,
                    ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>(
                    [this](
                        ::grpc_impl::ServerContext* context,
                        ::grpc_impl::ServerSplitStreamer<
                            ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest,
                            ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>*
                            streamer) {
                        return this->StreamedSubscribeTrackingPointCommand(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeTrackingPointCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeTrackingPointCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeTrackingPointCommand(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::tracking_server::SubscribeTrackingPointCommandRequest,
                ::mavsdk::rpc::tracking_server::TrackingPointCommandResponse>*
                server_split_streamer) = 0;
    };
    template<class BaseClass>
    class WithSplitStreamingMethod_SubscribeTrackingRectangleCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeTrackingRectangleCommand()
        {
            ::grpc::Service::MarkMethodStreamed(
                4,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest,
                    ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>(
                    [this](
                        ::grpc_impl::ServerContext* context,
                        ::grpc_impl::ServerSplitStreamer<
                            ::mavsdk::rpc::tracking_server::
                                SubscribeTrackingRectangleCommandRequest,
                            ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>*
                            streamer) {
                        return this->StreamedSubscribeTrackingRectangleCommand(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeTrackingRectangleCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeTrackingRectangleCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::
                SubscribeTrackingRectangleCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeTrackingRectangleCommand(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::tracking_server::SubscribeTrackingRectangleCommandRequest,
                ::mavsdk::rpc::tracking_server::TrackingRectangleCommandResponse>*
                server_split_streamer) = 0;
    };
    template<class BaseClass>
    class WithSplitStreamingMethod_SubscribeTrackingOffCommand : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeTrackingOffCommand()
        {
            ::grpc::Service::MarkMethodStreamed(
                5,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest,
                    ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>(
                    [this](
                        ::grpc_impl::ServerContext* context,
                        ::grpc_impl::ServerSplitStreamer<
                            ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest,
                            ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>* streamer) {
                        return this->StreamedSubscribeTrackingOffCommand(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeTrackingOffCommand() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeTrackingOffCommand(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeTrackingOffCommand(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::tracking_server::SubscribeTrackingOffCommandRequest,
                ::mavsdk::rpc::tracking_server::TrackingOffCommandResponse>*
                server_split_streamer) = 0;
    };
    typedef WithSplitStreamingMethod_SubscribeTrackingPointCommand<
        WithSplitStreamingMethod_SubscribeTrackingRectangleCommand<
            WithSplitStreamingMethod_SubscribeTrackingOffCommand<Service>>>
        SplitStreamedService;
    typedef WithStreamedUnaryMethod_SetTrackingPointStatus<
        WithStreamedUnaryMethod_SetTrackingRectangleStatus<
            WithStreamedUnaryMethod_SetTrackingOffStatus<
                WithSplitStreamingMethod_SubscribeTrackingPointCommand<
                    WithSplitStreamingMethod_SubscribeTrackingRectangleCommand<
                        WithSplitStreamingMethod_SubscribeTrackingOffCommand<
                            WithStreamedUnaryMethod_RespondTrackingPointCommand<
                                WithStreamedUnaryMethod_RespondTrackingRectangleCommand<
                                    WithStreamedUnaryMethod_RespondTrackingOffCommand<
                                        Service>>>>>>>>>
        StreamedService;
};

} // namespace tracking_server
} // namespace rpc
} // namespace mavsdk

#endif // GRPC_tracking_5fserver_2ftracking_5fserver_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transponder/transponder.proto

#include "transponder/transponder.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transponder_2ftransponder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdsbVehicle_transponder_2ftransponder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transponder_2ftransponder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransponderResult_transponder_2ftransponder_2eproto;
namespace mavsdk {
namespace rpc {
namespace transponder {
class SubscribeTransponderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeTransponderRequest> _instance;
} _SubscribeTransponderRequest_default_instance_;
class TransponderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransponderResponse> _instance;
} _TransponderResponse_default_instance_;
class SetRateTransponderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateTransponderRequest> _instance;
} _SetRateTransponderRequest_default_instance_;
class SetRateTransponderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateTransponderResponse> _instance;
} _SetRateTransponderResponse_default_instance_;
class AdsbVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdsbVehicle> _instance;
} _AdsbVehicle_default_instance_;
class TransponderResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransponderResult> _instance;
} _TransponderResult_default_instance_;
}  // namespace transponder
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsscc_info_AdsbVehicle_transponder_2ftransponder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::transponder::_AdsbVehicle_default_instance_;
    new (ptr) ::mavsdk::rpc::transponder::AdsbVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::transponder::AdsbVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdsbVehicle_transponder_2ftransponder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdsbVehicle_transponder_2ftransponder_2eproto}, {}};

static void InitDefaultsscc_info_SetRateTransponderRequest_transponder_2ftransponder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::transponder::_SetRateTransponderRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::transponder::SetRateTransponderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::transponder::SetRateTransponderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateTransponderRequest_transponder_2ftransponder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateTransponderRequest_transponder_2ftransponder_2eproto}, {}};

static void InitDefaultsscc_info_SetRateTransponderResponse_transponder_2ftransponder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::transponder::_SetRateTransponderResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::transponder::SetRateTransponderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::transponder::SetRateTransponderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateTransponderResponse_transponder_2ftransponder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateTransponderResponse_transponder_2ftransponder_2eproto}, {
      &scc_info_TransponderResult_transponder_2ftransponder_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeTransponderRequest_transponder_2ftransponder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::transponder::_SubscribeTransponderRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::transponder::SubscribeTransponderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::transponder::SubscribeTransponderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeTransponderRequest_transponder_2ftransponder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeTransponderRequest_transponder_2ftransponder_2eproto}, {}};

static void InitDefaultsscc_info_TransponderResponse_transponder_2ftransponder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::transponder::_TransponderResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::transponder::TransponderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::transponder::TransponderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransponderResponse_transponder_2ftransponder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransponderResponse_transponder_2ftransponder_2eproto}, {
      &scc_info_AdsbVehicle_transponder_2ftransponder_2eproto.base,}};

static void InitDefaultsscc_info_TransponderResult_transponder_2ftransponder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::transponder::_TransponderResult_default_instance_;
    new (ptr) ::mavsdk::rpc::transponder::TransponderResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::transponder::TransponderResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransponderResult_transponder_2ftransponder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransponderResult_transponder_2ftransponder_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transponder_2ftransponder_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_transponder_2ftransponder_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transponder_2ftransponder_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transponder_2ftransponder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::SubscribeTransponderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::TransponderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::TransponderResponse, transponder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::SetRateTransponderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::SetRateTransponderRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::SetRateTransponderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::SetRateTransponderResponse, transponder_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, icao_address_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, absolute_altitude_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, heading_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, horizontal_velocity_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, vertical_velocity_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, callsign_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, emitter_type_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, squawk_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::AdsbVehicle, tslc_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::TransponderResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::TransponderResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::transponder::TransponderResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::transponder::SubscribeTransponderRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::transponder::TransponderResponse)},
  { 11, -1, sizeof(::mavsdk::rpc::transponder::SetRateTransponderRequest)},
  { 17, -1, sizeof(::mavsdk::rpc::transponder::SetRateTransponderResponse)},
  { 23, -1, sizeof(::mavsdk::rpc::transponder::AdsbVehicle)},
  { 39, -1, sizeof(::mavsdk::rpc::transponder::TransponderResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::transponder::_SubscribeTransponderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::transponder::_TransponderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::transponder::_SetRateTransponderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::transponder::_SetRateTransponderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::transponder::_AdsbVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::transponder::_TransponderResult_default_instance_),
};

const char descriptor_table_protodef_transponder_2ftransponder_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035transponder/transponder.proto\022\026mavsdk."
  "rpc.transponder\"\035\n\033SubscribeTransponderR"
  "equest\"O\n\023TransponderResponse\0228\n\013transpo"
  "nder\030\001 \001(\0132#.mavsdk.rpc.transponder.Adsb"
  "Vehicle\",\n\031SetRateTransponderRequest\022\017\n\007"
  "rate_hz\030\001 \001(\001\"c\n\032SetRateTransponderRespo"
  "nse\022E\n\022transponder_result\030\001 \001(\0132).mavsdk"
  ".rpc.transponder.TransponderResult\"\263\002\n\013A"
  "dsbVehicle\022\024\n\014icao_address\030\001 \001(\r\022\024\n\014lati"
  "tude_deg\030\002 \001(\001\022\025\n\rlongitude_deg\030\003 \001(\001\022\033\n"
  "\023absolute_altitude_m\030\005 \001(\002\022\023\n\013heading_de"
  "g\030\006 \001(\002\022\037\n\027horizontal_velocity_m_s\030\007 \001(\002"
  "\022\035\n\025vertical_velocity_m_s\030\010 \001(\002\022\020\n\010calls"
  "ign\030\t \001(\t\022=\n\014emitter_type\030\n \001(\0162\'.mavsdk"
  ".rpc.transponder.AdsbEmitterType\022\016\n\006squa"
  "wk\030\r \001(\r\022\016\n\006tslc_s\030\016 \001(\r\"\217\002\n\021Transponder"
  "Result\022@\n\006result\030\001 \001(\01620.mavsdk.rpc.tran"
  "sponder.TransponderResult.Result\022\022\n\nresu"
  "lt_str\030\002 \001(\t\"\243\001\n\006Result\022\022\n\016RESULT_UNKNOW"
  "N\020\000\022\022\n\016RESULT_SUCCESS\020\001\022\024\n\020RESULT_NO_SYS"
  "TEM\020\002\022\033\n\027RESULT_CONNECTION_ERROR\020\003\022\017\n\013RE"
  "SULT_BUSY\020\004\022\031\n\025RESULT_COMMAND_DENIED\020\005\022\022"
  "\n\016RESULT_TIMEOUT\020\006*\255\005\n\017AdsbEmitterType\022\035"
  "\n\031ADSB_EMITTER_TYPE_NO_INFO\020\000\022\033\n\027ADSB_EM"
  "ITTER_TYPE_LIGHT\020\001\022\033\n\027ADSB_EMITTER_TYPE_"
  "SMALL\020\002\022\033\n\027ADSB_EMITTER_TYPE_LARGE\020\003\022\'\n#"
  "ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE\020\004\022\033\n"
  "\027ADSB_EMITTER_TYPE_HEAVY\020\005\022\"\n\036ADSB_EMITT"
  "ER_TYPE_HIGHLY_MANUV\020\006\022\037\n\033ADSB_EMITTER_T"
  "YPE_ROTOCRAFT\020\007\022 \n\034ADSB_EMITTER_TYPE_UNA"
  "SSIGNED\020\010\022\034\n\030ADSB_EMITTER_TYPE_GLIDER\020\t\022"
  "!\n\035ADSB_EMITTER_TYPE_LIGHTER_AIR\020\n\022\037\n\033AD"
  "SB_EMITTER_TYPE_PARACHUTE\020\013\022!\n\035ADSB_EMIT"
  "TER_TYPE_ULTRA_LIGHT\020\014\022!\n\035ADSB_EMITTER_T"
  "YPE_UNASSIGNED2\020\r\022\031\n\025ADSB_EMITTER_TYPE_U"
  "AV\020\016\022\033\n\027ADSB_EMITTER_TYPE_SPACE\020\017\022!\n\035ADS"
  "B_EMITTER_TYPE_UNASSGINED3\020\020\022\'\n#ADSB_EMI"
  "TTER_TYPE_EMERGENCY_SURFACE\020\021\022%\n!ADSB_EM"
  "ITTER_TYPE_SERVICE_SURFACE\020\022\022$\n ADSB_EMI"
  "TTER_TYPE_POINT_OBSTACLE\020\0232\221\002\n\022Transpond"
  "erService\022|\n\024SubscribeTransponder\0223.mavs"
  "dk.rpc.transponder.SubscribeTransponderR"
  "equest\032+.mavsdk.rpc.transponder.Transpon"
  "derResponse\"\0000\001\022}\n\022SetRateTransponder\0221."
  "mavsdk.rpc.transponder.SetRateTransponde"
  "rRequest\0322.mavsdk.rpc.transponder.SetRat"
  "eTransponderResponse\"\000B)\n\025io.mavsdk.tran"
  "sponderB\020TransponderProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transponder_2ftransponder_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transponder_2ftransponder_2eproto_sccs[6] = {
  &scc_info_AdsbVehicle_transponder_2ftransponder_2eproto.base,
  &scc_info_SetRateTransponderRequest_transponder_2ftransponder_2eproto.base,
  &scc_info_SetRateTransponderResponse_transponder_2ftransponder_2eproto.base,
  &scc_info_SubscribeTransponderRequest_transponder_2ftransponder_2eproto.base,
  &scc_info_TransponderResponse_transponder_2ftransponder_2eproto.base,
  &scc_info_TransponderResult_transponder_2ftransponder_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transponder_2ftransponder_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transponder_2ftransponder_2eproto = {
  false, false, descriptor_table_protodef_transponder_2ftransponder_2eproto, "transponder/transponder.proto", 1913,
  &descriptor_table_transponder_2ftransponder_2eproto_once, descriptor_table_transponder_2ftransponder_2eproto_sccs, descriptor_table_transponder_2ftransponder_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_transponder_2ftransponder_2eproto::offsets,
  file_level_metadata_transponder_2ftransponder_2eproto, 6, file_level_enum_descriptors_transponder_2ftransponder_2eproto, file_level_service_descriptors_transponder_2ftransponder_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transponder_2ftransponder_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transponder_2ftransponder_2eproto)), true);
namespace mavsdk {
namespace rpc {
namespace transponder {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransponderResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transponder_2ftransponder_2eproto);
  return file_level_enum_descriptors_transponder_2ftransponder_2eproto[0];
}
bool TransponderResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransponderResult_Result TransponderResult::RESULT_UNKNOWN;
constexpr TransponderResult_Result TransponderResult::RESULT_SUCCESS;
constexpr TransponderResult_Result TransponderResult::RESULT_NO_SYSTEM;
constexpr TransponderResult_Result TransponderResult::RESULT_CONNECTION_ERROR;
constexpr TransponderResult_Result TransponderResult::RESULT_BUSY;
constexpr TransponderResult_Result TransponderResult::RESULT_COMMAND_DENIED;
constexpr TransponderResult_Result TransponderResult::RESULT_TIMEOUT;
constexpr TransponderResult_Result TransponderResult::Result_MIN;
constexpr TransponderResult_Result TransponderResult::Result_MAX;
constexpr int TransponderResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdsbEmitterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transponder_2ftransponder_2eproto);
  return file_level_enum_descriptors_transponder_2ftransponder_2eproto[1];
}
bool AdsbEmitterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SubscribeTransponderRequest::InitAsDefaultInstance() {
}
class SubscribeTransponderRequest::_Internal {
 public:
};

SubscribeTransponderRequest::SubscribeTransponderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.transponder.SubscribeTransponderRequest)
}
SubscribeTransponderRequest::SubscribeTransponderRequest(const SubscribeTransponderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.transponder.SubscribeTransponderRequest)
}

void SubscribeTransponderRequest::SharedCtor() {
}

SubscribeTransponderRequest::~SubscribeTransponderRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.transponder.SubscribeTransponderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeTransponderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeTransponderRequest::ArenaDtor(void* object) {
  SubscribeTransponderRequest* _this = reinterpret_cast< SubscribeTransponderRequest* >(object);
  (void)_this;
}
void SubscribeTransponderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeTransponderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeTransponderRequest& SubscribeTransponderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeTransponderRequest_transponder_2ftransponder_2eproto.base);
  return *internal_default_instance();
}


void SubscribeTransponderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.transponder.SubscribeTransponderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeTransponderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeTransponderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.transponder.SubscribeTransponderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.transponder.SubscribeTransponderRequest)
  return target;
}

size_t SubscribeTransponderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.transponder.SubscribeTransponderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeTransponderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.transponder.SubscribeTransponderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeTransponderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeTransponderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.transponder.SubscribeTransponderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.transponder.SubscribeTransponderRequest)
    MergeFrom(*source);
  }
}

void SubscribeTransponderRequest::MergeFrom(const SubscribeTransponderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.transponder.SubscribeTransponderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeTransponderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.transponder.SubscribeTransponderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeTransponderRequest::CopyFrom(const SubscribeTransponderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.transponder.SubscribeTransponderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeTransponderRequest::IsInitialized() const {
  return true;
}

void SubscribeTransponderRequest::InternalSwap(SubscribeTransponderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeTransponderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransponderResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::transponder::_TransponderResponse_default_instance_._instance.get_mutable()->transponder_ = const_cast< ::mavsdk::rpc::transponder::AdsbVehicle*>(
      ::mavsdk::rpc::transponder::AdsbVehicle::internal_default_instance());
}
class TransponderResponse::_Internal {
 public:
  static const ::mavsdk::rpc::transponder::AdsbVehicle& transponder(const TransponderResponse* msg);
};

const ::mavsdk::rpc::transponder::AdsbVehicle&
TransponderResponse::_Internal::transponder(const TransponderResponse* msg) {
  return *msg->transponder_;
}
TransponderResponse::TransponderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.transponder.TransponderResponse)
}
TransponderResponse::TransponderResponse(const TransponderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transponder()) {
    transponder_ = new ::mavsdk::rpc::transponder::AdsbVehicle(*from.transponder_);
  } else {
    transponder_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.transponder.TransponderResponse)
}

void TransponderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransponderResponse_transponder_2ftransponder_2eproto.base);
  transponder_ = nullptr;
}

TransponderResponse::~TransponderResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.transponder.TransponderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransponderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transponder_;
}

void TransponderResponse::ArenaDtor(void* object) {
  TransponderResponse* _this = reinterpret_cast< TransponderResponse* >(object);
  (void)_this;
}
void TransponderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransponderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransponderResponse& TransponderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransponderResponse_transponder_2ftransponder_2eproto.base);
  return *internal_default_instance();
}


void TransponderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.transponder.TransponderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transponder_ != nullptr) {
    delete transponder_;
  }
  transponder_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransponderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.transponder.AdsbVehicle transponder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transponder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransponderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.transponder.TransponderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.transponder.AdsbVehicle transponder = 1;
  if (this->has_transponder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transponder(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.transponder.TransponderResponse)
  return target;
}

size_t TransponderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.transponder.TransponderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.transponder.AdsbVehicle transponder = 1;
  if (this->has_transponder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transponder_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransponderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.transponder.TransponderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransponderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransponderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.transponder.TransponderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.transponder.TransponderResponse)
    MergeFrom(*source);
  }
}

void TransponderResponse::MergeFrom(const TransponderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.transponder.TransponderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transponder()) {
    _internal_mutable_transponder()->::mavsdk::rpc::transponder::AdsbVehicle::MergeFrom(from._internal_transponder());
  }
}

void TransponderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.transponder.TransponderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransponderResponse::CopyFrom(const TransponderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.transponder.TransponderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransponderResponse::IsInitialized() const {
  return true;
}

void TransponderResponse::InternalSwap(TransponderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(transponder_, other->transponder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransponderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateTransponderRequest::InitAsDefaultInstance() {
}
class SetRateTransponderRequest::_Internal {
 public:
};

SetRateTransponderRequest::SetRateTransponderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.transponder.SetRateTransponderRequest)
}
SetRateTransponderRequest::SetRateTransponderRequest(const SetRateTransponderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.transponder.SetRateTransponderRequest)
}

void SetRateTransponderRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateTransponderRequest::~SetRateTransponderRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.transponder.SetRateTransponderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateTransponderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateTransponderRequest::ArenaDtor(void* object) {
  SetRateTransponderRequest* _this = reinterpret_cast< SetRateTransponderRequest* >(object);
  (void)_this;
}
void SetRateTransponderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateTransponderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateTransponderRequest& SetRateTransponderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateTransponderRequest_transponder_2ftransponder_2eproto.base);
  return *internal_default_instance();
}


void SetRateTransponderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.transponder.SetRateTransponderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateTransponderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateTransponderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.transponder.SetRateTransponderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.transponder.SetRateTransponderRequest)
  return target;
}

size_t SetRateTransponderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.transponder.SetRateTransponderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateTransponderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.transponder.SetRateTransponderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateTransponderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateTransponderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.transponder.SetRateTransponderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.transponder.SetRateTransponderRequest)
    MergeFrom(*source);
  }
}

void SetRateTransponderRequest::MergeFrom(const SetRateTransponderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.transponder.SetRateTransponderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateTransponderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.transponder.SetRateTransponderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateTransponderRequest::CopyFrom(const SetRateTransponderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.transponder.SetRateTransponderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateTransponderRequest::IsInitialized() const {
  return true;
}

void SetRateTransponderRequest::InternalSwap(SetRateTransponderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateTransponderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateTransponderResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::transponder::_SetRateTransponderResponse_default_instance_._instance.get_mutable()->transponder_result_ = const_cast< ::mavsdk::rpc::transponder::TransponderResult*>(
      ::mavsdk::rpc::transponder::TransponderResult::internal_default_instance());
}
class SetRateTransponderResponse::_Internal {
 public:
  static const ::mavsdk::rpc::transponder::TransponderResult& transponder_result(const SetRateTransponderResponse* msg);
};

const ::mavsdk::rpc::transponder::TransponderResult&
SetRateTransponderResponse::_Internal::transponder_result(const SetRateTransponderResponse* msg) {
  return *msg->transponder_result_;
}
SetRateTransponderResponse::SetRateTransponderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.transponder.SetRateTransponderResponse)
}
SetRateTransponderResponse::SetRateTransponderResponse(const SetRateTransponderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transponder_result()) {
    transponder_result_ = new ::mavsdk::rpc::transponder::TransponderResult(*from.transponder_result_);
  } else {
    transponder_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.transponder.SetRateTransponderResponse)
}

void SetRateTransponderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateTransponderResponse_transponder_2ftransponder_2eproto.base);
  transponder_result_ = nullptr;
}

SetRateTransponderResponse::~SetRateTransponderResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.transponder.SetRateTransponderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateTransponderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transponder_result_;
}

void SetRateTransponderResponse::ArenaDtor(void* object) {
  SetRateTransponderResponse* _this = reinterpret_cast< SetRateTransponderResponse* >(object);
  (void)_this;
}
void SetRateTransponderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateTransponderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateTransponderResponse& SetRateTransponderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateTransponderResponse_transponder_2ftransponder_2eproto.base);
  return *internal_default_instance();
}


void SetRateTransponderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.transponder.SetRateTransponderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transponder_result_ != nullptr) {
    delete transponder_result_;
  }
  transponder_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateTransponderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.transponder.TransponderResult transponder_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transponder_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateTransponderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.transponder.SetRateTransponderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.transponder.TransponderResult transponder_result = 1;
  if (this->has_transponder_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transponder_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.transponder.SetRateTransponderResponse)
  return target;
}

size_t SetRateTransponderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.transponder.SetRateTransponderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.transponder.TransponderResult transponder_result = 1;
  if (this->has_transponder_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transponder_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateTransponderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.transponder.SetRateTransponderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateTransponderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateTransponderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.transponder.SetRateTransponderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.transponder.SetRateTransponderResponse)
    MergeFrom(*source);
  }
}

void SetRateTransponderResponse::MergeFrom(const SetRateTransponderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.transponder.SetRateTransponderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transponder_result()) {
    _internal_mutable_transponder_result()->::mavsdk::rpc::transponder::TransponderResult::MergeFrom(from._internal_transponder_result());
  }
}

void SetRateTransponderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.transponder.SetRateTransponderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateTransponderResponse::CopyFrom(const SetRateTransponderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.transponder.SetRateTransponderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateTransponderResponse::IsInitialized() const {
  return true;
}

void SetRateTransponderResponse::InternalSwap(SetRateTransponderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(transponder_result_, other->transponder_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateTransponderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdsbVehicle::InitAsDefaultInstance() {
}
class AdsbVehicle::_Internal {
 public:
};

AdsbVehicle::AdsbVehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.transponder.AdsbVehicle)
}
AdsbVehicle::AdsbVehicle(const AdsbVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_callsign().empty()) {
    callsign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_callsign(),
      GetArena());
  }
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&tslc_s_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(tslc_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.transponder.AdsbVehicle)
}

void AdsbVehicle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdsbVehicle_transponder_2ftransponder_2eproto.base);
  callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tslc_s_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(tslc_s_));
}

AdsbVehicle::~AdsbVehicle() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.transponder.AdsbVehicle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdsbVehicle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  callsign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdsbVehicle::ArenaDtor(void* object) {
  AdsbVehicle* _this = reinterpret_cast< AdsbVehicle* >(object);
  (void)_this;
}
void AdsbVehicle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdsbVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdsbVehicle& AdsbVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdsbVehicle_transponder_2ftransponder_2eproto.base);
  return *internal_default_instance();
}


void AdsbVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.transponder.AdsbVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callsign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tslc_s_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(tslc_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdsbVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 icao_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          icao_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float absolute_altitude_m = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          absolute_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading_deg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          heading_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float horizontal_velocity_m_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          horizontal_velocity_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vertical_velocity_m_s = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          vertical_velocity_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string callsign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_callsign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.transponder.AdsbVehicle.callsign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.transponder.AdsbEmitterType emitter_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_emitter_type(static_cast<::mavsdk::rpc::transponder::AdsbEmitterType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 squawk = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          squawk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tslc_s = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          tslc_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdsbVehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.transponder.AdsbVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 icao_address = 1;
  if (this->icao_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_icao_address(), target);
  }

  // double latitude_deg = 2;
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 3;
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 5;
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_absolute_altitude_m(), target);
  }

  // float heading_deg = 6;
  if (!(this->heading_deg() <= 0 && this->heading_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_heading_deg(), target);
  }

  // float horizontal_velocity_m_s = 7;
  if (!(this->horizontal_velocity_m_s() <= 0 && this->horizontal_velocity_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_horizontal_velocity_m_s(), target);
  }

  // float vertical_velocity_m_s = 8;
  if (!(this->vertical_velocity_m_s() <= 0 && this->vertical_velocity_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_vertical_velocity_m_s(), target);
  }

  // string callsign = 9;
  if (this->callsign().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callsign().data(), static_cast<int>(this->_internal_callsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.transponder.AdsbVehicle.callsign");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_callsign(), target);
  }

  // .mavsdk.rpc.transponder.AdsbEmitterType emitter_type = 10;
  if (this->emitter_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_emitter_type(), target);
  }

  // uint32 squawk = 13;
  if (this->squawk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_squawk(), target);
  }

  // uint32 tslc_s = 14;
  if (this->tslc_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_tslc_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.transponder.AdsbVehicle)
  return target;
}

size_t AdsbVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.transponder.AdsbVehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string callsign = 9;
  if (this->callsign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_callsign());
  }

  // double latitude_deg = 2;
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 3;
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 icao_address = 1;
  if (this->icao_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_icao_address());
  }

  // float absolute_altitude_m = 5;
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading_deg = 6;
  if (!(this->heading_deg() <= 0 && this->heading_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float horizontal_velocity_m_s = 7;
  if (!(this->horizontal_velocity_m_s() <= 0 && this->horizontal_velocity_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float vertical_velocity_m_s = 8;
  if (!(this->vertical_velocity_m_s() <= 0 && this->vertical_velocity_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // .mavsdk.rpc.transponder.AdsbEmitterType emitter_type = 10;
  if (this->emitter_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_emitter_type());
  }

  // uint32 squawk = 13;
  if (this->squawk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_squawk());
  }

  // uint32 tslc_s = 14;
  if (this->tslc_s() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tslc_s());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdsbVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.transponder.AdsbVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const AdsbVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdsbVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.transponder.AdsbVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.transponder.AdsbVehicle)
    MergeFrom(*source);
  }
}

void AdsbVehicle::MergeFrom(const AdsbVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.transponder.AdsbVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.callsign().size() > 0) {
    _internal_set_callsign(from._internal_callsign());
  }
  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  if (from.icao_address() != 0) {
    _internal_set_icao_address(from._internal_icao_address());
  }
  if (!(from.absolute_altitude_m() <= 0 && from.absolute_altitude_m() >= 0)) {
    _internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
  if (!(from.heading_deg() <= 0 && from.heading_deg() >= 0)) {
    _internal_set_heading_deg(from._internal_heading_deg());
  }
  if (!(from.horizontal_velocity_m_s() <= 0 && from.horizontal_velocity_m_s() >= 0)) {
    _internal_set_horizontal_velocity_m_s(from._internal_horizontal_velocity_m_s());
  }
  if (!(from.vertical_velocity_m_s() <= 0 && from.vertical_velocity_m_s() >= 0)) {
    _internal_set_vertical_velocity_m_s(from._internal_vertical_velocity_m_s());
  }
  if (from.emitter_type() != 0) {
    _internal_set_emitter_type(from._internal_emitter_type());
  }
  if (from.squawk() != 0) {
    _internal_set_squawk(from._internal_squawk());
  }
  if (from.tslc_s() != 0) {
    _internal_set_tslc_s(from._internal_tslc_s());
  }
}

void AdsbVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.transponder.AdsbVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdsbVehicle::CopyFrom(const AdsbVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.transponder.AdsbVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdsbVehicle::IsInitialized() const {
  return true;
}

void AdsbVehicle::InternalSwap(AdsbVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  callsign_.Swap(&other->callsign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdsbVehicle, tslc_s_)
      + sizeof(AdsbVehicle::tslc_s_)
      - PROTOBUF_FIELD_OFFSET(AdsbVehicle, latitude_deg_)>(
          reinterpret_cast<char*>(&latitude_deg_),
          reinterpret_cast<char*>(&other->latitude_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdsbVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransponderResult::InitAsDefaultInstance() {
}
class TransponderResult::_Internal {
 public:
};

TransponderResult::TransponderResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.transponder.TransponderResult)
}
TransponderResult::TransponderResult(const TransponderResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_result_str(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.transponder.TransponderResult)
}

void TransponderResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransponderResult_transponder_2ftransponder_2eproto.base);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

TransponderResult::~TransponderResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.transponder.TransponderResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransponderResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransponderResult::ArenaDtor(void* object) {
  TransponderResult* _this = reinterpret_cast< TransponderResult* >(object);
  (void)_this;
}
void TransponderResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransponderResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransponderResult& TransponderResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransponderResult_transponder_2ftransponder_2eproto.base);
  return *internal_default_instance();
}


void TransponderResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.transponder.TransponderResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransponderResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.transponder.TransponderResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::transponder::TransponderResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.transponder.TransponderResult.result_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransponderResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.transponder.TransponderResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.transponder.TransponderResult.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.transponder.TransponderResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.transponder.TransponderResult)
  return target;
}

size_t TransponderResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.transponder.TransponderResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.transponder.TransponderResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransponderResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.transponder.TransponderResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TransponderResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransponderResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.transponder.TransponderResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.transponder.TransponderResult)
    MergeFrom(*source);
  }
}

void TransponderResult::MergeFrom(const TransponderResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.transponder.TransponderResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {
    _internal_set_result_str(from._internal_result_str());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void TransponderResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.transponder.TransponderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransponderResult::CopyFrom(const TransponderResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.transponder.TransponderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransponderResult::IsInitialized() const {
  return true;
}

void TransponderResult::InternalSwap(TransponderResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransponderResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transponder
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::transponder::SubscribeTransponderRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::transponder::SubscribeTransponderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::transponder::SubscribeTransponderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::transponder::TransponderResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::transponder::TransponderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::transponder::TransponderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::transponder::SetRateTransponderRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::transponder::SetRateTransponderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::transponder::SetRateTransponderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::transponder::SetRateTransponderResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::transponder::SetRateTransponderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::transponder::SetRateTransponderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::transponder::AdsbVehicle* Arena::CreateMaybeMessage< ::mavsdk::rpc::transponder::AdsbVehicle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::transponder::AdsbVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::transponder::TransponderResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::transponder::TransponderResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::transponder::TransponderResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

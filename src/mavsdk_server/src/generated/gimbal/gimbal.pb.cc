// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gimbal/gimbal.proto

#include "gimbal/gimbal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gimbal_2fgimbal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlStatus_gimbal_2fgimbal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gimbal_2fgimbal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GimbalResult_gimbal_2fgimbal_2eproto;
namespace mavsdk {
namespace rpc {
namespace gimbal {
class SetPitchAndYawRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPitchAndYawRequest> _instance;
} _SetPitchAndYawRequest_default_instance_;
class SetPitchAndYawResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPitchAndYawResponse> _instance;
} _SetPitchAndYawResponse_default_instance_;
class SetPitchRateAndYawRateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPitchRateAndYawRateRequest> _instance;
} _SetPitchRateAndYawRateRequest_default_instance_;
class SetPitchRateAndYawRateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPitchRateAndYawRateResponse> _instance;
} _SetPitchRateAndYawRateResponse_default_instance_;
class SetModeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetModeRequest> _instance;
} _SetModeRequest_default_instance_;
class SetModeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetModeResponse> _instance;
} _SetModeResponse_default_instance_;
class SetRoiLocationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRoiLocationRequest> _instance;
} _SetRoiLocationRequest_default_instance_;
class SetRoiLocationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRoiLocationResponse> _instance;
} _SetRoiLocationResponse_default_instance_;
class TakeControlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TakeControlRequest> _instance;
} _TakeControlRequest_default_instance_;
class TakeControlResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TakeControlResponse> _instance;
} _TakeControlResponse_default_instance_;
class ReleaseControlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseControlRequest> _instance;
} _ReleaseControlRequest_default_instance_;
class ReleaseControlResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseControlResponse> _instance;
} _ReleaseControlResponse_default_instance_;
class SubscribeControlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeControlRequest> _instance;
} _SubscribeControlRequest_default_instance_;
class ControlResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlResponse> _instance;
} _ControlResponse_default_instance_;
class ControlStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlStatus> _instance;
} _ControlStatus_default_instance_;
class GimbalResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GimbalResult> _instance;
} _GimbalResult_default_instance_;
}  // namespace gimbal
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsscc_info_ControlResponse_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_ControlResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::ControlResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::ControlResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlResponse_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ControlResponse_gimbal_2fgimbal_2eproto}, {
      &scc_info_ControlStatus_gimbal_2fgimbal_2eproto.base,}};

static void InitDefaultsscc_info_ControlStatus_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_ControlStatus_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::ControlStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::ControlStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlStatus_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ControlStatus_gimbal_2fgimbal_2eproto}, {}};

static void InitDefaultsscc_info_GimbalResult_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_GimbalResult_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::GimbalResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::GimbalResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GimbalResult_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GimbalResult_gimbal_2fgimbal_2eproto}, {}};

static void InitDefaultsscc_info_ReleaseControlRequest_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_ReleaseControlRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::ReleaseControlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::ReleaseControlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseControlRequest_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReleaseControlRequest_gimbal_2fgimbal_2eproto}, {}};

static void InitDefaultsscc_info_ReleaseControlResponse_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_ReleaseControlResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::ReleaseControlResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::ReleaseControlResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReleaseControlResponse_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReleaseControlResponse_gimbal_2fgimbal_2eproto}, {
      &scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base,}};

static void InitDefaultsscc_info_SetModeRequest_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_SetModeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::SetModeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::SetModeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetModeRequest_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetModeRequest_gimbal_2fgimbal_2eproto}, {}};

static void InitDefaultsscc_info_SetModeResponse_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_SetModeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::SetModeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::SetModeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetModeResponse_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetModeResponse_gimbal_2fgimbal_2eproto}, {
      &scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base,}};

static void InitDefaultsscc_info_SetPitchAndYawRequest_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_SetPitchAndYawRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::SetPitchAndYawRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::SetPitchAndYawRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetPitchAndYawRequest_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetPitchAndYawRequest_gimbal_2fgimbal_2eproto}, {}};

static void InitDefaultsscc_info_SetPitchAndYawResponse_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_SetPitchAndYawResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::SetPitchAndYawResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::SetPitchAndYawResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetPitchAndYawResponse_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetPitchAndYawResponse_gimbal_2fgimbal_2eproto}, {
      &scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base,}};

static void InitDefaultsscc_info_SetPitchRateAndYawRateRequest_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_SetPitchRateAndYawRateRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::SetPitchRateAndYawRateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::SetPitchRateAndYawRateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetPitchRateAndYawRateRequest_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetPitchRateAndYawRateRequest_gimbal_2fgimbal_2eproto}, {}};

static void InitDefaultsscc_info_SetPitchRateAndYawRateResponse_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_SetPitchRateAndYawRateResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::SetPitchRateAndYawRateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::SetPitchRateAndYawRateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetPitchRateAndYawRateResponse_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetPitchRateAndYawRateResponse_gimbal_2fgimbal_2eproto}, {
      &scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base,}};

static void InitDefaultsscc_info_SetRoiLocationRequest_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_SetRoiLocationRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::SetRoiLocationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::SetRoiLocationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRoiLocationRequest_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRoiLocationRequest_gimbal_2fgimbal_2eproto}, {}};

static void InitDefaultsscc_info_SetRoiLocationResponse_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_SetRoiLocationResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::SetRoiLocationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::SetRoiLocationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRoiLocationResponse_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRoiLocationResponse_gimbal_2fgimbal_2eproto}, {
      &scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeControlRequest_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_SubscribeControlRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::SubscribeControlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::SubscribeControlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeControlRequest_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeControlRequest_gimbal_2fgimbal_2eproto}, {}};

static void InitDefaultsscc_info_TakeControlRequest_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_TakeControlRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::TakeControlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::TakeControlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TakeControlRequest_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TakeControlRequest_gimbal_2fgimbal_2eproto}, {}};

static void InitDefaultsscc_info_TakeControlResponse_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_TakeControlResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::TakeControlResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::TakeControlResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TakeControlResponse_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TakeControlResponse_gimbal_2fgimbal_2eproto}, {
      &scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gimbal_2fgimbal_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gimbal_2fgimbal_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gimbal_2fgimbal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gimbal_2fgimbal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawRequest, pitch_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawRequest, yaw_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawResponse, gimbal_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateRequest, pitch_rate_deg_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateRequest, yaw_rate_deg_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateResponse, gimbal_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetModeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetModeRequest, gimbal_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetModeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetModeResponse, gimbal_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationRequest, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationRequest, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationRequest, altitude_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetRoiLocationResponse, gimbal_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlRequest, control_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::TakeControlResponse, gimbal_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ReleaseControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ReleaseControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ReleaseControlResponse, gimbal_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SubscribeControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlResponse, control_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, control_mode_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, sysid_primary_control_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, compid_primary_control_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, sysid_secondary_control_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::ControlStatus, compid_secondary_control_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::gimbal::SetPitchAndYawRequest)},
  { 7, -1, sizeof(::mavsdk::rpc::gimbal::SetPitchAndYawResponse)},
  { 13, -1, sizeof(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateRequest)},
  { 20, -1, sizeof(::mavsdk::rpc::gimbal::SetPitchRateAndYawRateResponse)},
  { 26, -1, sizeof(::mavsdk::rpc::gimbal::SetModeRequest)},
  { 32, -1, sizeof(::mavsdk::rpc::gimbal::SetModeResponse)},
  { 38, -1, sizeof(::mavsdk::rpc::gimbal::SetRoiLocationRequest)},
  { 46, -1, sizeof(::mavsdk::rpc::gimbal::SetRoiLocationResponse)},
  { 52, -1, sizeof(::mavsdk::rpc::gimbal::TakeControlRequest)},
  { 58, -1, sizeof(::mavsdk::rpc::gimbal::TakeControlResponse)},
  { 64, -1, sizeof(::mavsdk::rpc::gimbal::ReleaseControlRequest)},
  { 69, -1, sizeof(::mavsdk::rpc::gimbal::ReleaseControlResponse)},
  { 75, -1, sizeof(::mavsdk::rpc::gimbal::SubscribeControlRequest)},
  { 80, -1, sizeof(::mavsdk::rpc::gimbal::ControlResponse)},
  { 86, -1, sizeof(::mavsdk::rpc::gimbal::ControlStatus)},
  { 96, -1, sizeof(::mavsdk::rpc::gimbal::GimbalResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_SetPitchAndYawRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_SetPitchAndYawResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_SetPitchRateAndYawRateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_SetPitchRateAndYawRateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_SetModeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_SetModeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_SetRoiLocationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_SetRoiLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_TakeControlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_TakeControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_ReleaseControlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_ReleaseControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_SubscribeControlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_ControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_ControlStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::gimbal::_GimbalResult_default_instance_),
};

const char descriptor_table_protodef_gimbal_2fgimbal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023gimbal/gimbal.proto\022\021mavsdk.rpc.gimbal"
  "\";\n\025SetPitchAndYawRequest\022\021\n\tpitch_deg\030\001"
  " \001(\002\022\017\n\007yaw_deg\030\002 \001(\002\"P\n\026SetPitchAndYawR"
  "esponse\0226\n\rgimbal_result\030\001 \001(\0132\037.mavsdk."
  "rpc.gimbal.GimbalResult\"Q\n\035SetPitchRateA"
  "ndYawRateRequest\022\030\n\020pitch_rate_deg_s\030\001 \001"
  "(\002\022\026\n\016yaw_rate_deg_s\030\002 \001(\002\"X\n\036SetPitchRa"
  "teAndYawRateResponse\0226\n\rgimbal_result\030\001 "
  "\001(\0132\037.mavsdk.rpc.gimbal.GimbalResult\"D\n\016"
  "SetModeRequest\0222\n\013gimbal_mode\030\001 \001(\0162\035.ma"
  "vsdk.rpc.gimbal.GimbalMode\"I\n\017SetModeRes"
  "ponse\0226\n\rgimbal_result\030\001 \001(\0132\037.mavsdk.rp"
  "c.gimbal.GimbalResult\"X\n\025SetRoiLocationR"
  "equest\022\024\n\014latitude_deg\030\001 \001(\001\022\025\n\rlongitud"
  "e_deg\030\002 \001(\001\022\022\n\naltitude_m\030\003 \001(\002\"P\n\026SetRo"
  "iLocationResponse\0226\n\rgimbal_result\030\001 \001(\013"
  "2\037.mavsdk.rpc.gimbal.GimbalResult\"J\n\022Tak"
  "eControlRequest\0224\n\014control_mode\030\001 \001(\0162\036."
  "mavsdk.rpc.gimbal.ControlMode\"M\n\023TakeCon"
  "trolResponse\0226\n\rgimbal_result\030\001 \001(\0132\037.ma"
  "vsdk.rpc.gimbal.GimbalResult\"\027\n\025ReleaseC"
  "ontrolRequest\"P\n\026ReleaseControlResponse\022"
  "6\n\rgimbal_result\030\001 \001(\0132\037.mavsdk.rpc.gimb"
  "al.GimbalResult\"\031\n\027SubscribeControlReque"
  "st\"K\n\017ControlResponse\0228\n\016control_status\030"
  "\001 \001(\0132 .mavsdk.rpc.gimbal.ControlStatus\""
  "\307\001\n\rControlStatus\0224\n\014control_mode\030\001 \001(\0162"
  "\036.mavsdk.rpc.gimbal.ControlMode\022\035\n\025sysid"
  "_primary_control\030\002 \001(\005\022\036\n\026compid_primary"
  "_control\030\003 \001(\005\022\037\n\027sysid_secondary_contro"
  "l\030\004 \001(\005\022 \n\030compid_secondary_control\030\005 \001("
  "\005\"\341\001\n\014GimbalResult\0226\n\006result\030\001 \001(\0162&.mav"
  "sdk.rpc.gimbal.GimbalResult.Result\022\022\n\nre"
  "sult_str\030\002 \001(\t\"\204\001\n\006Result\022\022\n\016RESULT_UNKN"
  "OWN\020\000\022\022\n\016RESULT_SUCCESS\020\001\022\020\n\014RESULT_ERRO"
  "R\020\002\022\022\n\016RESULT_TIMEOUT\020\003\022\026\n\022RESULT_UNSUPP"
  "ORTED\020\004\022\024\n\020RESULT_NO_SYSTEM\020\005*B\n\nGimbalM"
  "ode\022\032\n\026GIMBAL_MODE_YAW_FOLLOW\020\000\022\030\n\024GIMBA"
  "L_MODE_YAW_LOCK\020\001*Z\n\013ControlMode\022\025\n\021CONT"
  "ROL_MODE_NONE\020\000\022\030\n\024CONTROL_MODE_PRIMARY\020"
  "\001\022\032\n\026CONTROL_MODE_SECONDARY\020\0022\347\005\n\rGimbal"
  "Service\022g\n\016SetPitchAndYaw\022(.mavsdk.rpc.g"
  "imbal.SetPitchAndYawRequest\032).mavsdk.rpc"
  ".gimbal.SetPitchAndYawResponse\"\000\022\177\n\026SetP"
  "itchRateAndYawRate\0220.mavsdk.rpc.gimbal.S"
  "etPitchRateAndYawRateRequest\0321.mavsdk.rp"
  "c.gimbal.SetPitchRateAndYawRateResponse\""
  "\000\022R\n\007SetMode\022!.mavsdk.rpc.gimbal.SetMode"
  "Request\032\".mavsdk.rpc.gimbal.SetModeRespo"
  "nse\"\000\022g\n\016SetRoiLocation\022(.mavsdk.rpc.gim"
  "bal.SetRoiLocationRequest\032).mavsdk.rpc.g"
  "imbal.SetRoiLocationResponse\"\000\022^\n\013TakeCo"
  "ntrol\022%.mavsdk.rpc.gimbal.TakeControlReq"
  "uest\032&.mavsdk.rpc.gimbal.TakeControlResp"
  "onse\"\000\022g\n\016ReleaseControl\022(.mavsdk.rpc.gi"
  "mbal.ReleaseControlRequest\032).mavsdk.rpc."
  "gimbal.ReleaseControlResponse\"\000\022f\n\020Subsc"
  "ribeControl\022*.mavsdk.rpc.gimbal.Subscrib"
  "eControlRequest\032\".mavsdk.rpc.gimbal.Cont"
  "rolResponse\"\0000\001B\037\n\020io.mavsdk.gimbalB\013Gim"
  "balProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gimbal_2fgimbal_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gimbal_2fgimbal_2eproto_sccs[16] = {
  &scc_info_ControlResponse_gimbal_2fgimbal_2eproto.base,
  &scc_info_ControlStatus_gimbal_2fgimbal_2eproto.base,
  &scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base,
  &scc_info_ReleaseControlRequest_gimbal_2fgimbal_2eproto.base,
  &scc_info_ReleaseControlResponse_gimbal_2fgimbal_2eproto.base,
  &scc_info_SetModeRequest_gimbal_2fgimbal_2eproto.base,
  &scc_info_SetModeResponse_gimbal_2fgimbal_2eproto.base,
  &scc_info_SetPitchAndYawRequest_gimbal_2fgimbal_2eproto.base,
  &scc_info_SetPitchAndYawResponse_gimbal_2fgimbal_2eproto.base,
  &scc_info_SetPitchRateAndYawRateRequest_gimbal_2fgimbal_2eproto.base,
  &scc_info_SetPitchRateAndYawRateResponse_gimbal_2fgimbal_2eproto.base,
  &scc_info_SetRoiLocationRequest_gimbal_2fgimbal_2eproto.base,
  &scc_info_SetRoiLocationResponse_gimbal_2fgimbal_2eproto.base,
  &scc_info_SubscribeControlRequest_gimbal_2fgimbal_2eproto.base,
  &scc_info_TakeControlRequest_gimbal_2fgimbal_2eproto.base,
  &scc_info_TakeControlResponse_gimbal_2fgimbal_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gimbal_2fgimbal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gimbal_2fgimbal_2eproto = {
  false, false, descriptor_table_protodef_gimbal_2fgimbal_2eproto, "gimbal/gimbal.proto", 2416,
  &descriptor_table_gimbal_2fgimbal_2eproto_once, descriptor_table_gimbal_2fgimbal_2eproto_sccs, descriptor_table_gimbal_2fgimbal_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_gimbal_2fgimbal_2eproto::offsets,
  file_level_metadata_gimbal_2fgimbal_2eproto, 16, file_level_enum_descriptors_gimbal_2fgimbal_2eproto, file_level_service_descriptors_gimbal_2fgimbal_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gimbal_2fgimbal_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gimbal_2fgimbal_2eproto)), true);
namespace mavsdk {
namespace rpc {
namespace gimbal {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GimbalResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gimbal_2fgimbal_2eproto);
  return file_level_enum_descriptors_gimbal_2fgimbal_2eproto[0];
}
bool GimbalResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GimbalResult_Result GimbalResult::RESULT_UNKNOWN;
constexpr GimbalResult_Result GimbalResult::RESULT_SUCCESS;
constexpr GimbalResult_Result GimbalResult::RESULT_ERROR;
constexpr GimbalResult_Result GimbalResult::RESULT_TIMEOUT;
constexpr GimbalResult_Result GimbalResult::RESULT_UNSUPPORTED;
constexpr GimbalResult_Result GimbalResult::RESULT_NO_SYSTEM;
constexpr GimbalResult_Result GimbalResult::Result_MIN;
constexpr GimbalResult_Result GimbalResult::Result_MAX;
constexpr int GimbalResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GimbalMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gimbal_2fgimbal_2eproto);
  return file_level_enum_descriptors_gimbal_2fgimbal_2eproto[1];
}
bool GimbalMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gimbal_2fgimbal_2eproto);
  return file_level_enum_descriptors_gimbal_2fgimbal_2eproto[2];
}
bool ControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SetPitchAndYawRequest::InitAsDefaultInstance() {
}
class SetPitchAndYawRequest::_Internal {
 public:
};

SetPitchAndYawRequest::SetPitchAndYawRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
}
SetPitchAndYawRequest::SetPitchAndYawRequest(const SetPitchAndYawRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pitch_deg_, &from.pitch_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_deg_) -
    reinterpret_cast<char*>(&pitch_deg_)) + sizeof(yaw_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
}

void SetPitchAndYawRequest::SharedCtor() {
  ::memset(&pitch_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&pitch_deg_)) + sizeof(yaw_deg_));
}

SetPitchAndYawRequest::~SetPitchAndYawRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPitchAndYawRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetPitchAndYawRequest::ArenaDtor(void* object) {
  SetPitchAndYawRequest* _this = reinterpret_cast< SetPitchAndYawRequest* >(object);
  (void)_this;
}
void SetPitchAndYawRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPitchAndYawRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPitchAndYawRequest& SetPitchAndYawRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPitchAndYawRequest_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void SetPitchAndYawRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pitch_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&pitch_deg_)) + sizeof(yaw_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPitchAndYawRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float pitch_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          pitch_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPitchAndYawRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch_deg = 1;
  if (!(this->pitch_deg() <= 0 && this->pitch_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pitch_deg(), target);
  }

  // float yaw_deg = 2;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  return target;
}

size_t SetPitchAndYawRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float pitch_deg = 1;
  if (!(this->pitch_deg() <= 0 && this->pitch_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_deg = 2;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPitchAndYawRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPitchAndYawRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPitchAndYawRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
    MergeFrom(*source);
  }
}

void SetPitchAndYawRequest::MergeFrom(const SetPitchAndYawRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.pitch_deg() <= 0 && from.pitch_deg() >= 0)) {
    _internal_set_pitch_deg(from._internal_pitch_deg());
  }
  if (!(from.yaw_deg() <= 0 && from.yaw_deg() >= 0)) {
    _internal_set_yaw_deg(from._internal_yaw_deg());
  }
}

void SetPitchAndYawRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPitchAndYawRequest::CopyFrom(const SetPitchAndYawRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPitchAndYawRequest::IsInitialized() const {
  return true;
}

void SetPitchAndYawRequest::InternalSwap(SetPitchAndYawRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPitchAndYawRequest, yaw_deg_)
      + sizeof(SetPitchAndYawRequest::yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(SetPitchAndYawRequest, pitch_deg_)>(
          reinterpret_cast<char*>(&pitch_deg_),
          reinterpret_cast<char*>(&other->pitch_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPitchAndYawRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPitchAndYawResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::gimbal::_SetPitchAndYawResponse_default_instance_._instance.get_mutable()->gimbal_result_ = const_cast< ::mavsdk::rpc::gimbal::GimbalResult*>(
      ::mavsdk::rpc::gimbal::GimbalResult::internal_default_instance());
}
class SetPitchAndYawResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetPitchAndYawResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
SetPitchAndYawResponse::_Internal::gimbal_result(const SetPitchAndYawResponse* msg) {
  return *msg->gimbal_result_;
}
SetPitchAndYawResponse::SetPitchAndYawResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
}
SetPitchAndYawResponse::SetPitchAndYawResponse(const SetPitchAndYawResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_result()) {
    gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from.gimbal_result_);
  } else {
    gimbal_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
}

void SetPitchAndYawResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPitchAndYawResponse_gimbal_2fgimbal_2eproto.base);
  gimbal_result_ = nullptr;
}

SetPitchAndYawResponse::~SetPitchAndYawResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPitchAndYawResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gimbal_result_;
}

void SetPitchAndYawResponse::ArenaDtor(void* object) {
  SetPitchAndYawResponse* _this = reinterpret_cast< SetPitchAndYawResponse* >(object);
  (void)_this;
}
void SetPitchAndYawResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPitchAndYawResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPitchAndYawResponse& SetPitchAndYawResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPitchAndYawResponse_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void SetPitchAndYawResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gimbal_result_ != nullptr) {
    delete gimbal_result_;
  }
  gimbal_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPitchAndYawResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPitchAndYawResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gimbal_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  return target;
}

size_t SetPitchAndYawResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gimbal_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPitchAndYawResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPitchAndYawResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPitchAndYawResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
    MergeFrom(*source);
  }
}

void SetPitchAndYawResponse::MergeFrom(const SetPitchAndYawResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gimbal_result()) {
    _internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(from._internal_gimbal_result());
  }
}

void SetPitchAndYawResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPitchAndYawResponse::CopyFrom(const SetPitchAndYawResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPitchAndYawResponse::IsInitialized() const {
  return true;
}

void SetPitchAndYawResponse::InternalSwap(SetPitchAndYawResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(gimbal_result_, other->gimbal_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPitchAndYawResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPitchRateAndYawRateRequest::InitAsDefaultInstance() {
}
class SetPitchRateAndYawRateRequest::_Internal {
 public:
};

SetPitchRateAndYawRateRequest::SetPitchRateAndYawRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
}
SetPitchRateAndYawRateRequest::SetPitchRateAndYawRateRequest(const SetPitchRateAndYawRateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pitch_rate_deg_s_, &from.pitch_rate_deg_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rate_deg_s_) -
    reinterpret_cast<char*>(&pitch_rate_deg_s_)) + sizeof(yaw_rate_deg_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
}

void SetPitchRateAndYawRateRequest::SharedCtor() {
  ::memset(&pitch_rate_deg_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_deg_s_) -
      reinterpret_cast<char*>(&pitch_rate_deg_s_)) + sizeof(yaw_rate_deg_s_));
}

SetPitchRateAndYawRateRequest::~SetPitchRateAndYawRateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPitchRateAndYawRateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetPitchRateAndYawRateRequest::ArenaDtor(void* object) {
  SetPitchRateAndYawRateRequest* _this = reinterpret_cast< SetPitchRateAndYawRateRequest* >(object);
  (void)_this;
}
void SetPitchRateAndYawRateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPitchRateAndYawRateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPitchRateAndYawRateRequest& SetPitchRateAndYawRateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPitchRateAndYawRateRequest_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void SetPitchRateAndYawRateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pitch_rate_deg_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_deg_s_) -
      reinterpret_cast<char*>(&pitch_rate_deg_s_)) + sizeof(yaw_rate_deg_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPitchRateAndYawRateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float pitch_rate_deg_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          pitch_rate_deg_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_rate_deg_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          yaw_rate_deg_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPitchRateAndYawRateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch_rate_deg_s = 1;
  if (!(this->pitch_rate_deg_s() <= 0 && this->pitch_rate_deg_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pitch_rate_deg_s(), target);
  }

  // float yaw_rate_deg_s = 2;
  if (!(this->yaw_rate_deg_s() <= 0 && this->yaw_rate_deg_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw_rate_deg_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  return target;
}

size_t SetPitchRateAndYawRateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float pitch_rate_deg_s = 1;
  if (!(this->pitch_rate_deg_s() <= 0 && this->pitch_rate_deg_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_rate_deg_s = 2;
  if (!(this->yaw_rate_deg_s() <= 0 && this->yaw_rate_deg_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPitchRateAndYawRateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPitchRateAndYawRateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPitchRateAndYawRateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
    MergeFrom(*source);
  }
}

void SetPitchRateAndYawRateRequest::MergeFrom(const SetPitchRateAndYawRateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.pitch_rate_deg_s() <= 0 && from.pitch_rate_deg_s() >= 0)) {
    _internal_set_pitch_rate_deg_s(from._internal_pitch_rate_deg_s());
  }
  if (!(from.yaw_rate_deg_s() <= 0 && from.yaw_rate_deg_s() >= 0)) {
    _internal_set_yaw_rate_deg_s(from._internal_yaw_rate_deg_s());
  }
}

void SetPitchRateAndYawRateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPitchRateAndYawRateRequest::CopyFrom(const SetPitchRateAndYawRateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPitchRateAndYawRateRequest::IsInitialized() const {
  return true;
}

void SetPitchRateAndYawRateRequest::InternalSwap(SetPitchRateAndYawRateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPitchRateAndYawRateRequest, yaw_rate_deg_s_)
      + sizeof(SetPitchRateAndYawRateRequest::yaw_rate_deg_s_)
      - PROTOBUF_FIELD_OFFSET(SetPitchRateAndYawRateRequest, pitch_rate_deg_s_)>(
          reinterpret_cast<char*>(&pitch_rate_deg_s_),
          reinterpret_cast<char*>(&other->pitch_rate_deg_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPitchRateAndYawRateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPitchRateAndYawRateResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::gimbal::_SetPitchRateAndYawRateResponse_default_instance_._instance.get_mutable()->gimbal_result_ = const_cast< ::mavsdk::rpc::gimbal::GimbalResult*>(
      ::mavsdk::rpc::gimbal::GimbalResult::internal_default_instance());
}
class SetPitchRateAndYawRateResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetPitchRateAndYawRateResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
SetPitchRateAndYawRateResponse::_Internal::gimbal_result(const SetPitchRateAndYawRateResponse* msg) {
  return *msg->gimbal_result_;
}
SetPitchRateAndYawRateResponse::SetPitchRateAndYawRateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
}
SetPitchRateAndYawRateResponse::SetPitchRateAndYawRateResponse(const SetPitchRateAndYawRateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_result()) {
    gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from.gimbal_result_);
  } else {
    gimbal_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
}

void SetPitchRateAndYawRateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPitchRateAndYawRateResponse_gimbal_2fgimbal_2eproto.base);
  gimbal_result_ = nullptr;
}

SetPitchRateAndYawRateResponse::~SetPitchRateAndYawRateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPitchRateAndYawRateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gimbal_result_;
}

void SetPitchRateAndYawRateResponse::ArenaDtor(void* object) {
  SetPitchRateAndYawRateResponse* _this = reinterpret_cast< SetPitchRateAndYawRateResponse* >(object);
  (void)_this;
}
void SetPitchRateAndYawRateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPitchRateAndYawRateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPitchRateAndYawRateResponse& SetPitchRateAndYawRateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPitchRateAndYawRateResponse_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void SetPitchRateAndYawRateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gimbal_result_ != nullptr) {
    delete gimbal_result_;
  }
  gimbal_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPitchRateAndYawRateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPitchRateAndYawRateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gimbal_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  return target;
}

size_t SetPitchRateAndYawRateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gimbal_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPitchRateAndYawRateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPitchRateAndYawRateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPitchRateAndYawRateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
    MergeFrom(*source);
  }
}

void SetPitchRateAndYawRateResponse::MergeFrom(const SetPitchRateAndYawRateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gimbal_result()) {
    _internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(from._internal_gimbal_result());
  }
}

void SetPitchRateAndYawRateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPitchRateAndYawRateResponse::CopyFrom(const SetPitchRateAndYawRateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetPitchRateAndYawRateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPitchRateAndYawRateResponse::IsInitialized() const {
  return true;
}

void SetPitchRateAndYawRateResponse::InternalSwap(SetPitchRateAndYawRateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(gimbal_result_, other->gimbal_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPitchRateAndYawRateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetModeRequest::InitAsDefaultInstance() {
}
class SetModeRequest::_Internal {
 public:
};

SetModeRequest::SetModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetModeRequest)
}
SetModeRequest::SetModeRequest(const SetModeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gimbal_mode_ = from.gimbal_mode_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetModeRequest)
}

void SetModeRequest::SharedCtor() {
  gimbal_mode_ = 0;
}

SetModeRequest::~SetModeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetModeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetModeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetModeRequest::ArenaDtor(void* object) {
  SetModeRequest* _this = reinterpret_cast< SetModeRequest* >(object);
  (void)_this;
}
void SetModeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetModeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetModeRequest& SetModeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetModeRequest_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void SetModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetModeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gimbal_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetModeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gimbal_mode(static_cast<::mavsdk::rpc::gimbal::GimbalMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetModeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetModeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 1;
  if (this->gimbal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gimbal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetModeRequest)
  return target;
}

size_t SetModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetModeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 1;
  if (this->gimbal_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gimbal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetModeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.SetModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetModeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetModeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.SetModeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.SetModeRequest)
    MergeFrom(*source);
  }
}

void SetModeRequest::MergeFrom(const SetModeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gimbal_mode() != 0) {
    _internal_set_gimbal_mode(from._internal_gimbal_mode());
  }
}

void SetModeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.SetModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetModeRequest::CopyFrom(const SetModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetModeRequest::IsInitialized() const {
  return true;
}

void SetModeRequest::InternalSwap(SetModeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(gimbal_mode_, other->gimbal_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetModeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetModeResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::gimbal::_SetModeResponse_default_instance_._instance.get_mutable()->gimbal_result_ = const_cast< ::mavsdk::rpc::gimbal::GimbalResult*>(
      ::mavsdk::rpc::gimbal::GimbalResult::internal_default_instance());
}
class SetModeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetModeResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
SetModeResponse::_Internal::gimbal_result(const SetModeResponse* msg) {
  return *msg->gimbal_result_;
}
SetModeResponse::SetModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetModeResponse)
}
SetModeResponse::SetModeResponse(const SetModeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_result()) {
    gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from.gimbal_result_);
  } else {
    gimbal_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetModeResponse)
}

void SetModeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetModeResponse_gimbal_2fgimbal_2eproto.base);
  gimbal_result_ = nullptr;
}

SetModeResponse::~SetModeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetModeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetModeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gimbal_result_;
}

void SetModeResponse::ArenaDtor(void* object) {
  SetModeResponse* _this = reinterpret_cast< SetModeResponse* >(object);
  (void)_this;
}
void SetModeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetModeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetModeResponse& SetModeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetModeResponse_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void SetModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetModeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gimbal_result_ != nullptr) {
    delete gimbal_result_;
  }
  gimbal_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetModeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetModeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetModeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gimbal_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetModeResponse)
  return target;
}

size_t SetModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetModeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gimbal_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetModeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.SetModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetModeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetModeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.SetModeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.SetModeResponse)
    MergeFrom(*source);
  }
}

void SetModeResponse::MergeFrom(const SetModeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gimbal_result()) {
    _internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(from._internal_gimbal_result());
  }
}

void SetModeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.SetModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetModeResponse::CopyFrom(const SetModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetModeResponse::IsInitialized() const {
  return true;
}

void SetModeResponse::InternalSwap(SetModeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(gimbal_result_, other->gimbal_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetModeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRoiLocationRequest::InitAsDefaultInstance() {
}
class SetRoiLocationRequest::_Internal {
 public:
};

SetRoiLocationRequest::SetRoiLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetRoiLocationRequest)
}
SetRoiLocationRequest::SetRoiLocationRequest(const SetRoiLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(altitude_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetRoiLocationRequest)
}

void SetRoiLocationRequest::SharedCtor() {
  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(altitude_m_));
}

SetRoiLocationRequest::~SetRoiLocationRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRoiLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRoiLocationRequest::ArenaDtor(void* object) {
  SetRoiLocationRequest* _this = reinterpret_cast< SetRoiLocationRequest* >(object);
  (void)_this;
}
void SetRoiLocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRoiLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRoiLocationRequest& SetRoiLocationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRoiLocationRequest_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void SetRoiLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(altitude_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRoiLocationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float altitude_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRoiLocationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1;
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2;
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude_deg(), target);
  }

  // float altitude_m = 3;
  if (!(this->altitude_m() <= 0 && this->altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  return target;
}

size_t SetRoiLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1;
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2;
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // float altitude_m = 3;
  if (!(this->altitude_m() <= 0 && this->altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRoiLocationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRoiLocationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRoiLocationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.SetRoiLocationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.SetRoiLocationRequest)
    MergeFrom(*source);
  }
}

void SetRoiLocationRequest::MergeFrom(const SetRoiLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  if (!(from.altitude_m() <= 0 && from.altitude_m() >= 0)) {
    _internal_set_altitude_m(from._internal_altitude_m());
  }
}

void SetRoiLocationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRoiLocationRequest::CopyFrom(const SetRoiLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetRoiLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRoiLocationRequest::IsInitialized() const {
  return true;
}

void SetRoiLocationRequest::InternalSwap(SetRoiLocationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRoiLocationRequest, altitude_m_)
      + sizeof(SetRoiLocationRequest::altitude_m_)
      - PROTOBUF_FIELD_OFFSET(SetRoiLocationRequest, latitude_deg_)>(
          reinterpret_cast<char*>(&latitude_deg_),
          reinterpret_cast<char*>(&other->latitude_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRoiLocationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRoiLocationResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::gimbal::_SetRoiLocationResponse_default_instance_._instance.get_mutable()->gimbal_result_ = const_cast< ::mavsdk::rpc::gimbal::GimbalResult*>(
      ::mavsdk::rpc::gimbal::GimbalResult::internal_default_instance());
}
class SetRoiLocationResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetRoiLocationResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
SetRoiLocationResponse::_Internal::gimbal_result(const SetRoiLocationResponse* msg) {
  return *msg->gimbal_result_;
}
SetRoiLocationResponse::SetRoiLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SetRoiLocationResponse)
}
SetRoiLocationResponse::SetRoiLocationResponse(const SetRoiLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_result()) {
    gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from.gimbal_result_);
  } else {
    gimbal_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetRoiLocationResponse)
}

void SetRoiLocationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRoiLocationResponse_gimbal_2fgimbal_2eproto.base);
  gimbal_result_ = nullptr;
}

SetRoiLocationResponse::~SetRoiLocationResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRoiLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gimbal_result_;
}

void SetRoiLocationResponse::ArenaDtor(void* object) {
  SetRoiLocationResponse* _this = reinterpret_cast< SetRoiLocationResponse* >(object);
  (void)_this;
}
void SetRoiLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRoiLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRoiLocationResponse& SetRoiLocationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRoiLocationResponse_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void SetRoiLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gimbal_result_ != nullptr) {
    delete gimbal_result_;
  }
  gimbal_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRoiLocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRoiLocationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gimbal_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  return target;
}

size_t SetRoiLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gimbal_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRoiLocationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRoiLocationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRoiLocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.SetRoiLocationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.SetRoiLocationResponse)
    MergeFrom(*source);
  }
}

void SetRoiLocationResponse::MergeFrom(const SetRoiLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gimbal_result()) {
    _internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(from._internal_gimbal_result());
  }
}

void SetRoiLocationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRoiLocationResponse::CopyFrom(const SetRoiLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetRoiLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRoiLocationResponse::IsInitialized() const {
  return true;
}

void SetRoiLocationResponse::InternalSwap(SetRoiLocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(gimbal_result_, other->gimbal_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRoiLocationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TakeControlRequest::InitAsDefaultInstance() {
}
class TakeControlRequest::_Internal {
 public:
};

TakeControlRequest::TakeControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.TakeControlRequest)
}
TakeControlRequest::TakeControlRequest(const TakeControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  control_mode_ = from.control_mode_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.TakeControlRequest)
}

void TakeControlRequest::SharedCtor() {
  control_mode_ = 0;
}

TakeControlRequest::~TakeControlRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.TakeControlRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TakeControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TakeControlRequest::ArenaDtor(void* object) {
  TakeControlRequest* _this = reinterpret_cast< TakeControlRequest* >(object);
  (void)_this;
}
void TakeControlRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TakeControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TakeControlRequest& TakeControlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TakeControlRequest_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void TakeControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.TakeControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TakeControlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_control_mode(static_cast<::mavsdk::rpc::gimbal::ControlMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TakeControlRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.TakeControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
  if (this->control_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_control_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.TakeControlRequest)
  return target;
}

size_t TakeControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.TakeControlRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
  if (this->control_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_control_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TakeControlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.TakeControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeControlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TakeControlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.TakeControlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.TakeControlRequest)
    MergeFrom(*source);
  }
}

void TakeControlRequest::MergeFrom(const TakeControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.TakeControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.control_mode() != 0) {
    _internal_set_control_mode(from._internal_control_mode());
  }
}

void TakeControlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.TakeControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeControlRequest::CopyFrom(const TakeControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.TakeControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeControlRequest::IsInitialized() const {
  return true;
}

void TakeControlRequest::InternalSwap(TakeControlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(control_mode_, other->control_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TakeControlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TakeControlResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::gimbal::_TakeControlResponse_default_instance_._instance.get_mutable()->gimbal_result_ = const_cast< ::mavsdk::rpc::gimbal::GimbalResult*>(
      ::mavsdk::rpc::gimbal::GimbalResult::internal_default_instance());
}
class TakeControlResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const TakeControlResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
TakeControlResponse::_Internal::gimbal_result(const TakeControlResponse* msg) {
  return *msg->gimbal_result_;
}
TakeControlResponse::TakeControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.TakeControlResponse)
}
TakeControlResponse::TakeControlResponse(const TakeControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_result()) {
    gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from.gimbal_result_);
  } else {
    gimbal_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.TakeControlResponse)
}

void TakeControlResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TakeControlResponse_gimbal_2fgimbal_2eproto.base);
  gimbal_result_ = nullptr;
}

TakeControlResponse::~TakeControlResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.TakeControlResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TakeControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gimbal_result_;
}

void TakeControlResponse::ArenaDtor(void* object) {
  TakeControlResponse* _this = reinterpret_cast< TakeControlResponse* >(object);
  (void)_this;
}
void TakeControlResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TakeControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TakeControlResponse& TakeControlResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TakeControlResponse_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void TakeControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.TakeControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gimbal_result_ != nullptr) {
    delete gimbal_result_;
  }
  gimbal_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TakeControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TakeControlResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.TakeControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gimbal_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.TakeControlResponse)
  return target;
}

size_t TakeControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.TakeControlResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gimbal_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TakeControlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.TakeControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeControlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TakeControlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.TakeControlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.TakeControlResponse)
    MergeFrom(*source);
  }
}

void TakeControlResponse::MergeFrom(const TakeControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.TakeControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gimbal_result()) {
    _internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(from._internal_gimbal_result());
  }
}

void TakeControlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.TakeControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeControlResponse::CopyFrom(const TakeControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.TakeControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeControlResponse::IsInitialized() const {
  return true;
}

void TakeControlResponse::InternalSwap(TakeControlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(gimbal_result_, other->gimbal_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TakeControlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseControlRequest::InitAsDefaultInstance() {
}
class ReleaseControlRequest::_Internal {
 public:
};

ReleaseControlRequest::ReleaseControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.ReleaseControlRequest)
}
ReleaseControlRequest::ReleaseControlRequest(const ReleaseControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.ReleaseControlRequest)
}

void ReleaseControlRequest::SharedCtor() {
}

ReleaseControlRequest::~ReleaseControlRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.ReleaseControlRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReleaseControlRequest::ArenaDtor(void* object) {
  ReleaseControlRequest* _this = reinterpret_cast< ReleaseControlRequest* >(object);
  (void)_this;
}
void ReleaseControlRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseControlRequest& ReleaseControlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseControlRequest_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void ReleaseControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.ReleaseControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseControlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseControlRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.ReleaseControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.ReleaseControlRequest)
  return target;
}

size_t ReleaseControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.ReleaseControlRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseControlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.ReleaseControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseControlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseControlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.ReleaseControlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.ReleaseControlRequest)
    MergeFrom(*source);
  }
}

void ReleaseControlRequest::MergeFrom(const ReleaseControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.ReleaseControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReleaseControlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.ReleaseControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseControlRequest::CopyFrom(const ReleaseControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.ReleaseControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseControlRequest::IsInitialized() const {
  return true;
}

void ReleaseControlRequest::InternalSwap(ReleaseControlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseControlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseControlResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::gimbal::_ReleaseControlResponse_default_instance_._instance.get_mutable()->gimbal_result_ = const_cast< ::mavsdk::rpc::gimbal::GimbalResult*>(
      ::mavsdk::rpc::gimbal::GimbalResult::internal_default_instance());
}
class ReleaseControlResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const ReleaseControlResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
ReleaseControlResponse::_Internal::gimbal_result(const ReleaseControlResponse* msg) {
  return *msg->gimbal_result_;
}
ReleaseControlResponse::ReleaseControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.ReleaseControlResponse)
}
ReleaseControlResponse::ReleaseControlResponse(const ReleaseControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gimbal_result()) {
    gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from.gimbal_result_);
  } else {
    gimbal_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.ReleaseControlResponse)
}

void ReleaseControlResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseControlResponse_gimbal_2fgimbal_2eproto.base);
  gimbal_result_ = nullptr;
}

ReleaseControlResponse::~ReleaseControlResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.ReleaseControlResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gimbal_result_;
}

void ReleaseControlResponse::ArenaDtor(void* object) {
  ReleaseControlResponse* _this = reinterpret_cast< ReleaseControlResponse* >(object);
  (void)_this;
}
void ReleaseControlResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseControlResponse& ReleaseControlResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseControlResponse_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void ReleaseControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gimbal_result_ != nullptr) {
    delete gimbal_result_;
  }
  gimbal_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbal_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseControlResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gimbal_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.ReleaseControlResponse)
  return target;
}

size_t ReleaseControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gimbal_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseControlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseControlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseControlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.ReleaseControlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.ReleaseControlResponse)
    MergeFrom(*source);
  }
}

void ReleaseControlResponse::MergeFrom(const ReleaseControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gimbal_result()) {
    _internal_mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(from._internal_gimbal_result());
  }
}

void ReleaseControlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseControlResponse::CopyFrom(const ReleaseControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.ReleaseControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseControlResponse::IsInitialized() const {
  return true;
}

void ReleaseControlResponse::InternalSwap(ReleaseControlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(gimbal_result_, other->gimbal_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseControlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeControlRequest::InitAsDefaultInstance() {
}
class SubscribeControlRequest::_Internal {
 public:
};

SubscribeControlRequest::SubscribeControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.SubscribeControlRequest)
}
SubscribeControlRequest::SubscribeControlRequest(const SubscribeControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SubscribeControlRequest)
}

void SubscribeControlRequest::SharedCtor() {
}

SubscribeControlRequest::~SubscribeControlRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SubscribeControlRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeControlRequest::ArenaDtor(void* object) {
  SubscribeControlRequest* _this = reinterpret_cast< SubscribeControlRequest* >(object);
  (void)_this;
}
void SubscribeControlRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeControlRequest& SubscribeControlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeControlRequest_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void SubscribeControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SubscribeControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeControlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeControlRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SubscribeControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SubscribeControlRequest)
  return target;
}

size_t SubscribeControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SubscribeControlRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeControlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.SubscribeControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeControlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeControlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.SubscribeControlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.SubscribeControlRequest)
    MergeFrom(*source);
  }
}

void SubscribeControlRequest::MergeFrom(const SubscribeControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SubscribeControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeControlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.SubscribeControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeControlRequest::CopyFrom(const SubscribeControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SubscribeControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeControlRequest::IsInitialized() const {
  return true;
}

void SubscribeControlRequest::InternalSwap(SubscribeControlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeControlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::gimbal::_ControlResponse_default_instance_._instance.get_mutable()->control_status_ = const_cast< ::mavsdk::rpc::gimbal::ControlStatus*>(
      ::mavsdk::rpc::gimbal::ControlStatus::internal_default_instance());
}
class ControlResponse::_Internal {
 public:
  static const ::mavsdk::rpc::gimbal::ControlStatus& control_status(const ControlResponse* msg);
};

const ::mavsdk::rpc::gimbal::ControlStatus&
ControlResponse::_Internal::control_status(const ControlResponse* msg) {
  return *msg->control_status_;
}
ControlResponse::ControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.ControlResponse)
}
ControlResponse::ControlResponse(const ControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_control_status()) {
    control_status_ = new ::mavsdk::rpc::gimbal::ControlStatus(*from.control_status_);
  } else {
    control_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.ControlResponse)
}

void ControlResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlResponse_gimbal_2fgimbal_2eproto.base);
  control_status_ = nullptr;
}

ControlResponse::~ControlResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.ControlResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete control_status_;
}

void ControlResponse::ArenaDtor(void* object) {
  ControlResponse* _this = reinterpret_cast< ControlResponse* >(object);
  (void)_this;
}
void ControlResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlResponse& ControlResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlResponse_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void ControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.ControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && control_status_ != nullptr) {
    delete control_status_;
  }
  control_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.ControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
  if (this->has_control_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::control_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.ControlResponse)
  return target;
}

size_t ControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.ControlResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
  if (this->has_control_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control_status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.ControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.ControlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.ControlResponse)
    MergeFrom(*source);
  }
}

void ControlResponse::MergeFrom(const ControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.ControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_control_status()) {
    _internal_mutable_control_status()->::mavsdk::rpc::gimbal::ControlStatus::MergeFrom(from._internal_control_status());
  }
}

void ControlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.ControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlResponse::CopyFrom(const ControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.ControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlResponse::IsInitialized() const {
  return true;
}

void ControlResponse::InternalSwap(ControlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(control_status_, other->control_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlStatus::InitAsDefaultInstance() {
}
class ControlStatus::_Internal {
 public:
};

ControlStatus::ControlStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.ControlStatus)
}
ControlStatus::ControlStatus(const ControlStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&control_mode_, &from.control_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&compid_secondary_control_) -
    reinterpret_cast<char*>(&control_mode_)) + sizeof(compid_secondary_control_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.ControlStatus)
}

void ControlStatus::SharedCtor() {
  ::memset(&control_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compid_secondary_control_) -
      reinterpret_cast<char*>(&control_mode_)) + sizeof(compid_secondary_control_));
}

ControlStatus::~ControlStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.ControlStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControlStatus::ArenaDtor(void* object) {
  ControlStatus* _this = reinterpret_cast< ControlStatus* >(object);
  (void)_this;
}
void ControlStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlStatus& ControlStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlStatus_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void ControlStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.ControlStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&control_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compid_secondary_control_) -
      reinterpret_cast<char*>(&control_mode_)) + sizeof(compid_secondary_control_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_control_mode(static_cast<::mavsdk::rpc::gimbal::ControlMode>(val));
        } else goto handle_unusual;
        continue;
      // int32 sysid_primary_control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sysid_primary_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 compid_primary_control = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          compid_primary_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sysid_secondary_control = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sysid_secondary_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 compid_secondary_control = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          compid_secondary_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.ControlStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
  if (this->control_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_control_mode(), target);
  }

  // int32 sysid_primary_control = 2;
  if (this->sysid_primary_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sysid_primary_control(), target);
  }

  // int32 compid_primary_control = 3;
  if (this->compid_primary_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_compid_primary_control(), target);
  }

  // int32 sysid_secondary_control = 4;
  if (this->sysid_secondary_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sysid_secondary_control(), target);
  }

  // int32 compid_secondary_control = 5;
  if (this->compid_secondary_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_compid_secondary_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.ControlStatus)
  return target;
}

size_t ControlStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.ControlStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.ControlMode control_mode = 1;
  if (this->control_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_control_mode());
  }

  // int32 sysid_primary_control = 2;
  if (this->sysid_primary_control() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sysid_primary_control());
  }

  // int32 compid_primary_control = 3;
  if (this->compid_primary_control() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compid_primary_control());
  }

  // int32 sysid_secondary_control = 4;
  if (this->sysid_secondary_control() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sysid_secondary_control());
  }

  // int32 compid_secondary_control = 5;
  if (this->compid_secondary_control() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compid_secondary_control());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.ControlStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.ControlStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.ControlStatus)
    MergeFrom(*source);
  }
}

void ControlStatus::MergeFrom(const ControlStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.ControlStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.control_mode() != 0) {
    _internal_set_control_mode(from._internal_control_mode());
  }
  if (from.sysid_primary_control() != 0) {
    _internal_set_sysid_primary_control(from._internal_sysid_primary_control());
  }
  if (from.compid_primary_control() != 0) {
    _internal_set_compid_primary_control(from._internal_compid_primary_control());
  }
  if (from.sysid_secondary_control() != 0) {
    _internal_set_sysid_secondary_control(from._internal_sysid_secondary_control());
  }
  if (from.compid_secondary_control() != 0) {
    _internal_set_compid_secondary_control(from._internal_compid_secondary_control());
  }
}

void ControlStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.ControlStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlStatus::CopyFrom(const ControlStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.ControlStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlStatus::IsInitialized() const {
  return true;
}

void ControlStatus::InternalSwap(ControlStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlStatus, compid_secondary_control_)
      + sizeof(ControlStatus::compid_secondary_control_)
      - PROTOBUF_FIELD_OFFSET(ControlStatus, control_mode_)>(
          reinterpret_cast<char*>(&control_mode_),
          reinterpret_cast<char*>(&other->control_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GimbalResult::InitAsDefaultInstance() {
}
class GimbalResult::_Internal {
 public:
};

GimbalResult::GimbalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.gimbal.GimbalResult)
}
GimbalResult::GimbalResult(const GimbalResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_result_str(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.GimbalResult)
}

void GimbalResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

GimbalResult::~GimbalResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.GimbalResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GimbalResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GimbalResult::ArenaDtor(void* object) {
  GimbalResult* _this = reinterpret_cast< GimbalResult* >(object);
  (void)_this;
}
void GimbalResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GimbalResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GimbalResult& GimbalResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void GimbalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.GimbalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GimbalResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::gimbal::GimbalResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.gimbal.GimbalResult.result_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GimbalResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.GimbalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.gimbal.GimbalResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.GimbalResult)
  return target;
}

size_t GimbalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.GimbalResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GimbalResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.GimbalResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GimbalResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GimbalResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.GimbalResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.GimbalResult)
    MergeFrom(*source);
  }
}

void GimbalResult::MergeFrom(const GimbalResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.GimbalResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {
    _internal_set_result_str(from._internal_result_str());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void GimbalResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.GimbalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GimbalResult::CopyFrom(const GimbalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.GimbalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GimbalResult::IsInitialized() const {
  return true;
}

void GimbalResult::InternalSwap(GimbalResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GimbalResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gimbal
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetPitchAndYawRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetPitchAndYawRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetPitchAndYawRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetPitchAndYawResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetPitchAndYawResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetPitchAndYawResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetPitchRateAndYawRateRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetPitchRateAndYawRateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetPitchRateAndYawRateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetPitchRateAndYawRateResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetPitchRateAndYawRateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetPitchRateAndYawRateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetModeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetModeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetModeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetModeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetModeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetModeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetRoiLocationRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetRoiLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetRoiLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetRoiLocationResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetRoiLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SetRoiLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::TakeControlRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::TakeControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::TakeControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::TakeControlResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::TakeControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::TakeControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::ReleaseControlRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::ReleaseControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::ReleaseControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::ReleaseControlResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::ReleaseControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::ReleaseControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SubscribeControlRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SubscribeControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::SubscribeControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::ControlResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::ControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::ControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::ControlStatus* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::ControlStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::ControlStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::GimbalResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::GimbalResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::gimbal::GimbalResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

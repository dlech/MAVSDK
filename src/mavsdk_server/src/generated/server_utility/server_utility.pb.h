// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_utility/server_utility.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5futility_2fserver_5futility_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5futility_2fserver_5futility_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/extension_set.h> // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5futility_2fserver_5futility_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
} // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5futility_2fserver_5futility_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
        entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField
        aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable
        schema[3] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_server_5futility_2fserver_5futility_2eproto;
namespace mavsdk {
namespace rpc {
namespace server_utility {
class SendStatusTextRequest;
class SendStatusTextRequestDefaultTypeInternal;
extern SendStatusTextRequestDefaultTypeInternal _SendStatusTextRequest_default_instance_;
class SendStatusTextResponse;
class SendStatusTextResponseDefaultTypeInternal;
extern SendStatusTextResponseDefaultTypeInternal _SendStatusTextResponse_default_instance_;
class ServerUtilityResult;
class ServerUtilityResultDefaultTypeInternal;
extern ServerUtilityResultDefaultTypeInternal _ServerUtilityResult_default_instance_;
} // namespace server_utility
} // namespace rpc
} // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<>
::mavsdk::rpc::server_utility::SendStatusTextRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::server_utility::SendStatusTextRequest>(Arena*);
template<>
::mavsdk::rpc::server_utility::SendStatusTextResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::server_utility::SendStatusTextResponse>(Arena*);
template<>
::mavsdk::rpc::server_utility::ServerUtilityResult*
Arena::CreateMaybeMessage<::mavsdk::rpc::server_utility::ServerUtilityResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace server_utility {

enum ServerUtilityResult_Result : int {
    ServerUtilityResult_Result_RESULT_UNKNOWN = 0,
    ServerUtilityResult_Result_RESULT_SUCCESS = 1,
    ServerUtilityResult_Result_RESULT_NO_SYSTEM = 2,
    ServerUtilityResult_Result_RESULT_CONNECTION_ERROR = 3,
    ServerUtilityResult_Result_RESULT_INVALID_ARGUMENT = 4,
    ServerUtilityResult_Result_ServerUtilityResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    ServerUtilityResult_Result_ServerUtilityResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerUtilityResult_Result_IsValid(int value);
constexpr ServerUtilityResult_Result ServerUtilityResult_Result_Result_MIN =
    ServerUtilityResult_Result_RESULT_UNKNOWN;
constexpr ServerUtilityResult_Result ServerUtilityResult_Result_Result_MAX =
    ServerUtilityResult_Result_RESULT_INVALID_ARGUMENT;
constexpr int ServerUtilityResult_Result_Result_ARRAYSIZE =
    ServerUtilityResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerUtilityResult_Result_descriptor();
template<typename T> inline const std::string& ServerUtilityResult_Result_Name(T enum_t_value)
{
    static_assert(
        ::std::is_same<T, ServerUtilityResult_Result>::value || ::std::is_integral<T>::value,
        "Incorrect type passed to function ServerUtilityResult_Result_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
        ServerUtilityResult_Result_descriptor(), enum_t_value);
}
inline bool
ServerUtilityResult_Result_Parse(const std::string& name, ServerUtilityResult_Result* value)
{
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerUtilityResult_Result>(
        ServerUtilityResult_Result_descriptor(), name, value);
}
enum StatusTextType : int {
    STATUS_TEXT_TYPE_DEBUG = 0,
    STATUS_TEXT_TYPE_INFO = 1,
    STATUS_TEXT_TYPE_NOTICE = 2,
    STATUS_TEXT_TYPE_WARNING = 3,
    STATUS_TEXT_TYPE_ERROR = 4,
    STATUS_TEXT_TYPE_CRITICAL = 5,
    STATUS_TEXT_TYPE_ALERT = 6,
    STATUS_TEXT_TYPE_EMERGENCY = 7,
    StatusTextType_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    StatusTextType_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StatusTextType_IsValid(int value);
constexpr StatusTextType StatusTextType_MIN = STATUS_TEXT_TYPE_DEBUG;
constexpr StatusTextType StatusTextType_MAX = STATUS_TEXT_TYPE_EMERGENCY;
constexpr int StatusTextType_ARRAYSIZE = StatusTextType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusTextType_descriptor();
template<typename T> inline const std::string& StatusTextType_Name(T enum_t_value)
{
    static_assert(
        ::std::is_same<T, StatusTextType>::value || ::std::is_integral<T>::value,
        "Incorrect type passed to function StatusTextType_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(StatusTextType_descriptor(), enum_t_value);
}
inline bool StatusTextType_Parse(const std::string& name, StatusTextType* value)
{
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusTextType>(
        StatusTextType_descriptor(), name, value);
}
// ===================================================================

class SendStatusTextRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.server_utility.SendStatusTextRequest)
                                                                                      */
{
public:
    inline SendStatusTextRequest() : SendStatusTextRequest(nullptr){};
    virtual ~SendStatusTextRequest();

    SendStatusTextRequest(const SendStatusTextRequest& from);
    SendStatusTextRequest(SendStatusTextRequest&& from) noexcept : SendStatusTextRequest()
    {
        *this = ::std::move(from);
    }

    inline SendStatusTextRequest& operator=(const SendStatusTextRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SendStatusTextRequest& operator=(SendStatusTextRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SendStatusTextRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SendStatusTextRequest* internal_default_instance()
    {
        return reinterpret_cast<const SendStatusTextRequest*>(
            &_SendStatusTextRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;

    friend void swap(SendStatusTextRequest& a, SendStatusTextRequest& b) { a.Swap(&b); }
    inline void Swap(SendStatusTextRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SendStatusTextRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SendStatusTextRequest* New() const final
    {
        return CreateMaybeMessage<SendStatusTextRequest>(nullptr);
    }

    SendStatusTextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SendStatusTextRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SendStatusTextRequest& from);
    void MergeFrom(const SendStatusTextRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SendStatusTextRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.server_utility.SendStatusTextRequest";
    }

protected:
    explicit SendStatusTextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_server_5futility_2fserver_5futility_2eproto);
        return ::descriptor_table_server_5futility_2fserver_5futility_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kTextFieldNumber = 2,
        kTypeFieldNumber = 1,
    };
    // string text = 2;
    void clear_text();
    const std::string& text() const;
    void set_text(const std::string& value);
    void set_text(std::string&& value);
    void set_text(const char* value);
    void set_text(const char* value, size_t size);
    std::string* mutable_text();
    std::string* release_text();
    void set_allocated_text(std::string* text);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_text();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_text(std::string* text);

private:
    const std::string& _internal_text() const;
    void _internal_set_text(const std::string& value);
    std::string* _internal_mutable_text();

public:
    // .mavsdk.rpc.server_utility.StatusTextType type = 1;
    void clear_type();
    ::mavsdk::rpc::server_utility::StatusTextType type() const;
    void set_type(::mavsdk::rpc::server_utility::StatusTextType value);

private:
    ::mavsdk::rpc::server_utility::StatusTextType _internal_type() const;
    void _internal_set_type(::mavsdk::rpc::server_utility::StatusTextType value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.server_utility.SendStatusTextRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_server_5futility_2fserver_5futility_2eproto;
};
// -------------------------------------------------------------------

class SendStatusTextResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.server_utility.SendStatusTextResponse)
                                                                                       */
{
public:
    inline SendStatusTextResponse() : SendStatusTextResponse(nullptr){};
    virtual ~SendStatusTextResponse();

    SendStatusTextResponse(const SendStatusTextResponse& from);
    SendStatusTextResponse(SendStatusTextResponse&& from) noexcept : SendStatusTextResponse()
    {
        *this = ::std::move(from);
    }

    inline SendStatusTextResponse& operator=(const SendStatusTextResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SendStatusTextResponse& operator=(SendStatusTextResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SendStatusTextResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SendStatusTextResponse* internal_default_instance()
    {
        return reinterpret_cast<const SendStatusTextResponse*>(
            &_SendStatusTextResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;

    friend void swap(SendStatusTextResponse& a, SendStatusTextResponse& b) { a.Swap(&b); }
    inline void Swap(SendStatusTextResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SendStatusTextResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SendStatusTextResponse* New() const final
    {
        return CreateMaybeMessage<SendStatusTextResponse>(nullptr);
    }

    SendStatusTextResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SendStatusTextResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SendStatusTextResponse& from);
    void MergeFrom(const SendStatusTextResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SendStatusTextResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.server_utility.SendStatusTextResponse";
    }

protected:
    explicit SendStatusTextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_server_5futility_2fserver_5futility_2eproto);
        return ::descriptor_table_server_5futility_2fserver_5futility_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kServerUtilityResultFieldNumber = 1,
    };
    // .mavsdk.rpc.server_utility.ServerUtilityResult server_utility_result = 1;
    bool has_server_utility_result() const;

private:
    bool _internal_has_server_utility_result() const;

public:
    void clear_server_utility_result();
    const ::mavsdk::rpc::server_utility::ServerUtilityResult& server_utility_result() const;
    ::mavsdk::rpc::server_utility::ServerUtilityResult* release_server_utility_result();
    ::mavsdk::rpc::server_utility::ServerUtilityResult* mutable_server_utility_result();
    void set_allocated_server_utility_result(
        ::mavsdk::rpc::server_utility::ServerUtilityResult* server_utility_result);

private:
    const ::mavsdk::rpc::server_utility::ServerUtilityResult&
    _internal_server_utility_result() const;
    ::mavsdk::rpc::server_utility::ServerUtilityResult* _internal_mutable_server_utility_result();

public:
    void unsafe_arena_set_allocated_server_utility_result(
        ::mavsdk::rpc::server_utility::ServerUtilityResult* server_utility_result);
    ::mavsdk::rpc::server_utility::ServerUtilityResult*
    unsafe_arena_release_server_utility_result();

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.server_utility.SendStatusTextResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::server_utility::ServerUtilityResult* server_utility_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_server_5futility_2fserver_5futility_2eproto;
};
// -------------------------------------------------------------------

class ServerUtilityResult PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.server_utility.ServerUtilityResult)
                                                                                    */
{
public:
    inline ServerUtilityResult() : ServerUtilityResult(nullptr){};
    virtual ~ServerUtilityResult();

    ServerUtilityResult(const ServerUtilityResult& from);
    ServerUtilityResult(ServerUtilityResult&& from) noexcept : ServerUtilityResult()
    {
        *this = ::std::move(from);
    }

    inline ServerUtilityResult& operator=(const ServerUtilityResult& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ServerUtilityResult& operator=(ServerUtilityResult&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const ServerUtilityResult& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const ServerUtilityResult* internal_default_instance()
    {
        return reinterpret_cast<const ServerUtilityResult*>(
            &_ServerUtilityResult_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 2;

    friend void swap(ServerUtilityResult& a, ServerUtilityResult& b) { a.Swap(&b); }
    inline void Swap(ServerUtilityResult* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ServerUtilityResult* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ServerUtilityResult* New() const final
    {
        return CreateMaybeMessage<ServerUtilityResult>(nullptr);
    }

    ServerUtilityResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<ServerUtilityResult>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const ServerUtilityResult& from);
    void MergeFrom(const ServerUtilityResult& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ServerUtilityResult* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.server_utility.ServerUtilityResult";
    }

protected:
    explicit ServerUtilityResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_server_5futility_2fserver_5futility_2eproto);
        return ::descriptor_table_server_5futility_2fserver_5futility_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    typedef ServerUtilityResult_Result Result;
    static constexpr Result RESULT_UNKNOWN = ServerUtilityResult_Result_RESULT_UNKNOWN;
    static constexpr Result RESULT_SUCCESS = ServerUtilityResult_Result_RESULT_SUCCESS;
    static constexpr Result RESULT_NO_SYSTEM = ServerUtilityResult_Result_RESULT_NO_SYSTEM;
    static constexpr Result RESULT_CONNECTION_ERROR =
        ServerUtilityResult_Result_RESULT_CONNECTION_ERROR;
    static constexpr Result RESULT_INVALID_ARGUMENT =
        ServerUtilityResult_Result_RESULT_INVALID_ARGUMENT;
    static inline bool Result_IsValid(int value)
    {
        return ServerUtilityResult_Result_IsValid(value);
    }
    static constexpr Result Result_MIN = ServerUtilityResult_Result_Result_MIN;
    static constexpr Result Result_MAX = ServerUtilityResult_Result_Result_MAX;
    static constexpr int Result_ARRAYSIZE = ServerUtilityResult_Result_Result_ARRAYSIZE;
    static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor()
    {
        return ServerUtilityResult_Result_descriptor();
    }
    template<typename T> static inline const std::string& Result_Name(T enum_t_value)
    {
        static_assert(
            ::std::is_same<T, Result>::value || ::std::is_integral<T>::value,
            "Incorrect type passed to function Result_Name.");
        return ServerUtilityResult_Result_Name(enum_t_value);
    }
    static inline bool Result_Parse(const std::string& name, Result* value)
    {
        return ServerUtilityResult_Result_Parse(name, value);
    }

    // accessors -------------------------------------------------------

    enum : int {
        kResultStrFieldNumber = 2,
        kResultFieldNumber = 1,
    };
    // string result_str = 2;
    void clear_result_str();
    const std::string& result_str() const;
    void set_result_str(const std::string& value);
    void set_result_str(std::string&& value);
    void set_result_str(const char* value);
    void set_result_str(const char* value, size_t size);
    std::string* mutable_result_str();
    std::string* release_result_str();
    void set_allocated_result_str(std::string* result_str);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_result_str();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_result_str(std::string* result_str);

private:
    const std::string& _internal_result_str() const;
    void _internal_set_result_str(const std::string& value);
    std::string* _internal_mutable_result_str();

public:
    // .mavsdk.rpc.server_utility.ServerUtilityResult.Result result = 1;
    void clear_result();
    ::mavsdk::rpc::server_utility::ServerUtilityResult_Result result() const;
    void set_result(::mavsdk::rpc::server_utility::ServerUtilityResult_Result value);

private:
    ::mavsdk::rpc::server_utility::ServerUtilityResult_Result _internal_result() const;
    void _internal_set_result(::mavsdk::rpc::server_utility::ServerUtilityResult_Result value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.server_utility.ServerUtilityResult)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_server_5futility_2fserver_5futility_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// SendStatusTextRequest

// .mavsdk.rpc.server_utility.StatusTextType type = 1;
inline void SendStatusTextRequest::clear_type()
{
    type_ = 0;
}
inline ::mavsdk::rpc::server_utility::StatusTextType SendStatusTextRequest::_internal_type() const
{
    return static_cast<::mavsdk::rpc::server_utility::StatusTextType>(type_);
}
inline ::mavsdk::rpc::server_utility::StatusTextType SendStatusTextRequest::type() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.server_utility.SendStatusTextRequest.type)
    return _internal_type();
}
inline void
SendStatusTextRequest::_internal_set_type(::mavsdk::rpc::server_utility::StatusTextType value)
{
    type_ = value;
}
inline void SendStatusTextRequest::set_type(::mavsdk::rpc::server_utility::StatusTextType value)
{
    _internal_set_type(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.server_utility.SendStatusTextRequest.type)
}

// string text = 2;
inline void SendStatusTextRequest::clear_text()
{
    text_.ClearToEmpty(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendStatusTextRequest::text() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
    return _internal_text();
}
inline void SendStatusTextRequest::set_text(const std::string& value)
{
    _internal_set_text(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
}
inline std::string* SendStatusTextRequest::mutable_text()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
    return _internal_mutable_text();
}
inline const std::string& SendStatusTextRequest::_internal_text() const
{
    return text_.Get();
}
inline void SendStatusTextRequest::_internal_set_text(const std::string& value)
{
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendStatusTextRequest::set_text(std::string&& value)
{
    text_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value),
        GetArena());
    // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
}
inline void SendStatusTextRequest::set_text(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    text_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value),
        GetArena());
    // @@protoc_insertion_point(field_set_char:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
}
inline void SendStatusTextRequest::set_text(const char* value, size_t size)
{
    text_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size),
        GetArena());
    // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
}
inline std::string* SendStatusTextRequest::_internal_mutable_text()
{
    return text_.Mutable(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendStatusTextRequest::release_text()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
    return text_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendStatusTextRequest::set_allocated_text(std::string* text)
{
    if (text != nullptr) {
    } else {
    }
    text_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text, GetArena());
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
}
inline std::string* SendStatusTextRequest::unsafe_arena_release_text()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return text_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendStatusTextRequest::unsafe_arena_set_allocated_text(std::string* text)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (text != nullptr) {
    } else {
    }
    text_.UnsafeArenaSetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.server_utility.SendStatusTextRequest.text)
}

// -------------------------------------------------------------------

// SendStatusTextResponse

// .mavsdk.rpc.server_utility.ServerUtilityResult server_utility_result = 1;
inline bool SendStatusTextResponse::_internal_has_server_utility_result() const
{
    return this != internal_default_instance() && server_utility_result_ != nullptr;
}
inline bool SendStatusTextResponse::has_server_utility_result() const
{
    return _internal_has_server_utility_result();
}
inline void SendStatusTextResponse::clear_server_utility_result()
{
    if (GetArena() == nullptr && server_utility_result_ != nullptr) {
        delete server_utility_result_;
    }
    server_utility_result_ = nullptr;
}
inline const ::mavsdk::rpc::server_utility::ServerUtilityResult&
SendStatusTextResponse::_internal_server_utility_result() const
{
    const ::mavsdk::rpc::server_utility::ServerUtilityResult* p = server_utility_result_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::server_utility::ServerUtilityResult*>(
                   &::mavsdk::rpc::server_utility::_ServerUtilityResult_default_instance_);
}
inline const ::mavsdk::rpc::server_utility::ServerUtilityResult&
SendStatusTextResponse::server_utility_result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.server_utility.SendStatusTextResponse.server_utility_result)
    return _internal_server_utility_result();
}
inline void SendStatusTextResponse::unsafe_arena_set_allocated_server_utility_result(
    ::mavsdk::rpc::server_utility::ServerUtilityResult* server_utility_result)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_utility_result_);
    }
    server_utility_result_ = server_utility_result;
    if (server_utility_result) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.server_utility.SendStatusTextResponse.server_utility_result)
}
inline ::mavsdk::rpc::server_utility::ServerUtilityResult*
SendStatusTextResponse::release_server_utility_result()
{
    auto temp = unsafe_arena_release_server_utility_result();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::server_utility::ServerUtilityResult*
SendStatusTextResponse::unsafe_arena_release_server_utility_result()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.server_utility.SendStatusTextResponse.server_utility_result)

    ::mavsdk::rpc::server_utility::ServerUtilityResult* temp = server_utility_result_;
    server_utility_result_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::server_utility::ServerUtilityResult*
SendStatusTextResponse::_internal_mutable_server_utility_result()
{
    if (server_utility_result_ == nullptr) {
        auto* p =
            CreateMaybeMessage<::mavsdk::rpc::server_utility::ServerUtilityResult>(GetArena());
        server_utility_result_ = p;
    }
    return server_utility_result_;
}
inline ::mavsdk::rpc::server_utility::ServerUtilityResult*
SendStatusTextResponse::mutable_server_utility_result()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.server_utility.SendStatusTextResponse.server_utility_result)
    return _internal_mutable_server_utility_result();
}
inline void SendStatusTextResponse::set_allocated_server_utility_result(
    ::mavsdk::rpc::server_utility::ServerUtilityResult* server_utility_result)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete server_utility_result_;
    }
    if (server_utility_result) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server_utility_result);
        if (message_arena != submessage_arena) {
            server_utility_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, server_utility_result, submessage_arena);
        }

    } else {
    }
    server_utility_result_ = server_utility_result;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.server_utility.SendStatusTextResponse.server_utility_result)
}

// -------------------------------------------------------------------

// ServerUtilityResult

// .mavsdk.rpc.server_utility.ServerUtilityResult.Result result = 1;
inline void ServerUtilityResult::clear_result()
{
    result_ = 0;
}
inline ::mavsdk::rpc::server_utility::ServerUtilityResult_Result
ServerUtilityResult::_internal_result() const
{
    return static_cast<::mavsdk::rpc::server_utility::ServerUtilityResult_Result>(result_);
}
inline ::mavsdk::rpc::server_utility::ServerUtilityResult_Result ServerUtilityResult::result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.server_utility.ServerUtilityResult.result)
    return _internal_result();
}
inline void ServerUtilityResult::_internal_set_result(
    ::mavsdk::rpc::server_utility::ServerUtilityResult_Result value)
{
    result_ = value;
}
inline void
ServerUtilityResult::set_result(::mavsdk::rpc::server_utility::ServerUtilityResult_Result value)
{
    _internal_set_result(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.server_utility.ServerUtilityResult.result)
}

// string result_str = 2;
inline void ServerUtilityResult::clear_result_str()
{
    result_str_.ClearToEmpty(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerUtilityResult::result_str() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
    return _internal_result_str();
}
inline void ServerUtilityResult::set_result_str(const std::string& value)
{
    _internal_set_result_str(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
}
inline std::string* ServerUtilityResult::mutable_result_str()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
    return _internal_mutable_result_str();
}
inline const std::string& ServerUtilityResult::_internal_result_str() const
{
    return result_str_.Get();
}
inline void ServerUtilityResult::_internal_set_result_str(const std::string& value)
{
    result_str_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerUtilityResult::set_result_str(std::string&& value)
{
    result_str_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value),
        GetArena());
    // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
}
inline void ServerUtilityResult::set_result_str(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    result_str_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value),
        GetArena());
    // @@protoc_insertion_point(field_set_char:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
}
inline void ServerUtilityResult::set_result_str(const char* value, size_t size)
{
    result_str_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size),
        GetArena());
    // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
}
inline std::string* ServerUtilityResult::_internal_mutable_result_str()
{
    return result_str_.Mutable(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerUtilityResult::release_result_str()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
    return result_str_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerUtilityResult::set_allocated_result_str(std::string* result_str)
{
    if (result_str != nullptr) {
    } else {
    }
    result_str_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str, GetArena());
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
}
inline std::string* ServerUtilityResult::unsafe_arena_release_result_str()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return result_str_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerUtilityResult::unsafe_arena_set_allocated_result_str(std::string* result_str)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (result_str != nullptr) {
    } else {
    }
    result_str_.UnsafeArenaSetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.server_utility.ServerUtilityResult.result_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace server_utility
} // namespace rpc
} // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template<>
struct is_proto_enum<::mavsdk::rpc::server_utility::ServerUtilityResult_Result> : ::std::true_type {
};
template<>
inline const EnumDescriptor*
GetEnumDescriptor<::mavsdk::rpc::server_utility::ServerUtilityResult_Result>()
{
    return ::mavsdk::rpc::server_utility::ServerUtilityResult_Result_descriptor();
}
template<>
struct is_proto_enum<::mavsdk::rpc::server_utility::StatusTextType> : ::std::true_type {};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::server_utility::StatusTextType>()
{
    return ::mavsdk::rpc::server_utility::StatusTextType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5futility_2fserver_5futility_2eproto

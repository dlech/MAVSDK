// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component_information_server/component_information_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/extension_set.h> // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
} // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
        entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField
        aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable
        schema[7] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace component_information_server {
class ComponentInformationServerResult;
class ComponentInformationServerResultDefaultTypeInternal;
extern ComponentInformationServerResultDefaultTypeInternal
    _ComponentInformationServerResult_default_instance_;
class FloatParam;
class FloatParamDefaultTypeInternal;
extern FloatParamDefaultTypeInternal _FloatParam_default_instance_;
class FloatParamResponse;
class FloatParamResponseDefaultTypeInternal;
extern FloatParamResponseDefaultTypeInternal _FloatParamResponse_default_instance_;
class FloatParamUpdate;
class FloatParamUpdateDefaultTypeInternal;
extern FloatParamUpdateDefaultTypeInternal _FloatParamUpdate_default_instance_;
class ProvideFloatParamRequest;
class ProvideFloatParamRequestDefaultTypeInternal;
extern ProvideFloatParamRequestDefaultTypeInternal _ProvideFloatParamRequest_default_instance_;
class ProvideFloatParamResponse;
class ProvideFloatParamResponseDefaultTypeInternal;
extern ProvideFloatParamResponseDefaultTypeInternal _ProvideFloatParamResponse_default_instance_;
class SubscribeFloatParamRequest;
class SubscribeFloatParamRequestDefaultTypeInternal;
extern SubscribeFloatParamRequestDefaultTypeInternal _SubscribeFloatParamRequest_default_instance_;
} // namespace component_information_server
} // namespace rpc
} // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<>
::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
Arena::CreateMaybeMessage<
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult>(Arena*);
template<>
::mavsdk::rpc::component_information_server::FloatParam*
Arena::CreateMaybeMessage<::mavsdk::rpc::component_information_server::FloatParam>(Arena*);
template<>
::mavsdk::rpc::component_information_server::FloatParamResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::component_information_server::FloatParamResponse>(Arena*);
template<>
::mavsdk::rpc::component_information_server::FloatParamUpdate*
Arena::CreateMaybeMessage<::mavsdk::rpc::component_information_server::FloatParamUpdate>(Arena*);
template<>
::mavsdk::rpc::component_information_server::ProvideFloatParamRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::component_information_server::ProvideFloatParamRequest>(
    Arena*);
template<>
::mavsdk::rpc::component_information_server::ProvideFloatParamResponse*
Arena::CreateMaybeMessage<::mavsdk::rpc::component_information_server::ProvideFloatParamResponse>(
    Arena*);
template<>
::mavsdk::rpc::component_information_server::SubscribeFloatParamRequest*
Arena::CreateMaybeMessage<::mavsdk::rpc::component_information_server::SubscribeFloatParamRequest>(
    Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace component_information_server {

enum ComponentInformationServerResult_Result : int {
    ComponentInformationServerResult_Result_RESULT_UNKNOWN = 0,
    ComponentInformationServerResult_Result_RESULT_SUCCESS = 1,
    ComponentInformationServerResult_Result_RESULT_DUPLICATE_PARAM = 2,
    ComponentInformationServerResult_Result_RESULT_INVALID_PARAM_START_VALUE = 3,
    ComponentInformationServerResult_Result_RESULT_INVALID_PARAM_DEFAULT_VALUE = 4,
    ComponentInformationServerResult_Result_RESULT_INVALID_PARAM_NAME = 5,
    ComponentInformationServerResult_Result_RESULT_NO_SYSTEM = 6,
    ComponentInformationServerResult_Result_ComponentInformationServerResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    ComponentInformationServerResult_Result_ComponentInformationServerResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ComponentInformationServerResult_Result_IsValid(int value);
constexpr ComponentInformationServerResult_Result
    ComponentInformationServerResult_Result_Result_MIN =
        ComponentInformationServerResult_Result_RESULT_UNKNOWN;
constexpr ComponentInformationServerResult_Result
    ComponentInformationServerResult_Result_Result_MAX =
        ComponentInformationServerResult_Result_RESULT_NO_SYSTEM;
constexpr int ComponentInformationServerResult_Result_Result_ARRAYSIZE =
    ComponentInformationServerResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentInformationServerResult_Result_descriptor();
template<typename T>
inline const std::string& ComponentInformationServerResult_Result_Name(T enum_t_value)
{
    static_assert(
        ::std::is_same<T, ComponentInformationServerResult_Result>::value ||
            ::std::is_integral<T>::value,
        "Incorrect type passed to function ComponentInformationServerResult_Result_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
        ComponentInformationServerResult_Result_descriptor(), enum_t_value);
}
inline bool ComponentInformationServerResult_Result_Parse(
    const std::string& name, ComponentInformationServerResult_Result* value)
{
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
        ComponentInformationServerResult_Result>(
        ComponentInformationServerResult_Result_descriptor(), name, value);
}
// ===================================================================

class FloatParam PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information_server.FloatParam)
                                                                           */
{
public:
    inline FloatParam() : FloatParam(nullptr){};
    virtual ~FloatParam();

    FloatParam(const FloatParam& from);
    FloatParam(FloatParam&& from) noexcept : FloatParam() { *this = ::std::move(from); }

    inline FloatParam& operator=(const FloatParam& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline FloatParam& operator=(FloatParam&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const FloatParam& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const FloatParam* internal_default_instance()
    {
        return reinterpret_cast<const FloatParam*>(&_FloatParam_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;

    friend void swap(FloatParam& a, FloatParam& b) { a.Swap(&b); }
    inline void Swap(FloatParam* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(FloatParam* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline FloatParam* New() const final { return CreateMaybeMessage<FloatParam>(nullptr); }

    FloatParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<FloatParam>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const FloatParam& from);
    void MergeFrom(const FloatParam& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(FloatParam* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.component_information_server.FloatParam";
    }

protected:
    explicit FloatParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto);
        return ::
            descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto
                .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kNameFieldNumber = 1,
        kShortDescriptionFieldNumber = 2,
        kLongDescriptionFieldNumber = 3,
        kUnitFieldNumber = 4,
        kDecimalPlacesFieldNumber = 5,
        kStartValueFieldNumber = 6,
        kDefaultValueFieldNumber = 7,
        kMinValueFieldNumber = 8,
        kMaxValueFieldNumber = 9,
    };
    // string name = 1;
    void clear_name();
    const std::string& name() const;
    void set_name(const std::string& value);
    void set_name(std::string&& value);
    void set_name(const char* value);
    void set_name(const char* value, size_t size);
    std::string* mutable_name();
    std::string* release_name();
    void set_allocated_name(std::string* name);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_name();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_name(std::string* name);

private:
    const std::string& _internal_name() const;
    void _internal_set_name(const std::string& value);
    std::string* _internal_mutable_name();

public:
    // string short_description = 2;
    void clear_short_description();
    const std::string& short_description() const;
    void set_short_description(const std::string& value);
    void set_short_description(std::string&& value);
    void set_short_description(const char* value);
    void set_short_description(const char* value, size_t size);
    std::string* mutable_short_description();
    std::string* release_short_description();
    void set_allocated_short_description(std::string* short_description);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_short_description();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_short_description(std::string* short_description);

private:
    const std::string& _internal_short_description() const;
    void _internal_set_short_description(const std::string& value);
    std::string* _internal_mutable_short_description();

public:
    // string long_description = 3;
    void clear_long_description();
    const std::string& long_description() const;
    void set_long_description(const std::string& value);
    void set_long_description(std::string&& value);
    void set_long_description(const char* value);
    void set_long_description(const char* value, size_t size);
    std::string* mutable_long_description();
    std::string* release_long_description();
    void set_allocated_long_description(std::string* long_description);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_long_description();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_long_description(std::string* long_description);

private:
    const std::string& _internal_long_description() const;
    void _internal_set_long_description(const std::string& value);
    std::string* _internal_mutable_long_description();

public:
    // string unit = 4;
    void clear_unit();
    const std::string& unit() const;
    void set_unit(const std::string& value);
    void set_unit(std::string&& value);
    void set_unit(const char* value);
    void set_unit(const char* value, size_t size);
    std::string* mutable_unit();
    std::string* release_unit();
    void set_allocated_unit(std::string* unit);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_unit();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_unit(std::string* unit);

private:
    const std::string& _internal_unit() const;
    void _internal_set_unit(const std::string& value);
    std::string* _internal_mutable_unit();

public:
    // int32 decimal_places = 5;
    void clear_decimal_places();
    ::PROTOBUF_NAMESPACE_ID::int32 decimal_places() const;
    void set_decimal_places(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_decimal_places() const;
    void _internal_set_decimal_places(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // float start_value = 6;
    void clear_start_value();
    float start_value() const;
    void set_start_value(float value);

private:
    float _internal_start_value() const;
    void _internal_set_start_value(float value);

public:
    // float default_value = 7;
    void clear_default_value();
    float default_value() const;
    void set_default_value(float value);

private:
    float _internal_default_value() const;
    void _internal_set_default_value(float value);

public:
    // float min_value = 8;
    void clear_min_value();
    float min_value() const;
    void set_min_value(float value);

private:
    float _internal_min_value() const;
    void _internal_set_min_value(float value);

public:
    // float max_value = 9;
    void clear_max_value();
    float max_value() const;
    void set_max_value(float value);

private:
    float _internal_max_value() const;
    void _internal_set_max_value(float value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information_server.FloatParam)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
    ::PROTOBUF_NAMESPACE_ID::int32 decimal_places_;
    float start_value_;
    float default_value_;
    float min_value_;
    float max_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::
        TableStruct_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideFloatParamRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information_server.ProvideFloatParamRequest)
                                                                                         */
{
public:
    inline ProvideFloatParamRequest() : ProvideFloatParamRequest(nullptr){};
    virtual ~ProvideFloatParamRequest();

    ProvideFloatParamRequest(const ProvideFloatParamRequest& from);
    ProvideFloatParamRequest(ProvideFloatParamRequest&& from) noexcept : ProvideFloatParamRequest()
    {
        *this = ::std::move(from);
    }

    inline ProvideFloatParamRequest& operator=(const ProvideFloatParamRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ProvideFloatParamRequest& operator=(ProvideFloatParamRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const ProvideFloatParamRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const ProvideFloatParamRequest* internal_default_instance()
    {
        return reinterpret_cast<const ProvideFloatParamRequest*>(
            &_ProvideFloatParamRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;

    friend void swap(ProvideFloatParamRequest& a, ProvideFloatParamRequest& b) { a.Swap(&b); }
    inline void Swap(ProvideFloatParamRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ProvideFloatParamRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ProvideFloatParamRequest* New() const final
    {
        return CreateMaybeMessage<ProvideFloatParamRequest>(nullptr);
    }

    ProvideFloatParamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<ProvideFloatParamRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const ProvideFloatParamRequest& from);
    void MergeFrom(const ProvideFloatParamRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ProvideFloatParamRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.component_information_server.ProvideFloatParamRequest";
    }

protected:
    explicit ProvideFloatParamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto);
        return ::
            descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto
                .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kParamFieldNumber = 1,
    };
    // .mavsdk.rpc.component_information_server.FloatParam param = 1;
    bool has_param() const;

private:
    bool _internal_has_param() const;

public:
    void clear_param();
    const ::mavsdk::rpc::component_information_server::FloatParam& param() const;
    ::mavsdk::rpc::component_information_server::FloatParam* release_param();
    ::mavsdk::rpc::component_information_server::FloatParam* mutable_param();
    void set_allocated_param(::mavsdk::rpc::component_information_server::FloatParam* param);

private:
    const ::mavsdk::rpc::component_information_server::FloatParam& _internal_param() const;
    ::mavsdk::rpc::component_information_server::FloatParam* _internal_mutable_param();

public:
    void unsafe_arena_set_allocated_param(
        ::mavsdk::rpc::component_information_server::FloatParam* param);
    ::mavsdk::rpc::component_information_server::FloatParam* unsafe_arena_release_param();

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information_server.ProvideFloatParamRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::component_information_server::FloatParam* param_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::
        TableStruct_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvideFloatParamResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information_server.ProvideFloatParamResponse)
                                                                                          */
{
public:
    inline ProvideFloatParamResponse() : ProvideFloatParamResponse(nullptr){};
    virtual ~ProvideFloatParamResponse();

    ProvideFloatParamResponse(const ProvideFloatParamResponse& from);
    ProvideFloatParamResponse(ProvideFloatParamResponse&& from) noexcept :
        ProvideFloatParamResponse()
    {
        *this = ::std::move(from);
    }

    inline ProvideFloatParamResponse& operator=(const ProvideFloatParamResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ProvideFloatParamResponse& operator=(ProvideFloatParamResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const ProvideFloatParamResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const ProvideFloatParamResponse* internal_default_instance()
    {
        return reinterpret_cast<const ProvideFloatParamResponse*>(
            &_ProvideFloatParamResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 2;

    friend void swap(ProvideFloatParamResponse& a, ProvideFloatParamResponse& b) { a.Swap(&b); }
    inline void Swap(ProvideFloatParamResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ProvideFloatParamResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ProvideFloatParamResponse* New() const final
    {
        return CreateMaybeMessage<ProvideFloatParamResponse>(nullptr);
    }

    ProvideFloatParamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<ProvideFloatParamResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const ProvideFloatParamResponse& from);
    void MergeFrom(const ProvideFloatParamResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ProvideFloatParamResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.component_information_server.ProvideFloatParamResponse";
    }

protected:
    explicit ProvideFloatParamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto);
        return ::
            descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto
                .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kComponentInformationServerResultFieldNumber = 1,
    };
    // .mavsdk.rpc.component_information_server.ComponentInformationServerResult
    // component_information_server_result = 1;
    bool has_component_information_server_result() const;

private:
    bool _internal_has_component_information_server_result() const;

public:
    void clear_component_information_server_result();
    const ::mavsdk::rpc::component_information_server::ComponentInformationServerResult&
    component_information_server_result() const;
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
    release_component_information_server_result();
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
    mutable_component_information_server_result();
    void set_allocated_component_information_server_result(
        ::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
            component_information_server_result);

private:
    const ::mavsdk::rpc::component_information_server::ComponentInformationServerResult&
    _internal_component_information_server_result() const;
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
    _internal_mutable_component_information_server_result();

public:
    void unsafe_arena_set_allocated_component_information_server_result(
        ::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
            component_information_server_result);
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
    unsafe_arena_release_component_information_server_result();

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information_server.ProvideFloatParamResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
        component_information_server_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::
        TableStruct_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto;
};
// -------------------------------------------------------------------

class FloatParamUpdate PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information_server.FloatParamUpdate)
                                                                                 */
{
public:
    inline FloatParamUpdate() : FloatParamUpdate(nullptr){};
    virtual ~FloatParamUpdate();

    FloatParamUpdate(const FloatParamUpdate& from);
    FloatParamUpdate(FloatParamUpdate&& from) noexcept : FloatParamUpdate()
    {
        *this = ::std::move(from);
    }

    inline FloatParamUpdate& operator=(const FloatParamUpdate& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline FloatParamUpdate& operator=(FloatParamUpdate&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const FloatParamUpdate& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const FloatParamUpdate* internal_default_instance()
    {
        return reinterpret_cast<const FloatParamUpdate*>(&_FloatParamUpdate_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 3;

    friend void swap(FloatParamUpdate& a, FloatParamUpdate& b) { a.Swap(&b); }
    inline void Swap(FloatParamUpdate* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(FloatParamUpdate* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline FloatParamUpdate* New() const final
    {
        return CreateMaybeMessage<FloatParamUpdate>(nullptr);
    }

    FloatParamUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<FloatParamUpdate>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const FloatParamUpdate& from);
    void MergeFrom(const FloatParamUpdate& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(FloatParamUpdate* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.component_information_server.FloatParamUpdate";
    }

protected:
    explicit FloatParamUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto);
        return ::
            descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto
                .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kNameFieldNumber = 1,
        kValueFieldNumber = 2,
    };
    // string name = 1;
    void clear_name();
    const std::string& name() const;
    void set_name(const std::string& value);
    void set_name(std::string&& value);
    void set_name(const char* value);
    void set_name(const char* value, size_t size);
    std::string* mutable_name();
    std::string* release_name();
    void set_allocated_name(std::string* name);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_name();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_name(std::string* name);

private:
    const std::string& _internal_name() const;
    void _internal_set_name(const std::string& value);
    std::string* _internal_mutable_name();

public:
    // float value = 2;
    void clear_value();
    float value() const;
    void set_value(float value);

private:
    float _internal_value() const;
    void _internal_set_value(float value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information_server.FloatParamUpdate)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    float value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::
        TableStruct_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeFloatParamRequest PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information_server.SubscribeFloatParamRequest)
                                                                                           */
{
public:
    inline SubscribeFloatParamRequest() : SubscribeFloatParamRequest(nullptr){};
    virtual ~SubscribeFloatParamRequest();

    SubscribeFloatParamRequest(const SubscribeFloatParamRequest& from);
    SubscribeFloatParamRequest(SubscribeFloatParamRequest&& from) noexcept :
        SubscribeFloatParamRequest()
    {
        *this = ::std::move(from);
    }

    inline SubscribeFloatParamRequest& operator=(const SubscribeFloatParamRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline SubscribeFloatParamRequest& operator=(SubscribeFloatParamRequest&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const SubscribeFloatParamRequest& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const SubscribeFloatParamRequest* internal_default_instance()
    {
        return reinterpret_cast<const SubscribeFloatParamRequest*>(
            &_SubscribeFloatParamRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 4;

    friend void swap(SubscribeFloatParamRequest& a, SubscribeFloatParamRequest& b) { a.Swap(&b); }
    inline void Swap(SubscribeFloatParamRequest* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SubscribeFloatParamRequest* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SubscribeFloatParamRequest* New() const final
    {
        return CreateMaybeMessage<SubscribeFloatParamRequest>(nullptr);
    }

    SubscribeFloatParamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<SubscribeFloatParamRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const SubscribeFloatParamRequest& from);
    void MergeFrom(const SubscribeFloatParamRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SubscribeFloatParamRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.component_information_server.SubscribeFloatParamRequest";
    }

protected:
    explicit SubscribeFloatParamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto);
        return ::
            descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto
                .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information_server.SubscribeFloatParamRequest)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::
        TableStruct_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto;
};
// -------------------------------------------------------------------

class FloatParamResponse PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information_server.FloatParamResponse)
                                                                                   */
{
public:
    inline FloatParamResponse() : FloatParamResponse(nullptr){};
    virtual ~FloatParamResponse();

    FloatParamResponse(const FloatParamResponse& from);
    FloatParamResponse(FloatParamResponse&& from) noexcept : FloatParamResponse()
    {
        *this = ::std::move(from);
    }

    inline FloatParamResponse& operator=(const FloatParamResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline FloatParamResponse& operator=(FloatParamResponse&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const FloatParamResponse& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const FloatParamResponse* internal_default_instance()
    {
        return reinterpret_cast<const FloatParamResponse*>(&_FloatParamResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 5;

    friend void swap(FloatParamResponse& a, FloatParamResponse& b) { a.Swap(&b); }
    inline void Swap(FloatParamResponse* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(FloatParamResponse* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline FloatParamResponse* New() const final
    {
        return CreateMaybeMessage<FloatParamResponse>(nullptr);
    }

    FloatParamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<FloatParamResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const FloatParamResponse& from);
    void MergeFrom(const FloatParamResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(FloatParamResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.component_information_server.FloatParamResponse";
    }

protected:
    explicit FloatParamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto);
        return ::
            descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto
                .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kParamUpdateFieldNumber = 1,
    };
    // .mavsdk.rpc.component_information_server.FloatParamUpdate param_update = 1;
    bool has_param_update() const;

private:
    bool _internal_has_param_update() const;

public:
    void clear_param_update();
    const ::mavsdk::rpc::component_information_server::FloatParamUpdate& param_update() const;
    ::mavsdk::rpc::component_information_server::FloatParamUpdate* release_param_update();
    ::mavsdk::rpc::component_information_server::FloatParamUpdate* mutable_param_update();
    void set_allocated_param_update(
        ::mavsdk::rpc::component_information_server::FloatParamUpdate* param_update);

private:
    const ::mavsdk::rpc::component_information_server::FloatParamUpdate&
    _internal_param_update() const;
    ::mavsdk::rpc::component_information_server::FloatParamUpdate* _internal_mutable_param_update();

public:
    void unsafe_arena_set_allocated_param_update(
        ::mavsdk::rpc::component_information_server::FloatParamUpdate* param_update);
    ::mavsdk::rpc::component_information_server::FloatParamUpdate*
    unsafe_arena_release_param_update();

    // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information_server.FloatParamResponse)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::mavsdk::rpc::component_information_server::FloatParamUpdate* param_update_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::
        TableStruct_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ComponentInformationServerResult PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information_server.ComponentInformationServerResult)
                                               */
{
public:
    inline ComponentInformationServerResult() : ComponentInformationServerResult(nullptr){};
    virtual ~ComponentInformationServerResult();

    ComponentInformationServerResult(const ComponentInformationServerResult& from);
    ComponentInformationServerResult(ComponentInformationServerResult&& from) noexcept :
        ComponentInformationServerResult()
    {
        *this = ::std::move(from);
    }

    inline ComponentInformationServerResult& operator=(const ComponentInformationServerResult& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ComponentInformationServerResult&
    operator=(ComponentInformationServerResult&& from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from)
                InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() { return GetDescriptor(); }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
    {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
    {
        return GetMetadataStatic().reflection;
    }
    static const ComponentInformationServerResult& default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const ComponentInformationServerResult* internal_default_instance()
    {
        return reinterpret_cast<const ComponentInformationServerResult*>(
            &_ComponentInformationServerResult_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 6;

    friend void swap(ComponentInformationServerResult& a, ComponentInformationServerResult& b)
    {
        a.Swap(&b);
    }
    inline void Swap(ComponentInformationServerResult* other)
    {
        if (other == this)
            return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ComponentInformationServerResult* other)
    {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ComponentInformationServerResult* New() const final
    {
        return CreateMaybeMessage<ComponentInformationServerResult>(nullptr);
    }

    ComponentInformationServerResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final
    {
        return CreateMaybeMessage<ComponentInformationServerResult>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const ComponentInformationServerResult& from);
    void MergeFrom(const ComponentInformationServerResult& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ComponentInformationServerResult* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
        return "mavsdk.rpc.component_information_server.ComponentInformationServerResult";
    }

protected:
    explicit ComponentInformationServerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto);
        return ::
            descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto
                .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    typedef ComponentInformationServerResult_Result Result;
    static constexpr Result RESULT_UNKNOWN = ComponentInformationServerResult_Result_RESULT_UNKNOWN;
    static constexpr Result RESULT_SUCCESS = ComponentInformationServerResult_Result_RESULT_SUCCESS;
    static constexpr Result RESULT_DUPLICATE_PARAM =
        ComponentInformationServerResult_Result_RESULT_DUPLICATE_PARAM;
    static constexpr Result RESULT_INVALID_PARAM_START_VALUE =
        ComponentInformationServerResult_Result_RESULT_INVALID_PARAM_START_VALUE;
    static constexpr Result RESULT_INVALID_PARAM_DEFAULT_VALUE =
        ComponentInformationServerResult_Result_RESULT_INVALID_PARAM_DEFAULT_VALUE;
    static constexpr Result RESULT_INVALID_PARAM_NAME =
        ComponentInformationServerResult_Result_RESULT_INVALID_PARAM_NAME;
    static constexpr Result RESULT_NO_SYSTEM =
        ComponentInformationServerResult_Result_RESULT_NO_SYSTEM;
    static inline bool Result_IsValid(int value)
    {
        return ComponentInformationServerResult_Result_IsValid(value);
    }
    static constexpr Result Result_MIN = ComponentInformationServerResult_Result_Result_MIN;
    static constexpr Result Result_MAX = ComponentInformationServerResult_Result_Result_MAX;
    static constexpr int Result_ARRAYSIZE =
        ComponentInformationServerResult_Result_Result_ARRAYSIZE;
    static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor()
    {
        return ComponentInformationServerResult_Result_descriptor();
    }
    template<typename T> static inline const std::string& Result_Name(T enum_t_value)
    {
        static_assert(
            ::std::is_same<T, Result>::value || ::std::is_integral<T>::value,
            "Incorrect type passed to function Result_Name.");
        return ComponentInformationServerResult_Result_Name(enum_t_value);
    }
    static inline bool Result_Parse(const std::string& name, Result* value)
    {
        return ComponentInformationServerResult_Result_Parse(name, value);
    }

    // accessors -------------------------------------------------------

    enum : int {
        kResultStrFieldNumber = 2,
        kResultFieldNumber = 1,
    };
    // string result_str = 2;
    void clear_result_str();
    const std::string& result_str() const;
    void set_result_str(const std::string& value);
    void set_result_str(std::string&& value);
    void set_result_str(const char* value);
    void set_result_str(const char* value, size_t size);
    std::string* mutable_result_str();
    std::string* release_result_str();
    void set_allocated_result_str(std::string* result_str);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string* unsafe_arena_release_result_str();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_result_str(std::string* result_str);

private:
    const std::string& _internal_result_str() const;
    void _internal_set_result_str(const std::string& value);
    std::string* _internal_mutable_result_str();

public:
    // .mavsdk.rpc.component_information_server.ComponentInformationServerResult.Result result = 1;
    void clear_result();
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result
    result() const;
    void set_result(
        ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result value);

private:
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result
    _internal_result() const;
    void _internal_set_result(
        ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result value);

public:
    // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information_server.ComponentInformationServerResult)
private:
    class _Internal;

    template<typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::
        TableStruct_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// FloatParam

// string name = 1;
inline void FloatParam::clear_name()
{
    name_.ClearToEmpty(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FloatParam::name() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.FloatParam.name)
    return _internal_name();
}
inline void FloatParam::set_name(const std::string& value)
{
    _internal_set_name(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.FloatParam.name)
}
inline std::string* FloatParam::mutable_name()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information_server.FloatParam.name)
    return _internal_mutable_name();
}
inline const std::string& FloatParam::_internal_name() const
{
    return name_.Get();
}
inline void FloatParam::_internal_set_name(const std::string& value)
{
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FloatParam::set_name(std::string&& value)
{
    name_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value),
        GetArena());
    // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.component_information_server.FloatParam.name)
}
inline void FloatParam::set_name(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    name_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value),
        GetArena());
    // @@protoc_insertion_point(field_set_char:mavsdk.rpc.component_information_server.FloatParam.name)
}
inline void FloatParam::set_name(const char* value, size_t size)
{
    name_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size),
        GetArena());
    // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.component_information_server.FloatParam.name)
}
inline std::string* FloatParam::_internal_mutable_name()
{
    return name_.Mutable(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FloatParam::release_name()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information_server.FloatParam.name)
    return name_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FloatParam::set_allocated_name(std::string* name)
{
    if (name != nullptr) {
    } else {
    }
    name_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name, GetArena());
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information_server.FloatParam.name)
}
inline std::string* FloatParam::unsafe_arena_release_name()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:mavsdk.rpc.component_information_server.FloatParam.name)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return name_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FloatParam::unsafe_arena_set_allocated_name(std::string* name)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (name != nullptr) {
    } else {
    }
    name_.UnsafeArenaSetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_information_server.FloatParam.name)
}

// string short_description = 2;
inline void FloatParam::clear_short_description()
{
    short_description_.ClearToEmpty(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FloatParam::short_description() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.FloatParam.short_description)
    return _internal_short_description();
}
inline void FloatParam::set_short_description(const std::string& value)
{
    _internal_set_short_description(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.FloatParam.short_description)
}
inline std::string* FloatParam::mutable_short_description()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information_server.FloatParam.short_description)
    return _internal_mutable_short_description();
}
inline const std::string& FloatParam::_internal_short_description() const
{
    return short_description_.Get();
}
inline void FloatParam::_internal_set_short_description(const std::string& value)
{
    short_description_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FloatParam::set_short_description(std::string&& value)
{
    short_description_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value),
        GetArena());
    // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.component_information_server.FloatParam.short_description)
}
inline void FloatParam::set_short_description(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    short_description_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value),
        GetArena());
    // @@protoc_insertion_point(field_set_char:mavsdk.rpc.component_information_server.FloatParam.short_description)
}
inline void FloatParam::set_short_description(const char* value, size_t size)
{
    short_description_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size),
        GetArena());
    // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.component_information_server.FloatParam.short_description)
}
inline std::string* FloatParam::_internal_mutable_short_description()
{
    return short_description_.Mutable(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FloatParam::release_short_description()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information_server.FloatParam.short_description)
    return short_description_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FloatParam::set_allocated_short_description(std::string* short_description)
{
    if (short_description != nullptr) {
    } else {
    }
    short_description_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        short_description,
        GetArena());
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information_server.FloatParam.short_description)
}
inline std::string* FloatParam::unsafe_arena_release_short_description()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:mavsdk.rpc.component_information_server.FloatParam.short_description)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return short_description_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FloatParam::unsafe_arena_set_allocated_short_description(std::string* short_description)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (short_description != nullptr) {
    } else {
    }
    short_description_.UnsafeArenaSetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        short_description,
        GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_information_server.FloatParam.short_description)
}

// string long_description = 3;
inline void FloatParam::clear_long_description()
{
    long_description_.ClearToEmpty(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FloatParam::long_description() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.FloatParam.long_description)
    return _internal_long_description();
}
inline void FloatParam::set_long_description(const std::string& value)
{
    _internal_set_long_description(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.FloatParam.long_description)
}
inline std::string* FloatParam::mutable_long_description()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information_server.FloatParam.long_description)
    return _internal_mutable_long_description();
}
inline const std::string& FloatParam::_internal_long_description() const
{
    return long_description_.Get();
}
inline void FloatParam::_internal_set_long_description(const std::string& value)
{
    long_description_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FloatParam::set_long_description(std::string&& value)
{
    long_description_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value),
        GetArena());
    // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.component_information_server.FloatParam.long_description)
}
inline void FloatParam::set_long_description(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    long_description_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value),
        GetArena());
    // @@protoc_insertion_point(field_set_char:mavsdk.rpc.component_information_server.FloatParam.long_description)
}
inline void FloatParam::set_long_description(const char* value, size_t size)
{
    long_description_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size),
        GetArena());
    // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.component_information_server.FloatParam.long_description)
}
inline std::string* FloatParam::_internal_mutable_long_description()
{
    return long_description_.Mutable(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FloatParam::release_long_description()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information_server.FloatParam.long_description)
    return long_description_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FloatParam::set_allocated_long_description(std::string* long_description)
{
    if (long_description != nullptr) {
    } else {
    }
    long_description_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        long_description,
        GetArena());
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information_server.FloatParam.long_description)
}
inline std::string* FloatParam::unsafe_arena_release_long_description()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:mavsdk.rpc.component_information_server.FloatParam.long_description)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return long_description_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FloatParam::unsafe_arena_set_allocated_long_description(std::string* long_description)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (long_description != nullptr) {
    } else {
    }
    long_description_.UnsafeArenaSetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        long_description,
        GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_information_server.FloatParam.long_description)
}

// string unit = 4;
inline void FloatParam::clear_unit()
{
    unit_.ClearToEmpty(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FloatParam::unit() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.FloatParam.unit)
    return _internal_unit();
}
inline void FloatParam::set_unit(const std::string& value)
{
    _internal_set_unit(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.FloatParam.unit)
}
inline std::string* FloatParam::mutable_unit()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information_server.FloatParam.unit)
    return _internal_mutable_unit();
}
inline const std::string& FloatParam::_internal_unit() const
{
    return unit_.Get();
}
inline void FloatParam::_internal_set_unit(const std::string& value)
{
    unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FloatParam::set_unit(std::string&& value)
{
    unit_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value),
        GetArena());
    // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.component_information_server.FloatParam.unit)
}
inline void FloatParam::set_unit(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    unit_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value),
        GetArena());
    // @@protoc_insertion_point(field_set_char:mavsdk.rpc.component_information_server.FloatParam.unit)
}
inline void FloatParam::set_unit(const char* value, size_t size)
{
    unit_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size),
        GetArena());
    // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.component_information_server.FloatParam.unit)
}
inline std::string* FloatParam::_internal_mutable_unit()
{
    return unit_.Mutable(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FloatParam::release_unit()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information_server.FloatParam.unit)
    return unit_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FloatParam::set_allocated_unit(std::string* unit)
{
    if (unit != nullptr) {
    } else {
    }
    unit_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit, GetArena());
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information_server.FloatParam.unit)
}
inline std::string* FloatParam::unsafe_arena_release_unit()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:mavsdk.rpc.component_information_server.FloatParam.unit)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return unit_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FloatParam::unsafe_arena_set_allocated_unit(std::string* unit)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (unit != nullptr) {
    } else {
    }
    unit_.UnsafeArenaSetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_information_server.FloatParam.unit)
}

// int32 decimal_places = 5;
inline void FloatParam::clear_decimal_places()
{
    decimal_places_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FloatParam::_internal_decimal_places() const
{
    return decimal_places_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FloatParam::decimal_places() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.FloatParam.decimal_places)
    return _internal_decimal_places();
}
inline void FloatParam::_internal_set_decimal_places(::PROTOBUF_NAMESPACE_ID::int32 value)
{
    decimal_places_ = value;
}
inline void FloatParam::set_decimal_places(::PROTOBUF_NAMESPACE_ID::int32 value)
{
    _internal_set_decimal_places(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.FloatParam.decimal_places)
}

// float start_value = 6;
inline void FloatParam::clear_start_value()
{
    start_value_ = 0;
}
inline float FloatParam::_internal_start_value() const
{
    return start_value_;
}
inline float FloatParam::start_value() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.FloatParam.start_value)
    return _internal_start_value();
}
inline void FloatParam::_internal_set_start_value(float value)
{
    start_value_ = value;
}
inline void FloatParam::set_start_value(float value)
{
    _internal_set_start_value(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.FloatParam.start_value)
}

// float default_value = 7;
inline void FloatParam::clear_default_value()
{
    default_value_ = 0;
}
inline float FloatParam::_internal_default_value() const
{
    return default_value_;
}
inline float FloatParam::default_value() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.FloatParam.default_value)
    return _internal_default_value();
}
inline void FloatParam::_internal_set_default_value(float value)
{
    default_value_ = value;
}
inline void FloatParam::set_default_value(float value)
{
    _internal_set_default_value(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.FloatParam.default_value)
}

// float min_value = 8;
inline void FloatParam::clear_min_value()
{
    min_value_ = 0;
}
inline float FloatParam::_internal_min_value() const
{
    return min_value_;
}
inline float FloatParam::min_value() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.FloatParam.min_value)
    return _internal_min_value();
}
inline void FloatParam::_internal_set_min_value(float value)
{
    min_value_ = value;
}
inline void FloatParam::set_min_value(float value)
{
    _internal_set_min_value(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.FloatParam.min_value)
}

// float max_value = 9;
inline void FloatParam::clear_max_value()
{
    max_value_ = 0;
}
inline float FloatParam::_internal_max_value() const
{
    return max_value_;
}
inline float FloatParam::max_value() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.FloatParam.max_value)
    return _internal_max_value();
}
inline void FloatParam::_internal_set_max_value(float value)
{
    max_value_ = value;
}
inline void FloatParam::set_max_value(float value)
{
    _internal_set_max_value(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.FloatParam.max_value)
}

// -------------------------------------------------------------------

// ProvideFloatParamRequest

// .mavsdk.rpc.component_information_server.FloatParam param = 1;
inline bool ProvideFloatParamRequest::_internal_has_param() const
{
    return this != internal_default_instance() && param_ != nullptr;
}
inline bool ProvideFloatParamRequest::has_param() const
{
    return _internal_has_param();
}
inline void ProvideFloatParamRequest::clear_param()
{
    if (GetArena() == nullptr && param_ != nullptr) {
        delete param_;
    }
    param_ = nullptr;
}
inline const ::mavsdk::rpc::component_information_server::FloatParam&
ProvideFloatParamRequest::_internal_param() const
{
    const ::mavsdk::rpc::component_information_server::FloatParam* p = param_;
    return p != nullptr ?
               *p :
               *reinterpret_cast<const ::mavsdk::rpc::component_information_server::FloatParam*>(
                   &::mavsdk::rpc::component_information_server::_FloatParam_default_instance_);
}
inline const ::mavsdk::rpc::component_information_server::FloatParam&
ProvideFloatParamRequest::param() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.ProvideFloatParamRequest.param)
    return _internal_param();
}
inline void ProvideFloatParamRequest::unsafe_arena_set_allocated_param(
    ::mavsdk::rpc::component_information_server::FloatParam* param)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
    }
    param_ = param;
    if (param) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_information_server.ProvideFloatParamRequest.param)
}
inline ::mavsdk::rpc::component_information_server::FloatParam*
ProvideFloatParamRequest::release_param()
{
    auto temp = unsafe_arena_release_param();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::component_information_server::FloatParam*
ProvideFloatParamRequest::unsafe_arena_release_param()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information_server.ProvideFloatParamRequest.param)

    ::mavsdk::rpc::component_information_server::FloatParam* temp = param_;
    param_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::component_information_server::FloatParam*
ProvideFloatParamRequest::_internal_mutable_param()
{
    if (param_ == nullptr) {
        auto* p =
            CreateMaybeMessage<::mavsdk::rpc::component_information_server::FloatParam>(GetArena());
        param_ = p;
    }
    return param_;
}
inline ::mavsdk::rpc::component_information_server::FloatParam*
ProvideFloatParamRequest::mutable_param()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information_server.ProvideFloatParamRequest.param)
    return _internal_mutable_param();
}
inline void ProvideFloatParamRequest::set_allocated_param(
    ::mavsdk::rpc::component_information_server::FloatParam* param)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete param_;
    }
    if (param) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
        if (message_arena != submessage_arena) {
            param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, param, submessage_arena);
        }

    } else {
    }
    param_ = param;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information_server.ProvideFloatParamRequest.param)
}

// -------------------------------------------------------------------

// ProvideFloatParamResponse

// .mavsdk.rpc.component_information_server.ComponentInformationServerResult
// component_information_server_result = 1;
inline bool ProvideFloatParamResponse::_internal_has_component_information_server_result() const
{
    return this != internal_default_instance() && component_information_server_result_ != nullptr;
}
inline bool ProvideFloatParamResponse::has_component_information_server_result() const
{
    return _internal_has_component_information_server_result();
}
inline void ProvideFloatParamResponse::clear_component_information_server_result()
{
    if (GetArena() == nullptr && component_information_server_result_ != nullptr) {
        delete component_information_server_result_;
    }
    component_information_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::component_information_server::ComponentInformationServerResult&
ProvideFloatParamResponse::_internal_component_information_server_result() const
{
    const ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* p =
        component_information_server_result_;
    return p != nullptr ? *p :
                          *reinterpret_cast<const ::mavsdk::rpc::component_information_server::
                                                ComponentInformationServerResult*>(
                              &::mavsdk::rpc::component_information_server::
                                  _ComponentInformationServerResult_default_instance_);
}
inline const ::mavsdk::rpc::component_information_server::ComponentInformationServerResult&
ProvideFloatParamResponse::component_information_server_result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.ProvideFloatParamResponse.component_information_server_result)
    return _internal_component_information_server_result();
}
inline void
ProvideFloatParamResponse::unsafe_arena_set_allocated_component_information_server_result(
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
        component_information_server_result)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(
            component_information_server_result_);
    }
    component_information_server_result_ = component_information_server_result;
    if (component_information_server_result) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_information_server.ProvideFloatParamResponse.component_information_server_result)
}
inline ::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
ProvideFloatParamResponse::release_component_information_server_result()
{
    auto temp = unsafe_arena_release_component_information_server_result();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
ProvideFloatParamResponse::unsafe_arena_release_component_information_server_result()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information_server.ProvideFloatParamResponse.component_information_server_result)

    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* temp =
        component_information_server_result_;
    component_information_server_result_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
ProvideFloatParamResponse::_internal_mutable_component_information_server_result()
{
    if (component_information_server_result_ == nullptr) {
        auto* p = CreateMaybeMessage<
            ::mavsdk::rpc::component_information_server::ComponentInformationServerResult>(
            GetArena());
        component_information_server_result_ = p;
    }
    return component_information_server_result_;
}
inline ::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
ProvideFloatParamResponse::mutable_component_information_server_result()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information_server.ProvideFloatParamResponse.component_information_server_result)
    return _internal_mutable_component_information_server_result();
}
inline void ProvideFloatParamResponse::set_allocated_component_information_server_result(
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult*
        component_information_server_result)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete component_information_server_result_;
    }
    if (component_information_server_result) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(component_information_server_result);
        if (message_arena != submessage_arena) {
            component_information_server_result =
                ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, component_information_server_result, submessage_arena);
        }

    } else {
    }
    component_information_server_result_ = component_information_server_result;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information_server.ProvideFloatParamResponse.component_information_server_result)
}

// -------------------------------------------------------------------

// FloatParamUpdate

// string name = 1;
inline void FloatParamUpdate::clear_name()
{
    name_.ClearToEmpty(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FloatParamUpdate::name() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.FloatParamUpdate.name)
    return _internal_name();
}
inline void FloatParamUpdate::set_name(const std::string& value)
{
    _internal_set_name(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.FloatParamUpdate.name)
}
inline std::string* FloatParamUpdate::mutable_name()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information_server.FloatParamUpdate.name)
    return _internal_mutable_name();
}
inline const std::string& FloatParamUpdate::_internal_name() const
{
    return name_.Get();
}
inline void FloatParamUpdate::_internal_set_name(const std::string& value)
{
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FloatParamUpdate::set_name(std::string&& value)
{
    name_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value),
        GetArena());
    // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.component_information_server.FloatParamUpdate.name)
}
inline void FloatParamUpdate::set_name(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    name_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value),
        GetArena());
    // @@protoc_insertion_point(field_set_char:mavsdk.rpc.component_information_server.FloatParamUpdate.name)
}
inline void FloatParamUpdate::set_name(const char* value, size_t size)
{
    name_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size),
        GetArena());
    // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.component_information_server.FloatParamUpdate.name)
}
inline std::string* FloatParamUpdate::_internal_mutable_name()
{
    return name_.Mutable(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FloatParamUpdate::release_name()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information_server.FloatParamUpdate.name)
    return name_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FloatParamUpdate::set_allocated_name(std::string* name)
{
    if (name != nullptr) {
    } else {
    }
    name_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name, GetArena());
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information_server.FloatParamUpdate.name)
}
inline std::string* FloatParamUpdate::unsafe_arena_release_name()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:mavsdk.rpc.component_information_server.FloatParamUpdate.name)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return name_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FloatParamUpdate::unsafe_arena_set_allocated_name(std::string* name)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (name != nullptr) {
    } else {
    }
    name_.UnsafeArenaSetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_information_server.FloatParamUpdate.name)
}

// float value = 2;
inline void FloatParamUpdate::clear_value()
{
    value_ = 0;
}
inline float FloatParamUpdate::_internal_value() const
{
    return value_;
}
inline float FloatParamUpdate::value() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.FloatParamUpdate.value)
    return _internal_value();
}
inline void FloatParamUpdate::_internal_set_value(float value)
{
    value_ = value;
}
inline void FloatParamUpdate::set_value(float value)
{
    _internal_set_value(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.FloatParamUpdate.value)
}

// -------------------------------------------------------------------

// SubscribeFloatParamRequest

// -------------------------------------------------------------------

// FloatParamResponse

// .mavsdk.rpc.component_information_server.FloatParamUpdate param_update = 1;
inline bool FloatParamResponse::_internal_has_param_update() const
{
    return this != internal_default_instance() && param_update_ != nullptr;
}
inline bool FloatParamResponse::has_param_update() const
{
    return _internal_has_param_update();
}
inline void FloatParamResponse::clear_param_update()
{
    if (GetArena() == nullptr && param_update_ != nullptr) {
        delete param_update_;
    }
    param_update_ = nullptr;
}
inline const ::mavsdk::rpc::component_information_server::FloatParamUpdate&
FloatParamResponse::_internal_param_update() const
{
    const ::mavsdk::rpc::component_information_server::FloatParamUpdate* p = param_update_;
    return p != nullptr ? *p :
                          *reinterpret_cast<
                              const ::mavsdk::rpc::component_information_server::FloatParamUpdate*>(
                              &::mavsdk::rpc::component_information_server::
                                  _FloatParamUpdate_default_instance_);
}
inline const ::mavsdk::rpc::component_information_server::FloatParamUpdate&
FloatParamResponse::param_update() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.FloatParamResponse.param_update)
    return _internal_param_update();
}
inline void FloatParamResponse::unsafe_arena_set_allocated_param_update(
    ::mavsdk::rpc::component_information_server::FloatParamUpdate* param_update)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_update_);
    }
    param_update_ = param_update;
    if (param_update) {
    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_information_server.FloatParamResponse.param_update)
}
inline ::mavsdk::rpc::component_information_server::FloatParamUpdate*
FloatParamResponse::release_param_update()
{
    auto temp = unsafe_arena_release_param_update();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::mavsdk::rpc::component_information_server::FloatParamUpdate*
FloatParamResponse::unsafe_arena_release_param_update()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information_server.FloatParamResponse.param_update)

    ::mavsdk::rpc::component_information_server::FloatParamUpdate* temp = param_update_;
    param_update_ = nullptr;
    return temp;
}
inline ::mavsdk::rpc::component_information_server::FloatParamUpdate*
FloatParamResponse::_internal_mutable_param_update()
{
    if (param_update_ == nullptr) {
        auto* p = CreateMaybeMessage<::mavsdk::rpc::component_information_server::FloatParamUpdate>(
            GetArena());
        param_update_ = p;
    }
    return param_update_;
}
inline ::mavsdk::rpc::component_information_server::FloatParamUpdate*
FloatParamResponse::mutable_param_update()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information_server.FloatParamResponse.param_update)
    return _internal_mutable_param_update();
}
inline void FloatParamResponse::set_allocated_param_update(
    ::mavsdk::rpc::component_information_server::FloatParamUpdate* param_update)
{
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
    if (message_arena == nullptr) {
        delete param_update_;
    }
    if (param_update) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param_update);
        if (message_arena != submessage_arena) {
            param_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, param_update, submessage_arena);
        }

    } else {
    }
    param_update_ = param_update;
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information_server.FloatParamResponse.param_update)
}

// -------------------------------------------------------------------

// ComponentInformationServerResult

// .mavsdk.rpc.component_information_server.ComponentInformationServerResult.Result result = 1;
inline void ComponentInformationServerResult::clear_result()
{
    result_ = 0;
}
inline ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result
ComponentInformationServerResult::_internal_result() const
{
    return static_cast<
        ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result>(
        result_);
}
inline ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result
ComponentInformationServerResult::result() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result)
    return _internal_result();
}
inline void ComponentInformationServerResult::_internal_set_result(
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result value)
{
    result_ = value;
}
inline void ComponentInformationServerResult::set_result(
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result value)
{
    _internal_set_result(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result)
}

// string result_str = 2;
inline void ComponentInformationServerResult::clear_result_str()
{
    result_str_.ClearToEmpty(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ComponentInformationServerResult::result_str() const
{
    // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
    return _internal_result_str();
}
inline void ComponentInformationServerResult::set_result_str(const std::string& value)
{
    _internal_set_result_str(value);
    // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
}
inline std::string* ComponentInformationServerResult::mutable_result_str()
{
    // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
    return _internal_mutable_result_str();
}
inline const std::string& ComponentInformationServerResult::_internal_result_str() const
{
    return result_str_.Get();
}
inline void ComponentInformationServerResult::_internal_set_result_str(const std::string& value)
{
    result_str_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ComponentInformationServerResult::set_result_str(std::string&& value)
{
    result_str_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value),
        GetArena());
    // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
}
inline void ComponentInformationServerResult::set_result_str(const char* value)
{
    GOOGLE_DCHECK(value != nullptr);

    result_str_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value),
        GetArena());
    // @@protoc_insertion_point(field_set_char:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
}
inline void ComponentInformationServerResult::set_result_str(const char* value, size_t size)
{
    result_str_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size),
        GetArena());
    // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
}
inline std::string* ComponentInformationServerResult::_internal_mutable_result_str()
{
    return result_str_.Mutable(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ComponentInformationServerResult::release_result_str()
{
    // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
    return result_str_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComponentInformationServerResult::set_allocated_result_str(std::string* result_str)
{
    if (result_str != nullptr) {
    } else {
    }
    result_str_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str, GetArena());
    // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
}
inline std::string* ComponentInformationServerResult::unsafe_arena_release_result_str()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
    GOOGLE_DCHECK(GetArena() != nullptr);

    return result_str_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void
ComponentInformationServerResult::unsafe_arena_set_allocated_result_str(std::string* result_str)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (result_str != nullptr) {
    } else {
    }
    result_str_.UnsafeArenaSetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace component_information_server
} // namespace rpc
} // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template<>
struct is_proto_enum<
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result>
    : ::std::true_type {};
template<>
inline const EnumDescriptor* GetEnumDescriptor<
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result>()
{
    return ::mavsdk::rpc::component_information_server::
        ComponentInformationServerResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto

// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/camera_server/camera_server.proto)

#include "camera_server/camera_server.grpc.pb.h"
#include "plugins/camera_server/camera_server.h"

#include "mavsdk.h"
#include "lazy_plugin.h"
#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {

template<typename CameraServer = CameraServer, typename LazyPlugin = LazyPlugin<CameraServer>>
class CameraServerServiceImpl final : public rpc::camera_server::CameraServerService::Service {
public:
    CameraServerServiceImpl(LazyPlugin& lazy_plugin) : _lazy_plugin(lazy_plugin) {}

    template<typename ResponseType>
    void fillResponseWithResult(ResponseType* response, mavsdk::CameraServer::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_camera_server_result = new rpc::camera_server::CameraServerResult();
        rpc_camera_server_result->set_result(rpc_result);
        std::stringstream ss;
        ss << result;
        rpc_camera_server_result->set_result_str(ss.str());

        response->set_allocated_camera_server_result(rpc_camera_server_result);
    }

    static rpc::camera_server::CameraMode
    translateToRpcCameraMode(const mavsdk::CameraServer::CameraMode& camera_mode)
    {
        switch (camera_mode) {
            default:
                LogErr() << "Unknown camera_mode enum value: " << static_cast<int>(camera_mode);
            // FALLTHROUGH
            case mavsdk::CameraServer::CameraMode::Unknown:
                return rpc::camera_server::CAMERA_MODE_UNKNOWN;
            case mavsdk::CameraServer::CameraMode::Image:
                return rpc::camera_server::CAMERA_MODE_IMAGE;
            case mavsdk::CameraServer::CameraMode::Video:
                return rpc::camera_server::CAMERA_MODE_VIDEO;
            case mavsdk::CameraServer::CameraMode::Survey:
                return rpc::camera_server::CAMERA_MODE_SURVEY;
        }
    }

    static mavsdk::CameraServer::CameraMode
    translateFromRpcCameraMode(const rpc::camera_server::CameraMode camera_mode)
    {
        switch (camera_mode) {
            default:
                LogErr() << "Unknown camera_mode enum value: " << static_cast<int>(camera_mode);
            // FALLTHROUGH
            case rpc::camera_server::CAMERA_MODE_UNKNOWN:
                return mavsdk::CameraServer::CameraMode::Unknown;
            case rpc::camera_server::CAMERA_MODE_IMAGE:
                return mavsdk::CameraServer::CameraMode::Image;
            case rpc::camera_server::CAMERA_MODE_VIDEO:
                return mavsdk::CameraServer::CameraMode::Video;
            case rpc::camera_server::CAMERA_MODE_SURVEY:
                return mavsdk::CameraServer::CameraMode::Survey;
        }
    }

    static rpc::camera_server::CameraFocusStepDirection translateToRpcCameraFocusStepDirection(
        const mavsdk::CameraServer::CameraFocusStepDirection& camera_focus_step_direction)
    {
        switch (camera_focus_step_direction) {
            default:
                LogErr() << "Unknown camera_focus_step_direction enum value: "
                         << static_cast<int>(camera_focus_step_direction);
            // FALLTHROUGH
            case mavsdk::CameraServer::CameraFocusStepDirection::In:
                return rpc::camera_server::CAMERA_FOCUS_STEP_DIRECTION_IN;
            case mavsdk::CameraServer::CameraFocusStepDirection::Out:
                return rpc::camera_server::CAMERA_FOCUS_STEP_DIRECTION_OUT;
        }
    }

    static mavsdk::CameraServer::CameraFocusStepDirection translateFromRpcCameraFocusStepDirection(
        const rpc::camera_server::CameraFocusStepDirection camera_focus_step_direction)
    {
        switch (camera_focus_step_direction) {
            default:
                LogErr() << "Unknown camera_focus_step_direction enum value: "
                         << static_cast<int>(camera_focus_step_direction);
            // FALLTHROUGH
            case rpc::camera_server::CAMERA_FOCUS_STEP_DIRECTION_IN:
                return mavsdk::CameraServer::CameraFocusStepDirection::In;
            case rpc::camera_server::CAMERA_FOCUS_STEP_DIRECTION_OUT:
                return mavsdk::CameraServer::CameraFocusStepDirection::Out;
        }
    }

    static rpc::camera_server::CameraFocusType
    translateToRpcCameraFocusType(const mavsdk::CameraServer::CameraFocusType& camera_focus_type)
    {
        switch (camera_focus_type) {
            default:
                LogErr() << "Unknown camera_focus_type enum value: "
                         << static_cast<int>(camera_focus_type);
            // FALLTHROUGH
            case mavsdk::CameraServer::CameraFocusType::Step:
                return rpc::camera_server::CAMERA_FOCUS_TYPE_STEP;
            case mavsdk::CameraServer::CameraFocusType::Continuous:
                return rpc::camera_server::CAMERA_FOCUS_TYPE_CONTINUOUS;
            case mavsdk::CameraServer::CameraFocusType::Range:
                return rpc::camera_server::CAMERA_FOCUS_TYPE_RANGE;
            case mavsdk::CameraServer::CameraFocusType::Meters:
                return rpc::camera_server::CAMERA_FOCUS_TYPE_METERS;
            case mavsdk::CameraServer::CameraFocusType::Auto:
                return rpc::camera_server::CAMERA_FOCUS_TYPE_AUTO;
            case mavsdk::CameraServer::CameraFocusType::AutoSingle:
                return rpc::camera_server::CAMERA_FOCUS_TYPE_AUTO_SINGLE;
            case mavsdk::CameraServer::CameraFocusType::AutoContinuous:
                return rpc::camera_server::CAMERA_FOCUS_TYPE_AUTO_CONTINUOUS;
        }
    }

    static mavsdk::CameraServer::CameraFocusType
    translateFromRpcCameraFocusType(const rpc::camera_server::CameraFocusType camera_focus_type)
    {
        switch (camera_focus_type) {
            default:
                LogErr() << "Unknown camera_focus_type enum value: "
                         << static_cast<int>(camera_focus_type);
            // FALLTHROUGH
            case rpc::camera_server::CAMERA_FOCUS_TYPE_STEP:
                return mavsdk::CameraServer::CameraFocusType::Step;
            case rpc::camera_server::CAMERA_FOCUS_TYPE_CONTINUOUS:
                return mavsdk::CameraServer::CameraFocusType::Continuous;
            case rpc::camera_server::CAMERA_FOCUS_TYPE_RANGE:
                return mavsdk::CameraServer::CameraFocusType::Range;
            case rpc::camera_server::CAMERA_FOCUS_TYPE_METERS:
                return mavsdk::CameraServer::CameraFocusType::Meters;
            case rpc::camera_server::CAMERA_FOCUS_TYPE_AUTO:
                return mavsdk::CameraServer::CameraFocusType::Auto;
            case rpc::camera_server::CAMERA_FOCUS_TYPE_AUTO_SINGLE:
                return mavsdk::CameraServer::CameraFocusType::AutoSingle;
            case rpc::camera_server::CAMERA_FOCUS_TYPE_AUTO_CONTINUOUS:
                return mavsdk::CameraServer::CameraFocusType::AutoContinuous;
        }
    }

    static std::unique_ptr<rpc::camera_server::CameraZoomFocalLength>
    translateToRpcCameraZoomFocalLength(
        const mavsdk::CameraServer::CameraZoomFocalLength& camera_zoom_focal_length)
    {
        auto rpc_obj = std::make_unique<rpc::camera_server::CameraZoomFocalLength>();

        rpc_obj->set_normalized(camera_zoom_focal_length.normalized);

        rpc_obj->set_length(camera_zoom_focal_length.length);

        return rpc_obj;
    }

    static mavsdk::CameraServer::CameraZoomFocalLength translateFromRpcCameraZoomFocalLength(
        const rpc::camera_server::CameraZoomFocalLength& camera_zoom_focal_length)
    {
        mavsdk::CameraServer::CameraZoomFocalLength obj;

        obj.normalized = camera_zoom_focal_length.normalized();

        obj.length = camera_zoom_focal_length.length();

        return obj;
    }

    static std::unique_ptr<rpc::camera_server::CameraFocus>
    translateToRpcCameraFocus(const mavsdk::CameraServer::CameraFocus& camera_focus)
    {
        auto rpc_obj = std::make_unique<rpc::camera_server::CameraFocus>();

        rpc_obj->set_type(translateToRpcCameraFocusType(camera_focus.type));

        rpc_obj->set_step_direction(
            translateToRpcCameraFocusStepDirection(camera_focus.step_direction));

        rpc_obj->set_continuous(camera_focus.continuous);

        rpc_obj->set_normalized(camera_focus.normalized);

        rpc_obj->set_meters(camera_focus.meters);

        return rpc_obj;
    }

    static mavsdk::CameraServer::CameraFocus
    translateFromRpcCameraFocus(const rpc::camera_server::CameraFocus& camera_focus)
    {
        mavsdk::CameraServer::CameraFocus obj;

        obj.type = translateFromRpcCameraFocusType(camera_focus.type());

        obj.step_direction =
            translateFromRpcCameraFocusStepDirection(camera_focus.step_direction());

        obj.continuous = camera_focus.continuous();

        obj.normalized = camera_focus.normalized();

        obj.meters = camera_focus.meters();

        return obj;
    }

    static std::unique_ptr<rpc::camera_server::Information>
    translateToRpcInformation(const mavsdk::CameraServer::Information& information)
    {
        auto rpc_obj = std::make_unique<rpc::camera_server::Information>();

        rpc_obj->set_vendor_name(information.vendor_name);

        rpc_obj->set_model_name(information.model_name);

        rpc_obj->set_firmware_version(information.firmware_version);

        rpc_obj->set_focal_length_mm(information.focal_length_mm);

        rpc_obj->set_sensor_size_h_mm(information.sensor_size_h_mm);

        rpc_obj->set_sensor_size_v_mm(information.sensor_size_v_mm);

        rpc_obj->set_resolution_h_px(information.resolution_h_px);

        rpc_obj->set_resolution_v_px(information.resolution_v_px);

        rpc_obj->set_lens_id(information.lens_id);

        rpc_obj->set_cam_definition_version(information.cam_definition_version);

        rpc_obj->set_cam_definition_uri(information.cam_definition_uri);

        return rpc_obj;
    }

    static mavsdk::CameraServer::Information
    translateFromRpcInformation(const rpc::camera_server::Information& information)
    {
        mavsdk::CameraServer::Information obj;

        obj.vendor_name = information.vendor_name();

        obj.model_name = information.model_name();

        obj.firmware_version = information.firmware_version();

        obj.focal_length_mm = information.focal_length_mm();

        obj.sensor_size_h_mm = information.sensor_size_h_mm();

        obj.sensor_size_v_mm = information.sensor_size_v_mm();

        obj.resolution_h_px = information.resolution_h_px();

        obj.resolution_v_px = information.resolution_v_px();

        obj.lens_id = information.lens_id();

        obj.cam_definition_version = information.cam_definition_version();

        obj.cam_definition_uri = information.cam_definition_uri();

        return obj;
    }

    static std::unique_ptr<rpc::camera_server::Position>
    translateToRpcPosition(const mavsdk::CameraServer::Position& position)
    {
        auto rpc_obj = std::make_unique<rpc::camera_server::Position>();

        rpc_obj->set_latitude_deg(position.latitude_deg);

        rpc_obj->set_longitude_deg(position.longitude_deg);

        rpc_obj->set_absolute_altitude_m(position.absolute_altitude_m);

        rpc_obj->set_relative_altitude_m(position.relative_altitude_m);

        return rpc_obj;
    }

    static mavsdk::CameraServer::Position
    translateFromRpcPosition(const rpc::camera_server::Position& position)
    {
        mavsdk::CameraServer::Position obj;

        obj.latitude_deg = position.latitude_deg();

        obj.longitude_deg = position.longitude_deg();

        obj.absolute_altitude_m = position.absolute_altitude_m();

        obj.relative_altitude_m = position.relative_altitude_m();

        return obj;
    }

    static std::unique_ptr<rpc::camera_server::Quaternion>
    translateToRpcQuaternion(const mavsdk::CameraServer::Quaternion& quaternion)
    {
        auto rpc_obj = std::make_unique<rpc::camera_server::Quaternion>();

        rpc_obj->set_w(quaternion.w);

        rpc_obj->set_x(quaternion.x);

        rpc_obj->set_y(quaternion.y);

        rpc_obj->set_z(quaternion.z);

        return rpc_obj;
    }

    static mavsdk::CameraServer::Quaternion
    translateFromRpcQuaternion(const rpc::camera_server::Quaternion& quaternion)
    {
        mavsdk::CameraServer::Quaternion obj;

        obj.w = quaternion.w();

        obj.x = quaternion.x();

        obj.y = quaternion.y();

        obj.z = quaternion.z();

        return obj;
    }

    static std::unique_ptr<rpc::camera_server::CaptureInfo>
    translateToRpcCaptureInfo(const mavsdk::CameraServer::CaptureInfo& capture_info)
    {
        auto rpc_obj = std::make_unique<rpc::camera_server::CaptureInfo>();

        rpc_obj->set_allocated_position(translateToRpcPosition(capture_info.position).release());

        rpc_obj->set_allocated_attitude_quaternion(
            translateToRpcQuaternion(capture_info.attitude_quaternion).release());

        rpc_obj->set_time_utc_us(capture_info.time_utc_us);

        rpc_obj->set_is_success(capture_info.is_success);

        rpc_obj->set_index(capture_info.index);

        rpc_obj->set_file_url(capture_info.file_url);

        return rpc_obj;
    }

    static mavsdk::CameraServer::CaptureInfo
    translateFromRpcCaptureInfo(const rpc::camera_server::CaptureInfo& capture_info)
    {
        mavsdk::CameraServer::CaptureInfo obj;

        obj.position = translateFromRpcPosition(capture_info.position());

        obj.attitude_quaternion = translateFromRpcQuaternion(capture_info.attitude_quaternion());

        obj.time_utc_us = capture_info.time_utc_us();

        obj.is_success = capture_info.is_success();

        obj.index = capture_info.index();

        obj.file_url = capture_info.file_url();

        return obj;
    }

    static rpc::camera_server::CameraServerResult::Result
    translateToRpcResult(const mavsdk::CameraServer::Result& result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavsdk::CameraServer::Result::Unknown:
                return rpc::camera_server::CameraServerResult_Result_RESULT_UNKNOWN;
            case mavsdk::CameraServer::Result::Success:
                return rpc::camera_server::CameraServerResult_Result_RESULT_SUCCESS;
            case mavsdk::CameraServer::Result::InProgress:
                return rpc::camera_server::CameraServerResult_Result_RESULT_IN_PROGRESS;
            case mavsdk::CameraServer::Result::Busy:
                return rpc::camera_server::CameraServerResult_Result_RESULT_BUSY;
            case mavsdk::CameraServer::Result::Denied:
                return rpc::camera_server::CameraServerResult_Result_RESULT_DENIED;
            case mavsdk::CameraServer::Result::Error:
                return rpc::camera_server::CameraServerResult_Result_RESULT_ERROR;
            case mavsdk::CameraServer::Result::Timeout:
                return rpc::camera_server::CameraServerResult_Result_RESULT_TIMEOUT;
            case mavsdk::CameraServer::Result::WrongArgument:
                return rpc::camera_server::CameraServerResult_Result_RESULT_WRONG_ARGUMENT;
            case mavsdk::CameraServer::Result::NoSystem:
                return rpc::camera_server::CameraServerResult_Result_RESULT_NO_SYSTEM;
        }
    }

    static mavsdk::CameraServer::Result
    translateFromRpcResult(const rpc::camera_server::CameraServerResult::Result result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case rpc::camera_server::CameraServerResult_Result_RESULT_UNKNOWN:
                return mavsdk::CameraServer::Result::Unknown;
            case rpc::camera_server::CameraServerResult_Result_RESULT_SUCCESS:
                return mavsdk::CameraServer::Result::Success;
            case rpc::camera_server::CameraServerResult_Result_RESULT_IN_PROGRESS:
                return mavsdk::CameraServer::Result::InProgress;
            case rpc::camera_server::CameraServerResult_Result_RESULT_BUSY:
                return mavsdk::CameraServer::Result::Busy;
            case rpc::camera_server::CameraServerResult_Result_RESULT_DENIED:
                return mavsdk::CameraServer::Result::Denied;
            case rpc::camera_server::CameraServerResult_Result_RESULT_ERROR:
                return mavsdk::CameraServer::Result::Error;
            case rpc::camera_server::CameraServerResult_Result_RESULT_TIMEOUT:
                return mavsdk::CameraServer::Result::Timeout;
            case rpc::camera_server::CameraServerResult_Result_RESULT_WRONG_ARGUMENT:
                return mavsdk::CameraServer::Result::WrongArgument;
            case rpc::camera_server::CameraServerResult_Result_RESULT_NO_SYSTEM:
                return mavsdk::CameraServer::Result::NoSystem;
        }
    }

    grpc::Status SetInformation(
        grpc::ServerContext* /* context */,
        const rpc::camera_server::SetInformationRequest* request,
        rpc::camera_server::SetInformationResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::CameraServer::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetInformation sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->set_information(
            translateFromRpcInformation(request->information()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetInProgress(
        grpc::ServerContext* /* context */,
        const rpc::camera_server::SetInProgressRequest* request,
        rpc::camera_server::SetInProgressResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::CameraServer::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetInProgress sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->set_in_progress(request->in_progress());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SubscribeTakePhoto(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* request,
        grpc::ServerWriter<rpc::camera_server::TakePhotoResponse>* writer) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            rpc::camera_server::TakePhotoResponse rpc_response;
            auto result = mavsdk::CameraServer::Result::NoSystem;
            fillResponseWithResult(&rpc_response, result);
            writer->Write(rpc_response);

            return grpc::Status::OK;
        }

        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);
        auto subscribe_mutex = std::make_shared<std::mutex>();

        _lazy_plugin.maybe_plugin()->subscribe_take_photo(
            request->can_capture_in_video_mode(),
            [this, &writer, &stream_closed_promise, is_finished, subscribe_mutex](
                mavsdk::CameraServer::Result result, const int32_t take_photo) {
                rpc::camera_server::TakePhotoResponse rpc_response;

                rpc_response.set_index(take_photo);

                auto rpc_result = translateToRpcResult(result);
                auto* rpc_camera_server_result = new rpc::camera_server::CameraServerResult();
                rpc_camera_server_result->set_result(rpc_result);
                std::stringstream ss;
                ss << result;
                rpc_camera_server_result->set_result_str(ss.str());
                rpc_response.set_allocated_camera_server_result(rpc_camera_server_result);

                std::unique_lock<std::mutex> lock(*subscribe_mutex);
                if (!*is_finished && !writer->Write(rpc_response)) {
                    _lazy_plugin.maybe_plugin()->subscribe_take_photo(bool(), nullptr);

                    *is_finished = true;
                    unregister_stream_stop_promise(stream_closed_promise);
                    stream_closed_promise->set_value();
                }
            });

        stream_closed_future.wait();
        std::unique_lock<std::mutex> lock(*subscribe_mutex);
        *is_finished = true;

        return grpc::Status::OK;
    }

    grpc::Status SubscribeSetCameraModeImage(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::camera_server::SubscribeSetCameraModeImageRequest* /* request */,
        grpc::ServerWriter<rpc::camera_server::SetCameraModeImageResponse>* writer) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            rpc::camera_server::SetCameraModeImageResponse rpc_response;
            auto result = mavsdk::CameraServer::Result::NoSystem;
            fillResponseWithResult(&rpc_response, result);
            writer->Write(rpc_response);

            return grpc::Status::OK;
        }

        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);
        auto subscribe_mutex = std::make_shared<std::mutex>();

        _lazy_plugin.maybe_plugin()->subscribe_set_camera_mode_image(
            [this, &writer, &stream_closed_promise, is_finished, subscribe_mutex](
                mavsdk::CameraServer::Result result,
                const mavsdk::CameraServer::CameraMode set_camera_mode_image) {
                rpc::camera_server::SetCameraModeImageResponse rpc_response;

                rpc_response.set_mode(translateToRpcCameraMode(set_camera_mode_image));

                auto rpc_result = translateToRpcResult(result);
                auto* rpc_camera_server_result = new rpc::camera_server::CameraServerResult();
                rpc_camera_server_result->set_result(rpc_result);
                std::stringstream ss;
                ss << result;
                rpc_camera_server_result->set_result_str(ss.str());
                rpc_response.set_allocated_camera_server_result(rpc_camera_server_result);

                std::unique_lock<std::mutex> lock(*subscribe_mutex);
                if (!*is_finished && !writer->Write(rpc_response)) {
                    _lazy_plugin.maybe_plugin()->subscribe_set_camera_mode_image(nullptr);

                    *is_finished = true;
                    unregister_stream_stop_promise(stream_closed_promise);
                    stream_closed_promise->set_value();
                }
            });

        stream_closed_future.wait();
        std::unique_lock<std::mutex> lock(*subscribe_mutex);
        *is_finished = true;

        return grpc::Status::OK;
    }

    grpc::Status SubscribeSetCameraModeVideo(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::camera_server::SubscribeSetCameraModeVideoRequest* /* request */,
        grpc::ServerWriter<rpc::camera_server::SetCameraModeVideoResponse>* writer) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            rpc::camera_server::SetCameraModeVideoResponse rpc_response;
            auto result = mavsdk::CameraServer::Result::NoSystem;
            fillResponseWithResult(&rpc_response, result);
            writer->Write(rpc_response);

            return grpc::Status::OK;
        }

        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);
        auto subscribe_mutex = std::make_shared<std::mutex>();

        _lazy_plugin.maybe_plugin()->subscribe_set_camera_mode_video(
            [this, &writer, &stream_closed_promise, is_finished, subscribe_mutex](
                mavsdk::CameraServer::Result result,
                const mavsdk::CameraServer::CameraMode set_camera_mode_video) {
                rpc::camera_server::SetCameraModeVideoResponse rpc_response;

                rpc_response.set_mode(translateToRpcCameraMode(set_camera_mode_video));

                auto rpc_result = translateToRpcResult(result);
                auto* rpc_camera_server_result = new rpc::camera_server::CameraServerResult();
                rpc_camera_server_result->set_result(rpc_result);
                std::stringstream ss;
                ss << result;
                rpc_camera_server_result->set_result_str(ss.str());
                rpc_response.set_allocated_camera_server_result(rpc_camera_server_result);

                std::unique_lock<std::mutex> lock(*subscribe_mutex);
                if (!*is_finished && !writer->Write(rpc_response)) {
                    _lazy_plugin.maybe_plugin()->subscribe_set_camera_mode_video(nullptr);

                    *is_finished = true;
                    unregister_stream_stop_promise(stream_closed_promise);
                    stream_closed_promise->set_value();
                }
            });

        stream_closed_future.wait();
        std::unique_lock<std::mutex> lock(*subscribe_mutex);
        *is_finished = true;

        return grpc::Status::OK;
    }

    grpc::Status SubscribeSetCameraModeSurvey(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::camera_server::SubscribeSetCameraModeSurveyRequest* /* request */,
        grpc::ServerWriter<rpc::camera_server::SetCameraModeSurveyResponse>* writer) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            rpc::camera_server::SetCameraModeSurveyResponse rpc_response;
            auto result = mavsdk::CameraServer::Result::NoSystem;
            fillResponseWithResult(&rpc_response, result);
            writer->Write(rpc_response);

            return grpc::Status::OK;
        }

        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);
        auto subscribe_mutex = std::make_shared<std::mutex>();

        _lazy_plugin.maybe_plugin()->subscribe_set_camera_mode_survey(
            [this, &writer, &stream_closed_promise, is_finished, subscribe_mutex](
                mavsdk::CameraServer::Result result,
                const mavsdk::CameraServer::CameraMode set_camera_mode_survey) {
                rpc::camera_server::SetCameraModeSurveyResponse rpc_response;

                rpc_response.set_mode(translateToRpcCameraMode(set_camera_mode_survey));

                auto rpc_result = translateToRpcResult(result);
                auto* rpc_camera_server_result = new rpc::camera_server::CameraServerResult();
                rpc_camera_server_result->set_result(rpc_result);
                std::stringstream ss;
                ss << result;
                rpc_camera_server_result->set_result_str(ss.str());
                rpc_response.set_allocated_camera_server_result(rpc_camera_server_result);

                std::unique_lock<std::mutex> lock(*subscribe_mutex);
                if (!*is_finished && !writer->Write(rpc_response)) {
                    _lazy_plugin.maybe_plugin()->subscribe_set_camera_mode_survey(nullptr);

                    *is_finished = true;
                    unregister_stream_stop_promise(stream_closed_promise);
                    stream_closed_promise->set_value();
                }
            });

        stream_closed_future.wait();
        std::unique_lock<std::mutex> lock(*subscribe_mutex);
        *is_finished = true;

        return grpc::Status::OK;
    }

    grpc::Status SubscribeSetCameraZoom(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::camera_server::SubscribeSetCameraZoomRequest* request,
        grpc::ServerWriter<rpc::camera_server::SetCameraZoomResponse>* writer) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            rpc::camera_server::SetCameraZoomResponse rpc_response;
            auto result = mavsdk::CameraServer::Result::NoSystem;
            fillResponseWithResult(&rpc_response, result);
            writer->Write(rpc_response);

            return grpc::Status::OK;
        }

        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);
        auto subscribe_mutex = std::make_shared<std::mutex>();

        _lazy_plugin.maybe_plugin()->subscribe_set_camera_zoom(
            request->focal_length_min(),
            request->focal_length_max(),
            [this, &writer, &stream_closed_promise, is_finished, subscribe_mutex](
                mavsdk::CameraServer::Result result,
                const mavsdk::CameraServer::CameraZoomFocalLength set_camera_zoom) {
                rpc::camera_server::SetCameraZoomResponse rpc_response;

                rpc_response.set_allocated_focal(
                    translateToRpcCameraZoomFocalLength(set_camera_zoom).release());

                auto rpc_result = translateToRpcResult(result);
                auto* rpc_camera_server_result = new rpc::camera_server::CameraServerResult();
                rpc_camera_server_result->set_result(rpc_result);
                std::stringstream ss;
                ss << result;
                rpc_camera_server_result->set_result_str(ss.str());
                rpc_response.set_allocated_camera_server_result(rpc_camera_server_result);

                std::unique_lock<std::mutex> lock(*subscribe_mutex);
                if (!*is_finished && !writer->Write(rpc_response)) {
                    _lazy_plugin.maybe_plugin()->subscribe_set_camera_zoom(
                        float(), float(), nullptr);

                    *is_finished = true;
                    unregister_stream_stop_promise(stream_closed_promise);
                    stream_closed_promise->set_value();
                }
            });

        stream_closed_future.wait();
        std::unique_lock<std::mutex> lock(*subscribe_mutex);
        *is_finished = true;

        return grpc::Status::OK;
    }

    grpc::Status SubscribeSetCameraFocus(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::camera_server::SubscribeSetCameraFocusRequest* /* request */,
        grpc::ServerWriter<rpc::camera_server::SetCameraFocusResponse>* writer) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            rpc::camera_server::SetCameraFocusResponse rpc_response;
            auto result = mavsdk::CameraServer::Result::NoSystem;
            fillResponseWithResult(&rpc_response, result);
            writer->Write(rpc_response);

            return grpc::Status::OK;
        }

        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);
        auto subscribe_mutex = std::make_shared<std::mutex>();

        _lazy_plugin.maybe_plugin()->subscribe_set_camera_focus(
            [this, &writer, &stream_closed_promise, is_finished, subscribe_mutex](
                mavsdk::CameraServer::Result result,
                const mavsdk::CameraServer::CameraFocus set_camera_focus) {
                rpc::camera_server::SetCameraFocusResponse rpc_response;

                rpc_response.set_allocated_focus(
                    translateToRpcCameraFocus(set_camera_focus).release());

                auto rpc_result = translateToRpcResult(result);
                auto* rpc_camera_server_result = new rpc::camera_server::CameraServerResult();
                rpc_camera_server_result->set_result(rpc_result);
                std::stringstream ss;
                ss << result;
                rpc_camera_server_result->set_result_str(ss.str());
                rpc_response.set_allocated_camera_server_result(rpc_camera_server_result);

                std::unique_lock<std::mutex> lock(*subscribe_mutex);
                if (!*is_finished && !writer->Write(rpc_response)) {
                    _lazy_plugin.maybe_plugin()->subscribe_set_camera_focus(nullptr);

                    *is_finished = true;
                    unregister_stream_stop_promise(stream_closed_promise);
                    stream_closed_promise->set_value();
                }
            });

        stream_closed_future.wait();
        std::unique_lock<std::mutex> lock(*subscribe_mutex);
        *is_finished = true;

        return grpc::Status::OK;
    }

    grpc::Status PublishPhoto(
        grpc::ServerContext* /* context */,
        const rpc::camera_server::PublishPhotoRequest* request,
        rpc::camera_server::PublishPhotoResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::CameraServer::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "PublishPhoto sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->publish_photo(
            translateFromRpcCaptureInfo(request->capture_info()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    void stop()
    {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom)
    {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom)
    {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    LazyPlugin& _lazy_plugin;
    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

} // namespace mavsdk_server
} // namespace mavsdk